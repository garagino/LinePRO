
Seguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000816c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08008300  08008300  00009300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086f4  080086f4  0000a224  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080086f4  080086f4  000096f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086fc  080086fc  0000a224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086fc  080086fc  000096fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008700  08008700  00009700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  08008704  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20000224  08008928  0000a224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08008928  0000a570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a224  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138f9  00000000  00000000  0000a254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a53  00000000  00000000  0001db4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  000205a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de9  00000000  00000000  00021780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003807  00000000  00000000  00022569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144fb  00000000  00000000  00025d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc3bf  00000000  00000000  0003a26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013662a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c0c  00000000  00000000  00136670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0013c27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082e4 	.word	0x080082e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	080082e4 	.word	0x080082e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	@ 0x38
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f000 fce1 	bl	80018a0 <HAL_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // Motor esquerdo
 8000ede:	2100      	movs	r1, #0
 8000ee0:	481d      	ldr	r0, [pc, #116]	@ (8000f58 <main+0x84>)
 8000ee2:	f002 fc79 	bl	80037d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // Motor direito
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	481b      	ldr	r0, [pc, #108]	@ (8000f58 <main+0x84>)
 8000eea:	f002 fc75 	bl	80037d8 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f83b 	bl	8000f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 f91f 	bl	8001134 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ef6:	f000 f8ed 	bl	80010d4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000efa:	f000 f887 	bl	800100c <MX_TIM3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  read_sensors();
 8000efe:	f000 f9bd 	bl	800127c <read_sensors>
	  /*
	  	  //testar sensores
	  print_sensor_values();
	  HAL_Delay(100);
	  */
		HAL_GPIO_WritePin(MOTOR_L_PORT, MOTOR_L_IN1, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f08:	4814      	ldr	r0, [pc, #80]	@ (8000f5c <main+0x88>)
 8000f0a:	f000 ffd1 	bl	8001eb0 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_MAX);  // Ajuste o Timer correto
 8000f0e:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <main+0x84>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2264      	movs	r2, #100	@ 0x64
 8000f14:	635a      	str	r2, [r3, #52]	@ 0x34
	  ///*
	  	  //testar centroide
	  float centroid = calculate_centroid();
 8000f16:	f000 f9db 	bl	80012d0 <calculate_centroid>
 8000f1a:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	  char msg[50];
	  sprintf(msg, "Centroide: %.2f\r\n", centroid);
 8000f1e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000f20:	f7ff fb12 	bl	8000548 <__aeabi_f2d>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4638      	mov	r0, r7
 8000f2a:	490d      	ldr	r1, [pc, #52]	@ (8000f60 <main+0x8c>)
 8000f2c:	f005 f8a6 	bl	800607c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 8000f30:	463b      	mov	r3, r7
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f99c 	bl	8000270 <strlen>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4639      	mov	r1, r7
 8000f3e:	2364      	movs	r3, #100	@ 0x64
 8000f40:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <main+0x90>)
 8000f42:	f003 fc29 	bl	8004798 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000f46:	2064      	movs	r0, #100	@ 0x64
 8000f48:	f000 fcea 	bl	8001920 <HAL_Delay>


//	  float position = calculate_centroid();       // posição da linha
	//  float correction = compute_pid(position);    // calcular PID
	  //set_motor_speeds(correction);                // aplicar correção no motor
	  HAL_Delay(10);
 8000f4c:	200a      	movs	r0, #10
 8000f4e:	f000 fce7 	bl	8001920 <HAL_Delay>
  {
 8000f52:	bf00      	nop
 8000f54:	e7d3      	b.n	8000efe <main+0x2a>
 8000f56:	bf00      	nop
 8000f58:	20000240 	.word	0x20000240
 8000f5c:	48000400 	.word	0x48000400
 8000f60:	08008300 	.word	0x08008300
 8000f64:	2000028c 	.word	0x2000028c

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b096      	sub	sp, #88	@ 0x58
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	2244      	movs	r2, #68	@ 0x44
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 f8e5 	bl	8006146 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f8a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f8e:	f000 ffb5 	bl	8001efc <HAL_PWREx_ControlVoltageScaling>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f98:	f000 f9ec 	bl	8001374 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fa4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa6:	2310      	movs	r3, #16
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fb6:	230a      	movs	r3, #10
 8000fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fba:	2307      	movs	r3, #7
 8000fbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 ffec 	bl	8001fa8 <HAL_RCC_OscConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fd6:	f000 f9cd 	bl	8001374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fda:	230f      	movs	r3, #15
 8000fdc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fbb4 	bl	8002760 <HAL_RCC_ClockConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ffe:	f000 f9b9 	bl	8001374 <Error_Handler>
  }
}
 8001002:	bf00      	nop
 8001004:	3758      	adds	r7, #88	@ 0x58
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	@ 0x28
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
 800102c:	615a      	str	r2, [r3, #20]
 800102e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001030:	4b26      	ldr	r3, [pc, #152]	@ (80010cc <MX_TIM3_Init+0xc0>)
 8001032:	4a27      	ldr	r2, [pc, #156]	@ (80010d0 <MX_TIM3_Init+0xc4>)
 8001034:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001036:	4b25      	ldr	r3, [pc, #148]	@ (80010cc <MX_TIM3_Init+0xc0>)
 8001038:	2247      	movs	r2, #71	@ 0x47
 800103a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103c:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <MX_TIM3_Init+0xc0>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001042:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <MX_TIM3_Init+0xc0>)
 8001044:	2263      	movs	r2, #99	@ 0x63
 8001046:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001048:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <MX_TIM3_Init+0xc0>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104e:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <MX_TIM3_Init+0xc0>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001054:	481d      	ldr	r0, [pc, #116]	@ (80010cc <MX_TIM3_Init+0xc0>)
 8001056:	f002 fb67 	bl	8003728 <HAL_TIM_PWM_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001060:	f000 f988 	bl	8001374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4619      	mov	r1, r3
 8001072:	4816      	ldr	r0, [pc, #88]	@ (80010cc <MX_TIM3_Init+0xc0>)
 8001074:	f003 fa9c 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800107e:	f000 f979 	bl	8001374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001082:	2360      	movs	r3, #96	@ 0x60
 8001084:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <MX_TIM3_Init+0xc0>)
 800109a:	f002 fdab 	bl	8003bf4 <HAL_TIM_PWM_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80010a4:	f000 f966 	bl	8001374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	2204      	movs	r2, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4807      	ldr	r0, [pc, #28]	@ (80010cc <MX_TIM3_Init+0xc0>)
 80010b0:	f002 fda0 	bl	8003bf4 <HAL_TIM_PWM_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80010ba:	f000 f95b 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010be:	4803      	ldr	r0, [pc, #12]	@ (80010cc <MX_TIM3_Init+0xc0>)
 80010c0:	f000 f9a6 	bl	8001410 <HAL_TIM_MspPostInit>

}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	@ 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000240 	.word	0x20000240
 80010d0:	40000400 	.word	0x40000400

080010d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d8:	4b14      	ldr	r3, [pc, #80]	@ (800112c <MX_USART2_UART_Init+0x58>)
 80010da:	4a15      	ldr	r2, [pc, #84]	@ (8001130 <MX_USART2_UART_Init+0x5c>)
 80010dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010de:	4b13      	ldr	r3, [pc, #76]	@ (800112c <MX_USART2_UART_Init+0x58>)
 80010e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_USART2_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_USART2_UART_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_USART2_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <MX_USART2_UART_Init+0x58>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <MX_USART2_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_USART2_UART_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <MX_USART2_UART_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_USART2_UART_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_USART2_UART_Init+0x58>)
 8001118:	f003 faf0 	bl	80046fc <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001122:	f000 f927 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000028c 	.word	0x2000028c
 8001130:	40004400 	.word	0x40004400

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b49      	ldr	r3, [pc, #292]	@ (8001270 <MX_GPIO_Init+0x13c>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4a48      	ldr	r2, [pc, #288]	@ (8001270 <MX_GPIO_Init+0x13c>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001156:	4b46      	ldr	r3, [pc, #280]	@ (8001270 <MX_GPIO_Init+0x13c>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001162:	4b43      	ldr	r3, [pc, #268]	@ (8001270 <MX_GPIO_Init+0x13c>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4a42      	ldr	r2, [pc, #264]	@ (8001270 <MX_GPIO_Init+0x13c>)
 8001168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4b40      	ldr	r3, [pc, #256]	@ (8001270 <MX_GPIO_Init+0x13c>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b3d      	ldr	r3, [pc, #244]	@ (8001270 <MX_GPIO_Init+0x13c>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a3c      	ldr	r2, [pc, #240]	@ (8001270 <MX_GPIO_Init+0x13c>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4b3a      	ldr	r3, [pc, #232]	@ (8001270 <MX_GPIO_Init+0x13c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b37      	ldr	r3, [pc, #220]	@ (8001270 <MX_GPIO_Init+0x13c>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a36      	ldr	r2, [pc, #216]	@ (8001270 <MX_GPIO_Init+0x13c>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b34      	ldr	r3, [pc, #208]	@ (8001270 <MX_GPIO_Init+0x13c>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b4:	f000 fe7c 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_5, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80011be:	482d      	ldr	r0, [pc, #180]	@ (8001274 <MX_GPIO_Init+0x140>)
 80011c0:	f000 fe76 	bl	8001eb0 <HAL_GPIO_WritePin>


  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	4827      	ldr	r0, [pc, #156]	@ (8001278 <MX_GPIO_Init+0x144>)
 80011dc:	f000 fca6 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_10;
 80011e0:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fc:	f000 fc96 	bl	8001b2c <HAL_GPIO_Init>
//LD2_GPIO_Port

  /*Configure GPIO pins : PA0 PA1 PA4 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001200:	23d3      	movs	r3, #211	@ 0xd3
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001208:	2301      	movs	r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001216:	f000 fc89 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800121a:	2330      	movs	r3, #48	@ 0x30
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001222:	2301      	movs	r3, #1
 8001224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4812      	ldr	r0, [pc, #72]	@ (8001278 <MX_GPIO_Init+0x144>)
 800122e:	f000 fc7d 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001232:	2302      	movs	r3, #2
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800123a:	2301      	movs	r3, #1
 800123c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	480b      	ldr	r0, [pc, #44]	@ (8001274 <MX_GPIO_Init+0x140>)
 8001246:	f000 fc71 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_5;
 800124a:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	4804      	ldr	r0, [pc, #16]	@ (8001274 <MX_GPIO_Init+0x140>)
 8001264:	f000 fc62 	bl	8001b2c <HAL_GPIO_Init>


  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	@ 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000
 8001274:	48000400 	.word	0x48000400
 8001278:	48000800 	.word	0x48000800

0800127c <read_sensors>:

/* USER CODE BEGIN 4 */
void read_sensors() {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_SENSORS; i++) {
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	e015      	b.n	80012b4 <read_sensors+0x38>
        sensor_values[i] = HAL_GPIO_ReadPin(SENSOR_PORT[i], SENSOR_PIN[i]);
 8001288:	4a0e      	ldr	r2, [pc, #56]	@ (80012c4 <read_sensors+0x48>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001290:	490d      	ldr	r1, [pc, #52]	@ (80012c8 <read_sensors+0x4c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001298:	4619      	mov	r1, r3
 800129a:	4610      	mov	r0, r2
 800129c:	f000 fdf0 	bl	8001e80 <HAL_GPIO_ReadPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4619      	mov	r1, r3
 80012a4:	4a09      	ldr	r2, [pc, #36]	@ (80012cc <read_sensors+0x50>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	460a      	mov	r2, r1
 80012ac:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORS; i++) {
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3301      	adds	r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b07      	cmp	r3, #7
 80012b8:	dde6      	ble.n	8001288 <read_sensors+0xc>
    }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000020 	.word	0x20000020
 80012cc:	20000314 	.word	0x20000314

080012d0 <calculate_centroid>:
    } else {
        // Linha centralizada -> Seguir reto
    }
}

float calculate_centroid() {
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
    int sum_weights = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
    int sum_values = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < NUM_SENSORS; i++) {
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	e012      	b.n	800130a <calculate_centroid+0x3a>
        if (sensor_values[i] == 0) {  // Sensor detecta preto (linha)
 80012e4:	4a18      	ldr	r2, [pc, #96]	@ (8001348 <calculate_centroid+0x78>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d109      	bne.n	8001304 <calculate_centroid+0x34>
            sum_weights += sensor_positions[i];
 80012f0:	4a16      	ldr	r2, [pc, #88]	@ (800134c <calculate_centroid+0x7c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
            sum_values++;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	3301      	adds	r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < NUM_SENSORS; i++) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3301      	adds	r3, #1
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b07      	cmp	r3, #7
 800130e:	dde9      	ble.n	80012e4 <calculate_centroid+0x14>
        }
    }

    if (sum_values == 0) {
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d102      	bne.n	800131c <calculate_centroid+0x4c>
        return -1;  // Nenhum sensor detectou a linha (linha perdida)
 8001316:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800131a:	e00b      	b.n	8001334 <calculate_centroid+0x64>
    }

    return (float)sum_weights / sum_values;  // Centroide normalizado
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001330:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8001334:	eef0 7a66 	vmov.f32	s15, s13
 8001338:	eeb0 0a67 	vmov.f32	s0, s15
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000314 	.word	0x20000314
 800134c:	20000030 	.word	0x20000030

08001350 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001362:	f000 fabd 	bl	80018e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40012c00 	.word	0x40012c00

08001374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001378:	b672      	cpsid	i
}
 800137a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <Error_Handler+0x8>

08001380 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_MspInit+0x4c>)
 8001388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800138a:	4a10      	ldr	r2, [pc, #64]	@ (80013cc <HAL_MspInit+0x4c>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6613      	str	r3, [r2, #96]	@ 0x60
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <HAL_MspInit+0x4c>)
 8001394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <HAL_MspInit+0x4c>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <HAL_MspInit+0x4c>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <HAL_MspInit+0x4c>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	210f      	movs	r1, #15
 80013ba:	f06f 0001 	mvn.w	r0, #1
 80013be:	f000 fb8b 	bl	8001ad8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <HAL_TIM_PWM_MspInit+0x38>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10b      	bne.n	80013fa <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <HAL_TIM_PWM_MspInit+0x3c>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e6:	4a09      	ldr	r2, [pc, #36]	@ (800140c <HAL_TIM_PWM_MspInit+0x3c>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <HAL_TIM_PWM_MspInit+0x3c>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40000400 	.word	0x40000400
 800140c:	40021000 	.word	0x40021000

08001410 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	@ 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a1f      	ldr	r2, [pc, #124]	@ (80014ac <HAL_TIM_MspPostInit+0x9c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d137      	bne.n	80014a2 <HAL_TIM_MspPostInit+0x92>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <HAL_TIM_MspPostInit+0xa0>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	4a1e      	ldr	r2, [pc, #120]	@ (80014b0 <HAL_TIM_MspPostInit+0xa0>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143e:	4b1c      	ldr	r3, [pc, #112]	@ (80014b0 <HAL_TIM_MspPostInit+0xa0>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <HAL_TIM_MspPostInit+0xa0>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	4a18      	ldr	r2, [pc, #96]	@ (80014b0 <HAL_TIM_MspPostInit+0xa0>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001456:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <HAL_TIM_MspPostInit+0xa0>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001462:	2380      	movs	r3, #128	@ 0x80
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001472:	2302      	movs	r3, #2
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	480d      	ldr	r0, [pc, #52]	@ (80014b4 <HAL_TIM_MspPostInit+0xa4>)
 800147e:	f000 fb55 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001482:	2310      	movs	r3, #16
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001492:	2302      	movs	r3, #2
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <HAL_TIM_MspPostInit+0xa8>)
 800149e:	f000 fb45 	bl	8001b2c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	@ 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40000400 	.word	0x40000400
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000800 	.word	0x48000800
 80014b8:	48000400 	.word	0x48000400

080014bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b0ac      	sub	sp, #176	@ 0xb0
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2288      	movs	r2, #136	@ 0x88
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f004 fe32 	bl	8006146 <memset>
  if(huart->Instance==USART2)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a21      	ldr	r2, [pc, #132]	@ (800156c <HAL_UART_MspInit+0xb0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d13b      	bne.n	8001564 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4618      	mov	r0, r3
 80014fa:	f001 fb87 	bl	8002c0c <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001504:	f7ff ff36 	bl	8001374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001508:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <HAL_UART_MspInit+0xb4>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150c:	4a18      	ldr	r2, [pc, #96]	@ (8001570 <HAL_UART_MspInit+0xb4>)
 800150e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001512:	6593      	str	r3, [r2, #88]	@ 0x58
 8001514:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <HAL_UART_MspInit+0xb4>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <HAL_UART_MspInit+0xb4>)
 8001522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001524:	4a12      	ldr	r2, [pc, #72]	@ (8001570 <HAL_UART_MspInit+0xb4>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152c:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <HAL_UART_MspInit+0xb4>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001538:	230c      	movs	r3, #12
 800153a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001550:	2307      	movs	r3, #7
 8001552:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001560:	f000 fae4 	bl	8001b2c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001564:	bf00      	nop
 8001566:	37b0      	adds	r7, #176	@ 0xb0
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40004400 	.word	0x40004400
 8001570:	40021000 	.word	0x40021000

08001574 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	@ 0x30
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001582:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <HAL_InitTick+0xc8>)
 8001584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001586:	4a2d      	ldr	r2, [pc, #180]	@ (800163c <HAL_InitTick+0xc8>)
 8001588:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800158c:	6613      	str	r3, [r2, #96]	@ 0x60
 800158e:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <HAL_InitTick+0xc8>)
 8001590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001592:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800159a:	f107 020c 	add.w	r2, r7, #12
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 fa9f 	bl	8002ae8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80015aa:	f001 fa87 	bl	8002abc <HAL_RCC_GetPCLK2Freq>
 80015ae:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b2:	4a23      	ldr	r2, [pc, #140]	@ (8001640 <HAL_InitTick+0xcc>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	0c9b      	lsrs	r3, r3, #18
 80015ba:	3b01      	subs	r3, #1
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015be:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <HAL_InitTick+0xd0>)
 80015c0:	4a21      	ldr	r2, [pc, #132]	@ (8001648 <HAL_InitTick+0xd4>)
 80015c2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <HAL_InitTick+0xd0>)
 80015c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ca:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001644 <HAL_InitTick+0xd0>)
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <HAL_InitTick+0xd0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <HAL_InitTick+0xd0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015de:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <HAL_InitTick+0xd0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80015e4:	4817      	ldr	r0, [pc, #92]	@ (8001644 <HAL_InitTick+0xd0>)
 80015e6:	f001 ffcd 	bl	8003584 <HAL_TIM_Base_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80015f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d11b      	bne.n	8001630 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80015f8:	4812      	ldr	r0, [pc, #72]	@ (8001644 <HAL_InitTick+0xd0>)
 80015fa:	f002 f825 	bl	8003648 <HAL_TIM_Base_Start_IT>
 80015fe:	4603      	mov	r3, r0
 8001600:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001604:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001608:	2b00      	cmp	r3, #0
 800160a:	d111      	bne.n	8001630 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800160c:	2019      	movs	r0, #25
 800160e:	f000 fa7f 	bl	8001b10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d808      	bhi.n	800162a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	2019      	movs	r0, #25
 800161e:	f000 fa5b 	bl	8001ad8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <HAL_InitTick+0xd8>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	e002      	b.n	8001630 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001630:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001634:	4618      	mov	r0, r3
 8001636:	3730      	adds	r7, #48	@ 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000
 8001640:	431bde83 	.word	0x431bde83
 8001644:	2000031c 	.word	0x2000031c
 8001648:	40012c00 	.word	0x40012c00
 800164c:	20000054 	.word	0x20000054

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <NMI_Handler+0x4>

08001658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <MemManage_Handler+0x4>

08001668 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <UsageFault_Handler+0x4>

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800168e:	f002 f9a9 	bl	80039e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000031c 	.word	0x2000031c

0800169c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return 1;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_kill>:

int _kill(int pid, int sig)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016b6:	f004 fd99 	bl	80061ec <__errno>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2216      	movs	r2, #22
 80016be:	601a      	str	r2, [r3, #0]
  return -1;
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_exit>:

void _exit (int status)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ffe7 	bl	80016ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80016de:	bf00      	nop
 80016e0:	e7fd      	b.n	80016de <_exit+0x12>

080016e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e00a      	b.n	800170a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016f4:	f3af 8000 	nop.w
 80016f8:	4601      	mov	r1, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	60ba      	str	r2, [r7, #8]
 8001700:	b2ca      	uxtb	r2, r1
 8001702:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	429a      	cmp	r2, r3
 8001710:	dbf0      	blt.n	80016f4 <_read+0x12>
  }

  return len;
 8001712:	687b      	ldr	r3, [r7, #4]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e009      	b.n	8001742 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	60ba      	str	r2, [r7, #8]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3301      	adds	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	429a      	cmp	r2, r3
 8001748:	dbf1      	blt.n	800172e <_write+0x12>
  }
  return len;
 800174a:	687b      	ldr	r3, [r7, #4]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <_close>:

int _close(int file)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800177c:	605a      	str	r2, [r3, #4]
  return 0;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <_isatty>:

int _isatty(int file)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001794:	2301      	movs	r3, #1
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c4:	4a14      	ldr	r2, [pc, #80]	@ (8001818 <_sbrk+0x5c>)
 80017c6:	4b15      	ldr	r3, [pc, #84]	@ (800181c <_sbrk+0x60>)
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <_sbrk+0x64>)
 80017da:	4a12      	ldr	r2, [pc, #72]	@ (8001824 <_sbrk+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d207      	bcs.n	80017fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ec:	f004 fcfe 	bl	80061ec <__errno>
 80017f0:	4603      	mov	r3, r0
 80017f2:	220c      	movs	r2, #12
 80017f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	e009      	b.n	8001810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017fc:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001802:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <_sbrk+0x64>)
 800180c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20018000 	.word	0x20018000
 800181c:	00000400 	.word	0x00000400
 8001820:	20000368 	.word	0x20000368
 8001824:	20000570 	.word	0x20000570

08001828 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <SystemInit+0x20>)
 800182e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001832:	4a05      	ldr	r2, [pc, #20]	@ (8001848 <SystemInit+0x20>)
 8001834:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001838:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800184c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001884 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001850:	f7ff ffea 	bl	8001828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001854:	480c      	ldr	r0, [pc, #48]	@ (8001888 <LoopForever+0x6>)
  ldr r1, =_edata
 8001856:	490d      	ldr	r1, [pc, #52]	@ (800188c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001858:	4a0d      	ldr	r2, [pc, #52]	@ (8001890 <LoopForever+0xe>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186a:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800186c:	4c0a      	ldr	r4, [pc, #40]	@ (8001898 <LoopForever+0x16>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800187a:	f004 fcbd 	bl	80061f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800187e:	f7ff fb29 	bl	8000ed4 <main>

08001882 <LoopForever>:

LoopForever:
    b LoopForever
 8001882:	e7fe      	b.n	8001882 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001884:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800188c:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8001890:	08008704 	.word	0x08008704
  ldr r2, =_sbss
 8001894:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8001898:	20000570 	.word	0x20000570

0800189c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800189c:	e7fe      	b.n	800189c <ADC1_2_IRQHandler>
	...

080018a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018aa:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <HAL_Init+0x3c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a0b      	ldr	r2, [pc, #44]	@ (80018dc <HAL_Init+0x3c>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b6:	2003      	movs	r0, #3
 80018b8:	f000 f903 	bl	8001ac2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018bc:	200f      	movs	r0, #15
 80018be:	f7ff fe59 	bl	8001574 <HAL_InitTick>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	e001      	b.n	80018d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018ce:	f7ff fd57 	bl	8001380 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018d2:	79fb      	ldrb	r3, [r7, #7]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40022000 	.word	0x40022000

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000058 	.word	0x20000058
 8001904:	2000036c 	.word	0x2000036c

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000036c 	.word	0x2000036c

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000058 	.word	0x20000058

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4907      	ldr	r1, [pc, #28]	@ (8001a04 <__NVIC_EnableIRQ+0x38>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	@ (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	@ (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	@ 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	@ 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ff4c 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
 8001ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aea:	f7ff ff61 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001aee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	6978      	ldr	r0, [r7, #20]
 8001af6:	f7ff ffb1 	bl	8001a5c <NVIC_EncodePriority>
 8001afa:	4602      	mov	r2, r0
 8001afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff80 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b08:	bf00      	nop
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff54 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3a:	e17f      	b.n	8001e3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2101      	movs	r1, #1
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8171 	beq.w	8001e36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d005      	beq.n	8001b6c <HAL_GPIO_Init+0x40>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d130      	bne.n	8001bce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f003 0201 	and.w	r2, r3, #1
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d118      	bne.n	8001c0c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001be0:	2201      	movs	r2, #1
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	08db      	lsrs	r3, r3, #3
 8001bf6:	f003 0201 	and.w	r2, r3, #1
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d017      	beq.n	8001c48 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d123      	bne.n	8001c9c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	08da      	lsrs	r2, r3, #3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3208      	adds	r2, #8
 8001c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	08da      	lsrs	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3208      	adds	r2, #8
 8001c96:	6939      	ldr	r1, [r7, #16]
 8001c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0203 	and.w	r2, r3, #3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80ac 	beq.w	8001e36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cde:	4b5f      	ldr	r3, [pc, #380]	@ (8001e5c <HAL_GPIO_Init+0x330>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce2:	4a5e      	ldr	r2, [pc, #376]	@ (8001e5c <HAL_GPIO_Init+0x330>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cea:	4b5c      	ldr	r3, [pc, #368]	@ (8001e5c <HAL_GPIO_Init+0x330>)
 8001cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cf6:	4a5a      	ldr	r2, [pc, #360]	@ (8001e60 <HAL_GPIO_Init+0x334>)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d20:	d025      	beq.n	8001d6e <HAL_GPIO_Init+0x242>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4f      	ldr	r2, [pc, #316]	@ (8001e64 <HAL_GPIO_Init+0x338>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01f      	beq.n	8001d6a <HAL_GPIO_Init+0x23e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001e68 <HAL_GPIO_Init+0x33c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d019      	beq.n	8001d66 <HAL_GPIO_Init+0x23a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4d      	ldr	r2, [pc, #308]	@ (8001e6c <HAL_GPIO_Init+0x340>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0x236>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e70 <HAL_GPIO_Init+0x344>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00d      	beq.n	8001d5e <HAL_GPIO_Init+0x232>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4b      	ldr	r2, [pc, #300]	@ (8001e74 <HAL_GPIO_Init+0x348>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x22e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4a      	ldr	r2, [pc, #296]	@ (8001e78 <HAL_GPIO_Init+0x34c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_GPIO_Init+0x22a>
 8001d52:	2306      	movs	r3, #6
 8001d54:	e00c      	b.n	8001d70 <HAL_GPIO_Init+0x244>
 8001d56:	2307      	movs	r3, #7
 8001d58:	e00a      	b.n	8001d70 <HAL_GPIO_Init+0x244>
 8001d5a:	2305      	movs	r3, #5
 8001d5c:	e008      	b.n	8001d70 <HAL_GPIO_Init+0x244>
 8001d5e:	2304      	movs	r3, #4
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x244>
 8001d62:	2303      	movs	r3, #3
 8001d64:	e004      	b.n	8001d70 <HAL_GPIO_Init+0x244>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e002      	b.n	8001d70 <HAL_GPIO_Init+0x244>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_GPIO_Init+0x244>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	f002 0203 	and.w	r2, r2, #3
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	4093      	lsls	r3, r2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d80:	4937      	ldr	r1, [pc, #220]	@ (8001e60 <HAL_GPIO_Init+0x334>)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3302      	adds	r3, #2
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e7c <HAL_GPIO_Init+0x350>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001db2:	4a32      	ldr	r2, [pc, #200]	@ (8001e7c <HAL_GPIO_Init+0x350>)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001db8:	4b30      	ldr	r3, [pc, #192]	@ (8001e7c <HAL_GPIO_Init+0x350>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ddc:	4a27      	ldr	r2, [pc, #156]	@ (8001e7c <HAL_GPIO_Init+0x350>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001de2:	4b26      	ldr	r3, [pc, #152]	@ (8001e7c <HAL_GPIO_Init+0x350>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e06:	4a1d      	ldr	r2, [pc, #116]	@ (8001e7c <HAL_GPIO_Init+0x350>)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e7c <HAL_GPIO_Init+0x350>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e30:	4a12      	ldr	r2, [pc, #72]	@ (8001e7c <HAL_GPIO_Init+0x350>)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa22 f303 	lsr.w	r3, r2, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f47f ae78 	bne.w	8001b3c <HAL_GPIO_Init+0x10>
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	371c      	adds	r7, #28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40010000 	.word	0x40010000
 8001e64:	48000400 	.word	0x48000400
 8001e68:	48000800 	.word	0x48000800
 8001e6c:	48000c00 	.word	0x48000c00
 8001e70:	48001000 	.word	0x48001000
 8001e74:	48001400 	.word	0x48001400
 8001e78:	48001800 	.word	0x48001800
 8001e7c:	40010400 	.word	0x40010400

08001e80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	887b      	ldrh	r3, [r7, #2]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	e001      	b.n	8001ea2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ecc:	e002      	b.n	8001ed4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ece:	887a      	ldrh	r2, [r7, #2]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ee4:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40007000 	.word	0x40007000

08001efc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f0a:	d130      	bne.n	8001f6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f0c:	4b23      	ldr	r3, [pc, #140]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f18:	d038      	beq.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f1a:	4b20      	ldr	r3, [pc, #128]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f22:	4a1e      	ldr	r2, [pc, #120]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2232      	movs	r2, #50	@ 0x32
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0c9b      	lsrs	r3, r3, #18
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f40:	e002      	b.n	8001f48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f48:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f54:	d102      	bne.n	8001f5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f2      	bne.n	8001f42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f68:	d110      	bne.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e00f      	b.n	8001f8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f7a:	d007      	beq.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f7c:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f84:	4a05      	ldr	r2, [pc, #20]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	20000050 	.word	0x20000050
 8001fa4:	431bde83 	.word	0x431bde83

08001fa8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e3ca      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fba:	4b97      	ldr	r3, [pc, #604]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc4:	4b94      	ldr	r3, [pc, #592]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80e4 	beq.w	80021a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x4a>
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2b0c      	cmp	r3, #12
 8001fe6:	f040 808b 	bne.w	8002100 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	f040 8087 	bne.w	8002100 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ff2:	4b89      	ldr	r3, [pc, #548]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x62>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e3a2      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1a      	ldr	r2, [r3, #32]
 800200e:	4b82      	ldr	r3, [pc, #520]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d004      	beq.n	8002024 <HAL_RCC_OscConfig+0x7c>
 800201a:	4b7f      	ldr	r3, [pc, #508]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002022:	e005      	b.n	8002030 <HAL_RCC_OscConfig+0x88>
 8002024:	4b7c      	ldr	r3, [pc, #496]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002030:	4293      	cmp	r3, r2
 8002032:	d223      	bcs.n	800207c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fd87 	bl	8002b4c <RCC_SetFlashLatencyFromMSIRange>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e383      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002048:	4b73      	ldr	r3, [pc, #460]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a72      	ldr	r2, [pc, #456]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 800204e:	f043 0308 	orr.w	r3, r3, #8
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b70      	ldr	r3, [pc, #448]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	496d      	ldr	r1, [pc, #436]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002066:	4b6c      	ldr	r3, [pc, #432]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	4968      	ldr	r1, [pc, #416]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
 800207a:	e025      	b.n	80020c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800207c:	4b66      	ldr	r3, [pc, #408]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a65      	ldr	r2, [pc, #404]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002082:	f043 0308 	orr.w	r3, r3, #8
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b63      	ldr	r3, [pc, #396]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4960      	ldr	r1, [pc, #384]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800209a:	4b5f      	ldr	r3, [pc, #380]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	495b      	ldr	r1, [pc, #364]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d109      	bne.n	80020c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fd47 	bl	8002b4c <RCC_SetFlashLatencyFromMSIRange>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e343      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020c8:	f000 fc4a 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 80020cc:	4602      	mov	r2, r0
 80020ce:	4b52      	ldr	r3, [pc, #328]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	4950      	ldr	r1, [pc, #320]	@ (800221c <HAL_RCC_OscConfig+0x274>)
 80020da:	5ccb      	ldrb	r3, [r1, r3]
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
 80020e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002220 <HAL_RCC_OscConfig+0x278>)
 80020e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020e8:	4b4e      	ldr	r3, [pc, #312]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fa41 	bl	8001574 <HAL_InitTick>
 80020f2:	4603      	mov	r3, r0
 80020f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d052      	beq.n	80021a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	e327      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d032      	beq.n	800216e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002108:	4b43      	ldr	r3, [pc, #268]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a42      	ldr	r2, [pc, #264]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002114:	f7ff fbf8 	bl	8001908 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800211c:	f7ff fbf4 	bl	8001908 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e310      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800212e:	4b3a      	ldr	r3, [pc, #232]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800213a:	4b37      	ldr	r3, [pc, #220]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a36      	ldr	r2, [pc, #216]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002140:	f043 0308 	orr.w	r3, r3, #8
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b34      	ldr	r3, [pc, #208]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4931      	ldr	r1, [pc, #196]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002158:	4b2f      	ldr	r3, [pc, #188]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	492c      	ldr	r1, [pc, #176]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
 800216c:	e01a      	b.n	80021a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800216e:	4b2a      	ldr	r3, [pc, #168]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a29      	ldr	r2, [pc, #164]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800217a:	f7ff fbc5 	bl	8001908 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002182:	f7ff fbc1 	bl	8001908 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e2dd      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002194:	4b20      	ldr	r3, [pc, #128]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f0      	bne.n	8002182 <HAL_RCC_OscConfig+0x1da>
 80021a0:	e000      	b.n	80021a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d074      	beq.n	800229a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d005      	beq.n	80021c2 <HAL_RCC_OscConfig+0x21a>
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b0c      	cmp	r3, #12
 80021ba:	d10e      	bne.n	80021da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d10b      	bne.n	80021da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c2:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d064      	beq.n	8002298 <HAL_RCC_OscConfig+0x2f0>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d160      	bne.n	8002298 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e2ba      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x24a>
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 80021ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	e026      	b.n	8002240 <HAL_RCC_OscConfig+0x298>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021fa:	d115      	bne.n	8002228 <HAL_RCC_OscConfig+0x280>
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a05      	ldr	r2, [pc, #20]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002202:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a02      	ldr	r2, [pc, #8]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 800220e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	e014      	b.n	8002240 <HAL_RCC_OscConfig+0x298>
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	08008338 	.word	0x08008338
 8002220:	20000050 	.word	0x20000050
 8002224:	20000054 	.word	0x20000054
 8002228:	4ba0      	ldr	r3, [pc, #640]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a9f      	ldr	r2, [pc, #636]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 800222e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b9d      	ldr	r3, [pc, #628]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a9c      	ldr	r2, [pc, #624]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 800223a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800223e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d013      	beq.n	8002270 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7ff fb5e 	bl	8001908 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002250:	f7ff fb5a 	bl	8001908 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	@ 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e276      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002262:	4b92      	ldr	r3, [pc, #584]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x2a8>
 800226e:	e014      	b.n	800229a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7ff fb4a 	bl	8001908 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002278:	f7ff fb46 	bl	8001908 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	@ 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e262      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800228a:	4b88      	ldr	r3, [pc, #544]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x2d0>
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d060      	beq.n	8002368 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_OscConfig+0x310>
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2b0c      	cmp	r3, #12
 80022b0:	d119      	bne.n	80022e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d116      	bne.n	80022e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b8:	4b7c      	ldr	r3, [pc, #496]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_OscConfig+0x328>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e23f      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d0:	4b76      	ldr	r3, [pc, #472]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	061b      	lsls	r3, r3, #24
 80022de:	4973      	ldr	r1, [pc, #460]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e4:	e040      	b.n	8002368 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d023      	beq.n	8002336 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ee:	4b6f      	ldr	r3, [pc, #444]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a6e      	ldr	r2, [pc, #440]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 80022f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7ff fb05 	bl	8001908 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002302:	f7ff fb01 	bl	8001908 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e21d      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002314:	4b65      	ldr	r3, [pc, #404]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002320:	4b62      	ldr	r3, [pc, #392]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	061b      	lsls	r3, r3, #24
 800232e:	495f      	ldr	r1, [pc, #380]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
 8002334:	e018      	b.n	8002368 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002336:	4b5d      	ldr	r3, [pc, #372]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a5c      	ldr	r2, [pc, #368]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 800233c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7ff fae1 	bl	8001908 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234a:	f7ff fadd 	bl	8001908 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e1f9      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800235c:	4b53      	ldr	r3, [pc, #332]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d03c      	beq.n	80023ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d01c      	beq.n	80023b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237c:	4b4b      	ldr	r3, [pc, #300]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 800237e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002382:	4a4a      	ldr	r2, [pc, #296]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7ff fabc 	bl	8001908 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002394:	f7ff fab8 	bl	8001908 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e1d4      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023a6:	4b41      	ldr	r3, [pc, #260]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 80023a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0ef      	beq.n	8002394 <HAL_RCC_OscConfig+0x3ec>
 80023b4:	e01b      	b.n	80023ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b6:	4b3d      	ldr	r3, [pc, #244]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 80023b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023bc:	4a3b      	ldr	r2, [pc, #236]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c6:	f7ff fa9f 	bl	8001908 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ce:	f7ff fa9b 	bl	8001908 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1b7      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023e0:	4b32      	ldr	r3, [pc, #200]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 80023e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1ef      	bne.n	80023ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 80a6 	beq.w	8002548 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fc:	2300      	movs	r3, #0
 80023fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002400:	4b2a      	ldr	r3, [pc, #168]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10d      	bne.n	8002428 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240c:	4b27      	ldr	r3, [pc, #156]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002410:	4a26      	ldr	r2, [pc, #152]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 8002412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002416:	6593      	str	r3, [r2, #88]	@ 0x58
 8002418:	4b24      	ldr	r3, [pc, #144]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 800241a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002424:	2301      	movs	r3, #1
 8002426:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002428:	4b21      	ldr	r3, [pc, #132]	@ (80024b0 <HAL_RCC_OscConfig+0x508>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d118      	bne.n	8002466 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002434:	4b1e      	ldr	r3, [pc, #120]	@ (80024b0 <HAL_RCC_OscConfig+0x508>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1d      	ldr	r2, [pc, #116]	@ (80024b0 <HAL_RCC_OscConfig+0x508>)
 800243a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800243e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002440:	f7ff fa62 	bl	8001908 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002448:	f7ff fa5e 	bl	8001908 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e17a      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800245a:	4b15      	ldr	r3, [pc, #84]	@ (80024b0 <HAL_RCC_OscConfig+0x508>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d108      	bne.n	8002480 <HAL_RCC_OscConfig+0x4d8>
 800246e:	4b0f      	ldr	r3, [pc, #60]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002474:	4a0d      	ldr	r2, [pc, #52]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800247e:	e029      	b.n	80024d4 <HAL_RCC_OscConfig+0x52c>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b05      	cmp	r3, #5
 8002486:	d115      	bne.n	80024b4 <HAL_RCC_OscConfig+0x50c>
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248e:	4a07      	ldr	r2, [pc, #28]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002498:	4b04      	ldr	r3, [pc, #16]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249e:	4a03      	ldr	r2, [pc, #12]	@ (80024ac <HAL_RCC_OscConfig+0x504>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024a8:	e014      	b.n	80024d4 <HAL_RCC_OscConfig+0x52c>
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40007000 	.word	0x40007000
 80024b4:	4b9c      	ldr	r3, [pc, #624]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ba:	4a9b      	ldr	r2, [pc, #620]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024c4:	4b98      	ldr	r3, [pc, #608]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ca:	4a97      	ldr	r2, [pc, #604]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d016      	beq.n	800250a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7ff fa14 	bl	8001908 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e4:	f7ff fa10 	bl	8001908 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e12a      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80024fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0ed      	beq.n	80024e4 <HAL_RCC_OscConfig+0x53c>
 8002508:	e015      	b.n	8002536 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250a:	f7ff f9fd 	bl	8001908 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7ff f9f9 	bl	8001908 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e113      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002528:	4b7f      	ldr	r3, [pc, #508]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1ed      	bne.n	8002512 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002536:	7ffb      	ldrb	r3, [r7, #31]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d105      	bne.n	8002548 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253c:	4b7a      	ldr	r3, [pc, #488]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	4a79      	ldr	r2, [pc, #484]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 8002542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002546:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80fe 	beq.w	800274e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002556:	2b02      	cmp	r3, #2
 8002558:	f040 80d0 	bne.w	80026fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800255c:	4b72      	ldr	r3, [pc, #456]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	429a      	cmp	r2, r3
 800256e:	d130      	bne.n	80025d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	3b01      	subs	r3, #1
 800257c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d127      	bne.n	80025d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800258c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d11f      	bne.n	80025d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800259c:	2a07      	cmp	r2, #7
 800259e:	bf14      	ite	ne
 80025a0:	2201      	movne	r2, #1
 80025a2:	2200      	moveq	r2, #0
 80025a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d113      	bne.n	80025d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	3b01      	subs	r3, #1
 80025b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d109      	bne.n	80025d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	3b01      	subs	r3, #1
 80025cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d06e      	beq.n	80026b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	d069      	beq.n	80026ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025d8:	4b53      	ldr	r3, [pc, #332]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d105      	bne.n	80025f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025e4:	4b50      	ldr	r3, [pc, #320]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0ad      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025f4:	4b4c      	ldr	r3, [pc, #304]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80025fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002600:	f7ff f982 	bl	8001908 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002608:	f7ff f97e 	bl	8001908 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e09a      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800261a:	4b43      	ldr	r3, [pc, #268]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002626:	4b40      	ldr	r3, [pc, #256]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	4b40      	ldr	r3, [pc, #256]	@ (800272c <HAL_RCC_OscConfig+0x784>)
 800262c:	4013      	ands	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002636:	3a01      	subs	r2, #1
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	4311      	orrs	r1, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002640:	0212      	lsls	r2, r2, #8
 8002642:	4311      	orrs	r1, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002648:	0852      	lsrs	r2, r2, #1
 800264a:	3a01      	subs	r2, #1
 800264c:	0552      	lsls	r2, r2, #21
 800264e:	4311      	orrs	r1, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002654:	0852      	lsrs	r2, r2, #1
 8002656:	3a01      	subs	r2, #1
 8002658:	0652      	lsls	r2, r2, #25
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002660:	0912      	lsrs	r2, r2, #4
 8002662:	0452      	lsls	r2, r2, #17
 8002664:	430a      	orrs	r2, r1
 8002666:	4930      	ldr	r1, [pc, #192]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 8002668:	4313      	orrs	r3, r2
 800266a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800266c:	4b2e      	ldr	r3, [pc, #184]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a2d      	ldr	r2, [pc, #180]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 8002672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002676:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002678:	4b2b      	ldr	r3, [pc, #172]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4a2a      	ldr	r2, [pc, #168]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 800267e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002682:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002684:	f7ff f940 	bl	8001908 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268c:	f7ff f93c 	bl	8001908 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e058      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269e:	4b22      	ldr	r3, [pc, #136]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026aa:	e050      	b.n	800274e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e04f      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d148      	bne.n	800274e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a19      	ldr	r2, [pc, #100]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80026c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026c8:	4b17      	ldr	r3, [pc, #92]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a16      	ldr	r2, [pc, #88]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80026ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026d4:	f7ff f918 	bl	8001908 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7ff f914 	bl	8001908 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e030      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x734>
 80026fa:	e028      	b.n	800274e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d023      	beq.n	800274a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002702:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a08      	ldr	r2, [pc, #32]	@ (8002728 <HAL_RCC_OscConfig+0x780>)
 8002708:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800270c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7ff f8fb 	bl	8001908 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002714:	e00c      	b.n	8002730 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002716:	f7ff f8f7 	bl	8001908 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d905      	bls.n	8002730 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e013      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
 8002728:	40021000 	.word	0x40021000
 800272c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002730:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <HAL_RCC_OscConfig+0x7b0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1ec      	bne.n	8002716 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800273c:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_RCC_OscConfig+0x7b0>)
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	4905      	ldr	r1, [pc, #20]	@ (8002758 <HAL_RCC_OscConfig+0x7b0>)
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <HAL_RCC_OscConfig+0x7b4>)
 8002744:	4013      	ands	r3, r2
 8002746:	60cb      	str	r3, [r1, #12]
 8002748:	e001      	b.n	800274e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3720      	adds	r7, #32
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000
 800275c:	feeefffc 	.word	0xfeeefffc

08002760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0e7      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002774:	4b75      	ldr	r3, [pc, #468]	@ (800294c <HAL_RCC_ClockConfig+0x1ec>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d910      	bls.n	80027a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b72      	ldr	r3, [pc, #456]	@ (800294c <HAL_RCC_ClockConfig+0x1ec>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 0207 	bic.w	r2, r3, #7
 800278a:	4970      	ldr	r1, [pc, #448]	@ (800294c <HAL_RCC_ClockConfig+0x1ec>)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b6e      	ldr	r3, [pc, #440]	@ (800294c <HAL_RCC_ClockConfig+0x1ec>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0cf      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d010      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	4b66      	ldr	r3, [pc, #408]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027bc:	429a      	cmp	r2, r3
 80027be:	d908      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c0:	4b63      	ldr	r3, [pc, #396]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4960      	ldr	r1, [pc, #384]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d04c      	beq.n	8002878 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d121      	bne.n	8002836 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0a6      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d107      	bne.n	800280e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027fe:	4b54      	ldr	r3, [pc, #336]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d115      	bne.n	8002836 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e09a      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002816:	4b4e      	ldr	r3, [pc, #312]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e08e      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002826:	4b4a      	ldr	r3, [pc, #296]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e086      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002836:	4b46      	ldr	r3, [pc, #280]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f023 0203 	bic.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4943      	ldr	r1, [pc, #268]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 8002844:	4313      	orrs	r3, r2
 8002846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002848:	f7ff f85e 	bl	8001908 <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	e00a      	b.n	8002866 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002850:	f7ff f85a 	bl	8001908 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e06e      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	4b3a      	ldr	r3, [pc, #232]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 020c 	and.w	r2, r3, #12
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	429a      	cmp	r2, r3
 8002876:	d1eb      	bne.n	8002850 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d010      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	4b31      	ldr	r3, [pc, #196]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002890:	429a      	cmp	r2, r3
 8002892:	d208      	bcs.n	80028a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b2e      	ldr	r3, [pc, #184]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	492b      	ldr	r1, [pc, #172]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a6:	4b29      	ldr	r3, [pc, #164]	@ (800294c <HAL_RCC_ClockConfig+0x1ec>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d210      	bcs.n	80028d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b4:	4b25      	ldr	r3, [pc, #148]	@ (800294c <HAL_RCC_ClockConfig+0x1ec>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 0207 	bic.w	r2, r3, #7
 80028bc:	4923      	ldr	r1, [pc, #140]	@ (800294c <HAL_RCC_ClockConfig+0x1ec>)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c4:	4b21      	ldr	r3, [pc, #132]	@ (800294c <HAL_RCC_ClockConfig+0x1ec>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e036      	b.n	8002944 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	4918      	ldr	r1, [pc, #96]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d009      	beq.n	8002914 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002900:	4b13      	ldr	r3, [pc, #76]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4910      	ldr	r1, [pc, #64]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 8002910:	4313      	orrs	r3, r2
 8002912:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002914:	f000 f824 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <HAL_RCC_ClockConfig+0x1f0>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	490b      	ldr	r1, [pc, #44]	@ (8002954 <HAL_RCC_ClockConfig+0x1f4>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
 8002930:	4a09      	ldr	r2, [pc, #36]	@ (8002958 <HAL_RCC_ClockConfig+0x1f8>)
 8002932:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002934:	4b09      	ldr	r3, [pc, #36]	@ (800295c <HAL_RCC_ClockConfig+0x1fc>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fe1b 	bl	8001574 <HAL_InitTick>
 800293e:	4603      	mov	r3, r0
 8002940:	72fb      	strb	r3, [r7, #11]

  return status;
 8002942:	7afb      	ldrb	r3, [r7, #11]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40022000 	.word	0x40022000
 8002950:	40021000 	.word	0x40021000
 8002954:	08008338 	.word	0x08008338
 8002958:	20000050 	.word	0x20000050
 800295c:	20000054 	.word	0x20000054

08002960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	@ 0x24
 8002964:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800296e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002978:	4b3b      	ldr	r3, [pc, #236]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x108>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x34>
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b0c      	cmp	r3, #12
 800298c:	d121      	bne.n	80029d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d11e      	bne.n	80029d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002994:	4b34      	ldr	r3, [pc, #208]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029a0:	4b31      	ldr	r3, [pc, #196]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	e005      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029bc:	4a2b      	ldr	r2, [pc, #172]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x10c>)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10d      	bne.n	80029e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d102      	bne.n	80029de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029d8:	4b25      	ldr	r3, [pc, #148]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x110>)
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	e004      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029e4:	4b23      	ldr	r3, [pc, #140]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x114>)
 80029e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d134      	bne.n	8002a58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d003      	beq.n	8002a06 <HAL_RCC_GetSysClockFreq+0xa6>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d003      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0xac>
 8002a04:	e005      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a06:	4b1a      	ldr	r3, [pc, #104]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a08:	617b      	str	r3, [r7, #20]
      break;
 8002a0a:	e005      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a0c:	4b19      	ldr	r3, [pc, #100]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a0e:	617b      	str	r3, [r7, #20]
      break;
 8002a10:	e002      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	617b      	str	r3, [r7, #20]
      break;
 8002a16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a18:	4b13      	ldr	r3, [pc, #76]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	3301      	adds	r3, #1
 8002a24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a26:	4b10      	ldr	r3, [pc, #64]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	fb03 f202 	mul.w	r2, r3, r2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	0e5b      	lsrs	r3, r3, #25
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	3301      	adds	r3, #1
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a58:	69bb      	ldr	r3, [r7, #24]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	@ 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	08008350 	.word	0x08008350
 8002a70:	00f42400 	.word	0x00f42400
 8002a74:	007a1200 	.word	0x007a1200

08002a78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	@ (8002a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000050 	.word	0x20000050

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a94:	f7ff fff0 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4904      	ldr	r1, [pc, #16]	@ (8002ab8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	08008348 	.word	0x08008348

08002abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ac0:	f7ff ffda 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	0adb      	lsrs	r3, r3, #11
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	4904      	ldr	r1, [pc, #16]	@ (8002ae4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ad2:	5ccb      	ldrb	r3, [r1, r3]
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	08008348 	.word	0x08008348

08002ae8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	220f      	movs	r2, #15
 8002af6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002af8:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <HAL_RCC_GetClockConfig+0x5c>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0203 	and.w	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b04:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <HAL_RCC_GetClockConfig+0x5c>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b10:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <HAL_RCC_GetClockConfig+0x5c>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b1c:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <HAL_RCC_GetClockConfig+0x5c>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	08db      	lsrs	r3, r3, #3
 8002b22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b2a:	4b07      	ldr	r3, [pc, #28]	@ (8002b48 <HAL_RCC_GetClockConfig+0x60>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0207 	and.w	r2, r3, #7
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	601a      	str	r2, [r3, #0]
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40022000 	.word	0x40022000

08002b4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b58:	4b2a      	ldr	r3, [pc, #168]	@ (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b64:	f7ff f9bc 	bl	8001ee0 <HAL_PWREx_GetVoltageRange>
 8002b68:	6178      	str	r0, [r7, #20]
 8002b6a:	e014      	b.n	8002b96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b6c:	4b25      	ldr	r3, [pc, #148]	@ (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b70:	4a24      	ldr	r2, [pc, #144]	@ (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b76:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b78:	4b22      	ldr	r3, [pc, #136]	@ (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b84:	f7ff f9ac 	bl	8001ee0 <HAL_PWREx_GetVoltageRange>
 8002b88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b94:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b9c:	d10b      	bne.n	8002bb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b80      	cmp	r3, #128	@ 0x80
 8002ba2:	d919      	bls.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ba8:	d902      	bls.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002baa:	2302      	movs	r3, #2
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	e013      	b.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	e010      	b.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b80      	cmp	r3, #128	@ 0x80
 8002bba:	d902      	bls.n	8002bc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	e00a      	b.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b80      	cmp	r3, #128	@ 0x80
 8002bc6:	d102      	bne.n	8002bce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bc8:	2302      	movs	r3, #2
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	e004      	b.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b70      	cmp	r3, #112	@ 0x70
 8002bd2:	d101      	bne.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 0207 	bic.w	r2, r3, #7
 8002be0:	4909      	ldr	r1, [pc, #36]	@ (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002be8:	4b07      	ldr	r3, [pc, #28]	@ (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d001      	beq.n	8002bfa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40022000 	.word	0x40022000

08002c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c14:	2300      	movs	r3, #0
 8002c16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c18:	2300      	movs	r3, #0
 8002c1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d041      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c30:	d02a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c32:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c36:	d824      	bhi.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c3c:	d008      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c42:	d81e      	bhi.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c4c:	d010      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c4e:	e018      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c50:	4b86      	ldr	r3, [pc, #536]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4a85      	ldr	r2, [pc, #532]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c5c:	e015      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3304      	adds	r3, #4
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fabb 	bl	80031e0 <RCCEx_PLLSAI1_Config>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c6e:	e00c      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3320      	adds	r3, #32
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fba6 	bl	80033c8 <RCCEx_PLLSAI2_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c80:	e003      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	74fb      	strb	r3, [r7, #19]
      break;
 8002c86:	e000      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c8a:	7cfb      	ldrb	r3, [r7, #19]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c90:	4b76      	ldr	r3, [pc, #472]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c9e:	4973      	ldr	r1, [pc, #460]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ca6:	e001      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca8:	7cfb      	ldrb	r3, [r7, #19]
 8002caa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d041      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cc0:	d02a      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002cc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cc6:	d824      	bhi.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ccc:	d008      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cd2:	d81e      	bhi.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cdc:	d010      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cde:	e018      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ce0:	4b62      	ldr	r3, [pc, #392]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a61      	ldr	r2, [pc, #388]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cec:	e015      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 fa73 	bl	80031e0 <RCCEx_PLLSAI1_Config>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cfe:	e00c      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3320      	adds	r3, #32
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fb5e 	bl	80033c8 <RCCEx_PLLSAI2_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d10:	e003      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	74fb      	strb	r3, [r7, #19]
      break;
 8002d16:	e000      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d1a:	7cfb      	ldrb	r3, [r7, #19]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10b      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d20:	4b52      	ldr	r3, [pc, #328]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d2e:	494f      	ldr	r1, [pc, #316]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d36:	e001      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80a0 	beq.w	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d4e:	4b47      	ldr	r3, [pc, #284]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00d      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d64:	4b41      	ldr	r3, [pc, #260]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	4a40      	ldr	r2, [pc, #256]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d70:	4b3e      	ldr	r3, [pc, #248]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d80:	4b3b      	ldr	r3, [pc, #236]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a3a      	ldr	r2, [pc, #232]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d8c:	f7fe fdbc 	bl	8001908 <HAL_GetTick>
 8002d90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d92:	e009      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d94:	f7fe fdb8 	bl	8001908 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d902      	bls.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	74fb      	strb	r3, [r7, #19]
        break;
 8002da6:	e005      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002da8:	4b31      	ldr	r3, [pc, #196]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ef      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002db4:	7cfb      	ldrb	r3, [r7, #19]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d15c      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dba:	4b2c      	ldr	r3, [pc, #176]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01f      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d019      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dd8:	4b24      	ldr	r3, [pc, #144]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002de2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002de4:	4b21      	ldr	r3, [pc, #132]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dea:	4a20      	ldr	r2, [pc, #128]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002df4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e04:	4a19      	ldr	r2, [pc, #100]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7fe fd77 	bl	8001908 <HAL_GetTick>
 8002e1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1c:	e00b      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe fd73 	bl	8001908 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d902      	bls.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	74fb      	strb	r3, [r7, #19]
            break;
 8002e34:	e006      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e36:	4b0d      	ldr	r3, [pc, #52]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ec      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e4a:	4b08      	ldr	r3, [pc, #32]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e5a:	4904      	ldr	r1, [pc, #16]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e62:	e009      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	74bb      	strb	r3, [r7, #18]
 8002e68:	e006      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e78:	7c7b      	ldrb	r3, [r7, #17]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7e:	4b9e      	ldr	r3, [pc, #632]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e82:	4a9d      	ldr	r2, [pc, #628]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e88:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e96:	4b98      	ldr	r3, [pc, #608]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9c:	f023 0203 	bic.w	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea4:	4994      	ldr	r1, [pc, #592]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eb8:	4b8f      	ldr	r3, [pc, #572]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebe:	f023 020c 	bic.w	r2, r3, #12
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec6:	498c      	ldr	r1, [pc, #560]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eda:	4b87      	ldr	r3, [pc, #540]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	4983      	ldr	r1, [pc, #524]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002efc:	4b7e      	ldr	r3, [pc, #504]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	497b      	ldr	r1, [pc, #492]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f1e:	4b76      	ldr	r3, [pc, #472]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f2c:	4972      	ldr	r1, [pc, #456]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f40:	4b6d      	ldr	r3, [pc, #436]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4e:	496a      	ldr	r1, [pc, #424]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f62:	4b65      	ldr	r3, [pc, #404]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f70:	4961      	ldr	r1, [pc, #388]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f84:	4b5c      	ldr	r3, [pc, #368]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f92:	4959      	ldr	r1, [pc, #356]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fa6:	4b54      	ldr	r3, [pc, #336]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb4:	4950      	ldr	r1, [pc, #320]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fc8:	4b4b      	ldr	r3, [pc, #300]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd6:	4948      	ldr	r1, [pc, #288]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fea:	4b43      	ldr	r3, [pc, #268]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	493f      	ldr	r1, [pc, #252]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d028      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800300c:	4b3a      	ldr	r3, [pc, #232]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003012:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800301a:	4937      	ldr	r1, [pc, #220]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003026:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800302a:	d106      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800302c:	4b32      	ldr	r3, [pc, #200]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4a31      	ldr	r2, [pc, #196]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003036:	60d3      	str	r3, [r2, #12]
 8003038:	e011      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800303e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003042:	d10c      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	2101      	movs	r1, #1
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f8c8 	bl	80031e0 <RCCEx_PLLSAI1_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003054:	7cfb      	ldrb	r3, [r7, #19]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d028      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800306a:	4b23      	ldr	r3, [pc, #140]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003070:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003078:	491f      	ldr	r1, [pc, #124]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003084:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003088:	d106      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800308a:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	4a1a      	ldr	r2, [pc, #104]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003090:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003094:	60d3      	str	r3, [r2, #12]
 8003096:	e011      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030a0:	d10c      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2101      	movs	r1, #1
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f899 	bl	80031e0 <RCCEx_PLLSAI1_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030b2:	7cfb      	ldrb	r3, [r7, #19]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030b8:	7cfb      	ldrb	r3, [r7, #19]
 80030ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d02b      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030c8:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d6:	4908      	ldr	r1, [pc, #32]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030e6:	d109      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030e8:	4b03      	ldr	r3, [pc, #12]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4a02      	ldr	r2, [pc, #8]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030f2:	60d3      	str	r3, [r2, #12]
 80030f4:	e014      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003100:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003104:	d10c      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3304      	adds	r3, #4
 800310a:	2101      	movs	r1, #1
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f867 	bl	80031e0 <RCCEx_PLLSAI1_Config>
 8003112:	4603      	mov	r3, r0
 8003114:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003116:	7cfb      	ldrb	r3, [r7, #19]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800311c:	7cfb      	ldrb	r3, [r7, #19]
 800311e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d02f      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800312c:	4b2b      	ldr	r3, [pc, #172]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003132:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800313a:	4928      	ldr	r1, [pc, #160]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003146:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800314a:	d10d      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3304      	adds	r3, #4
 8003150:	2102      	movs	r1, #2
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f844 	bl	80031e0 <RCCEx_PLLSAI1_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d014      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	74bb      	strb	r3, [r7, #18]
 8003166:	e011      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800316c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003170:	d10c      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3320      	adds	r3, #32
 8003176:	2102      	movs	r1, #2
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f925 	bl	80033c8 <RCCEx_PLLSAI2_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003198:	4b10      	ldr	r3, [pc, #64]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031a6:	490d      	ldr	r1, [pc, #52]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031ba:	4b08      	ldr	r3, [pc, #32]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031ca:	4904      	ldr	r1, [pc, #16]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000

080031e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031ee:	4b75      	ldr	r3, [pc, #468]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d018      	beq.n	800322c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031fa:	4b72      	ldr	r3, [pc, #456]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0203 	and.w	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d10d      	bne.n	8003226 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
       ||
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003212:	4b6c      	ldr	r3, [pc, #432]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
       ||
 8003222:	429a      	cmp	r2, r3
 8003224:	d047      	beq.n	80032b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	e044      	b.n	80032b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d018      	beq.n	8003266 <RCCEx_PLLSAI1_Config+0x86>
 8003234:	2b03      	cmp	r3, #3
 8003236:	d825      	bhi.n	8003284 <RCCEx_PLLSAI1_Config+0xa4>
 8003238:	2b01      	cmp	r3, #1
 800323a:	d002      	beq.n	8003242 <RCCEx_PLLSAI1_Config+0x62>
 800323c:	2b02      	cmp	r3, #2
 800323e:	d009      	beq.n	8003254 <RCCEx_PLLSAI1_Config+0x74>
 8003240:	e020      	b.n	8003284 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003242:	4b60      	ldr	r3, [pc, #384]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d11d      	bne.n	800328a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003252:	e01a      	b.n	800328a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003254:	4b5b      	ldr	r3, [pc, #364]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800325c:	2b00      	cmp	r3, #0
 800325e:	d116      	bne.n	800328e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003264:	e013      	b.n	800328e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003266:	4b57      	ldr	r3, [pc, #348]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10f      	bne.n	8003292 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003272:	4b54      	ldr	r3, [pc, #336]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003282:	e006      	b.n	8003292 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
      break;
 8003288:	e004      	b.n	8003294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800328a:	bf00      	nop
 800328c:	e002      	b.n	8003294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003292:	bf00      	nop
    }

    if(status == HAL_OK)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10d      	bne.n	80032b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800329a:	4b4a      	ldr	r3, [pc, #296]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6819      	ldr	r1, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	430b      	orrs	r3, r1
 80032b0:	4944      	ldr	r1, [pc, #272]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d17d      	bne.n	80033b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032bc:	4b41      	ldr	r3, [pc, #260]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a40      	ldr	r2, [pc, #256]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80032c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c8:	f7fe fb1e 	bl	8001908 <HAL_GetTick>
 80032cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032ce:	e009      	b.n	80032e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032d0:	f7fe fb1a 	bl	8001908 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d902      	bls.n	80032e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	73fb      	strb	r3, [r7, #15]
        break;
 80032e2:	e005      	b.n	80032f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032e4:	4b37      	ldr	r3, [pc, #220]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ef      	bne.n	80032d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d160      	bne.n	80033b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d111      	bne.n	8003320 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032fc:	4b31      	ldr	r3, [pc, #196]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6892      	ldr	r2, [r2, #8]
 800330c:	0211      	lsls	r1, r2, #8
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68d2      	ldr	r2, [r2, #12]
 8003312:	0912      	lsrs	r2, r2, #4
 8003314:	0452      	lsls	r2, r2, #17
 8003316:	430a      	orrs	r2, r1
 8003318:	492a      	ldr	r1, [pc, #168]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800331a:	4313      	orrs	r3, r2
 800331c:	610b      	str	r3, [r1, #16]
 800331e:	e027      	b.n	8003370 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d112      	bne.n	800334c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003326:	4b27      	ldr	r3, [pc, #156]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800332e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6892      	ldr	r2, [r2, #8]
 8003336:	0211      	lsls	r1, r2, #8
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6912      	ldr	r2, [r2, #16]
 800333c:	0852      	lsrs	r2, r2, #1
 800333e:	3a01      	subs	r2, #1
 8003340:	0552      	lsls	r2, r2, #21
 8003342:	430a      	orrs	r2, r1
 8003344:	491f      	ldr	r1, [pc, #124]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003346:	4313      	orrs	r3, r2
 8003348:	610b      	str	r3, [r1, #16]
 800334a:	e011      	b.n	8003370 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800334c:	4b1d      	ldr	r3, [pc, #116]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003354:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6892      	ldr	r2, [r2, #8]
 800335c:	0211      	lsls	r1, r2, #8
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6952      	ldr	r2, [r2, #20]
 8003362:	0852      	lsrs	r2, r2, #1
 8003364:	3a01      	subs	r2, #1
 8003366:	0652      	lsls	r2, r2, #25
 8003368:	430a      	orrs	r2, r1
 800336a:	4916      	ldr	r1, [pc, #88]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336c:	4313      	orrs	r3, r2
 800336e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003370:	4b14      	ldr	r3, [pc, #80]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a13      	ldr	r2, [pc, #76]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003376:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800337a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337c:	f7fe fac4 	bl	8001908 <HAL_GetTick>
 8003380:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003382:	e009      	b.n	8003398 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003384:	f7fe fac0 	bl	8001908 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d902      	bls.n	8003398 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	73fb      	strb	r3, [r7, #15]
          break;
 8003396:	e005      	b.n	80033a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003398:	4b0a      	ldr	r3, [pc, #40]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ef      	beq.n	8003384 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033aa:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	4904      	ldr	r1, [pc, #16]	@ (80033c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000

080033c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d018      	beq.n	8003414 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033e2:	4b67      	ldr	r3, [pc, #412]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f003 0203 	and.w	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d10d      	bne.n	800340e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
       ||
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80033fa:	4b61      	ldr	r3, [pc, #388]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
       ||
 800340a:	429a      	cmp	r2, r3
 800340c:	d047      	beq.n	800349e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
 8003412:	e044      	b.n	800349e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d018      	beq.n	800344e <RCCEx_PLLSAI2_Config+0x86>
 800341c:	2b03      	cmp	r3, #3
 800341e:	d825      	bhi.n	800346c <RCCEx_PLLSAI2_Config+0xa4>
 8003420:	2b01      	cmp	r3, #1
 8003422:	d002      	beq.n	800342a <RCCEx_PLLSAI2_Config+0x62>
 8003424:	2b02      	cmp	r3, #2
 8003426:	d009      	beq.n	800343c <RCCEx_PLLSAI2_Config+0x74>
 8003428:	e020      	b.n	800346c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800342a:	4b55      	ldr	r3, [pc, #340]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d11d      	bne.n	8003472 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800343a:	e01a      	b.n	8003472 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800343c:	4b50      	ldr	r3, [pc, #320]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003444:	2b00      	cmp	r3, #0
 8003446:	d116      	bne.n	8003476 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800344c:	e013      	b.n	8003476 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800344e:	4b4c      	ldr	r3, [pc, #304]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10f      	bne.n	800347a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800345a:	4b49      	ldr	r3, [pc, #292]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800346a:	e006      	b.n	800347a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      break;
 8003470:	e004      	b.n	800347c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003472:	bf00      	nop
 8003474:	e002      	b.n	800347c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003476:	bf00      	nop
 8003478:	e000      	b.n	800347c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800347a:	bf00      	nop
    }

    if(status == HAL_OK)
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10d      	bne.n	800349e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003482:	4b3f      	ldr	r3, [pc, #252]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6819      	ldr	r1, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	3b01      	subs	r3, #1
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	430b      	orrs	r3, r1
 8003498:	4939      	ldr	r1, [pc, #228]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800349a:	4313      	orrs	r3, r2
 800349c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d167      	bne.n	8003574 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034a4:	4b36      	ldr	r3, [pc, #216]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a35      	ldr	r2, [pc, #212]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b0:	f7fe fa2a 	bl	8001908 <HAL_GetTick>
 80034b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034b6:	e009      	b.n	80034cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034b8:	f7fe fa26 	bl	8001908 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d902      	bls.n	80034cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	73fb      	strb	r3, [r7, #15]
        break;
 80034ca:	e005      	b.n	80034d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ef      	bne.n	80034b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d14a      	bne.n	8003574 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d111      	bne.n	8003508 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034e4:	4b26      	ldr	r3, [pc, #152]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80034ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6892      	ldr	r2, [r2, #8]
 80034f4:	0211      	lsls	r1, r2, #8
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	68d2      	ldr	r2, [r2, #12]
 80034fa:	0912      	lsrs	r2, r2, #4
 80034fc:	0452      	lsls	r2, r2, #17
 80034fe:	430a      	orrs	r2, r1
 8003500:	491f      	ldr	r1, [pc, #124]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003502:	4313      	orrs	r3, r2
 8003504:	614b      	str	r3, [r1, #20]
 8003506:	e011      	b.n	800352c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003508:	4b1d      	ldr	r3, [pc, #116]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003510:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6892      	ldr	r2, [r2, #8]
 8003518:	0211      	lsls	r1, r2, #8
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6912      	ldr	r2, [r2, #16]
 800351e:	0852      	lsrs	r2, r2, #1
 8003520:	3a01      	subs	r2, #1
 8003522:	0652      	lsls	r2, r2, #25
 8003524:	430a      	orrs	r2, r1
 8003526:	4916      	ldr	r1, [pc, #88]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003528:	4313      	orrs	r3, r2
 800352a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800352c:	4b14      	ldr	r3, [pc, #80]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a13      	ldr	r2, [pc, #76]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003536:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fe f9e6 	bl	8001908 <HAL_GetTick>
 800353c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800353e:	e009      	b.n	8003554 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003540:	f7fe f9e2 	bl	8001908 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d902      	bls.n	8003554 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	73fb      	strb	r3, [r7, #15]
          break;
 8003552:	e005      	b.n	8003560 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003554:	4b0a      	ldr	r3, [pc, #40]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ef      	beq.n	8003540 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003566:	4b06      	ldr	r3, [pc, #24]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	4904      	ldr	r1, [pc, #16]	@ (8003580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003570:	4313      	orrs	r3, r2
 8003572:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003574:	7bfb      	ldrb	r3, [r7, #15]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000

08003584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e049      	b.n	800362a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f841 	bl	8003632 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3304      	adds	r3, #4
 80035c0:	4619      	mov	r1, r3
 80035c2:	4610      	mov	r0, r2
 80035c4:	f000 fc52 	bl	8003e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d001      	beq.n	8003660 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e04f      	b.n	8003700 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a23      	ldr	r2, [pc, #140]	@ (800370c <HAL_TIM_Base_Start_IT+0xc4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d01d      	beq.n	80036be <HAL_TIM_Base_Start_IT+0x76>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800368a:	d018      	beq.n	80036be <HAL_TIM_Base_Start_IT+0x76>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1f      	ldr	r2, [pc, #124]	@ (8003710 <HAL_TIM_Base_Start_IT+0xc8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_TIM_Base_Start_IT+0x76>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1e      	ldr	r2, [pc, #120]	@ (8003714 <HAL_TIM_Base_Start_IT+0xcc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00e      	beq.n	80036be <HAL_TIM_Base_Start_IT+0x76>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003718 <HAL_TIM_Base_Start_IT+0xd0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d009      	beq.n	80036be <HAL_TIM_Base_Start_IT+0x76>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1b      	ldr	r2, [pc, #108]	@ (800371c <HAL_TIM_Base_Start_IT+0xd4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_TIM_Base_Start_IT+0x76>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a19      	ldr	r2, [pc, #100]	@ (8003720 <HAL_TIM_Base_Start_IT+0xd8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d115      	bne.n	80036ea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	4b17      	ldr	r3, [pc, #92]	@ (8003724 <HAL_TIM_Base_Start_IT+0xdc>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b06      	cmp	r3, #6
 80036ce:	d015      	beq.n	80036fc <HAL_TIM_Base_Start_IT+0xb4>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d6:	d011      	beq.n	80036fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e8:	e008      	b.n	80036fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	e000      	b.n	80036fe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800
 8003718:	40000c00 	.word	0x40000c00
 800371c:	40013400 	.word	0x40013400
 8003720:	40014000 	.word	0x40014000
 8003724:	00010007 	.word	0x00010007

08003728 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e049      	b.n	80037ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fd fe3e 	bl	80013d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f000 fb80 	bl	8003e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d109      	bne.n	80037fc <HAL_TIM_PWM_Start+0x24>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e03c      	b.n	8003876 <HAL_TIM_PWM_Start+0x9e>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d109      	bne.n	8003816 <HAL_TIM_PWM_Start+0x3e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	bf14      	ite	ne
 800380e:	2301      	movne	r3, #1
 8003810:	2300      	moveq	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	e02f      	b.n	8003876 <HAL_TIM_PWM_Start+0x9e>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d109      	bne.n	8003830 <HAL_TIM_PWM_Start+0x58>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	bf14      	ite	ne
 8003828:	2301      	movne	r3, #1
 800382a:	2300      	moveq	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e022      	b.n	8003876 <HAL_TIM_PWM_Start+0x9e>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b0c      	cmp	r3, #12
 8003834:	d109      	bne.n	800384a <HAL_TIM_PWM_Start+0x72>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b01      	cmp	r3, #1
 8003840:	bf14      	ite	ne
 8003842:	2301      	movne	r3, #1
 8003844:	2300      	moveq	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	e015      	b.n	8003876 <HAL_TIM_PWM_Start+0x9e>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b10      	cmp	r3, #16
 800384e:	d109      	bne.n	8003864 <HAL_TIM_PWM_Start+0x8c>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	bf14      	ite	ne
 800385c:	2301      	movne	r3, #1
 800385e:	2300      	moveq	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e008      	b.n	8003876 <HAL_TIM_PWM_Start+0x9e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e09c      	b.n	80039b8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d104      	bne.n	800388e <HAL_TIM_PWM_Start+0xb6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800388c:	e023      	b.n	80038d6 <HAL_TIM_PWM_Start+0xfe>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b04      	cmp	r3, #4
 8003892:	d104      	bne.n	800389e <HAL_TIM_PWM_Start+0xc6>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800389c:	e01b      	b.n	80038d6 <HAL_TIM_PWM_Start+0xfe>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d104      	bne.n	80038ae <HAL_TIM_PWM_Start+0xd6>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038ac:	e013      	b.n	80038d6 <HAL_TIM_PWM_Start+0xfe>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b0c      	cmp	r3, #12
 80038b2:	d104      	bne.n	80038be <HAL_TIM_PWM_Start+0xe6>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038bc:	e00b      	b.n	80038d6 <HAL_TIM_PWM_Start+0xfe>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d104      	bne.n	80038ce <HAL_TIM_PWM_Start+0xf6>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038cc:	e003      	b.n	80038d6 <HAL_TIM_PWM_Start+0xfe>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2201      	movs	r2, #1
 80038dc:	6839      	ldr	r1, [r7, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fe40 	bl	8004564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a35      	ldr	r2, [pc, #212]	@ (80039c0 <HAL_TIM_PWM_Start+0x1e8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d013      	beq.n	8003916 <HAL_TIM_PWM_Start+0x13e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a34      	ldr	r2, [pc, #208]	@ (80039c4 <HAL_TIM_PWM_Start+0x1ec>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00e      	beq.n	8003916 <HAL_TIM_PWM_Start+0x13e>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a32      	ldr	r2, [pc, #200]	@ (80039c8 <HAL_TIM_PWM_Start+0x1f0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d009      	beq.n	8003916 <HAL_TIM_PWM_Start+0x13e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a31      	ldr	r2, [pc, #196]	@ (80039cc <HAL_TIM_PWM_Start+0x1f4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d004      	beq.n	8003916 <HAL_TIM_PWM_Start+0x13e>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a2f      	ldr	r2, [pc, #188]	@ (80039d0 <HAL_TIM_PWM_Start+0x1f8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_TIM_PWM_Start+0x142>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_TIM_PWM_Start+0x144>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800392e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a22      	ldr	r2, [pc, #136]	@ (80039c0 <HAL_TIM_PWM_Start+0x1e8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d01d      	beq.n	8003976 <HAL_TIM_PWM_Start+0x19e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003942:	d018      	beq.n	8003976 <HAL_TIM_PWM_Start+0x19e>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a22      	ldr	r2, [pc, #136]	@ (80039d4 <HAL_TIM_PWM_Start+0x1fc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d013      	beq.n	8003976 <HAL_TIM_PWM_Start+0x19e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a21      	ldr	r2, [pc, #132]	@ (80039d8 <HAL_TIM_PWM_Start+0x200>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00e      	beq.n	8003976 <HAL_TIM_PWM_Start+0x19e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1f      	ldr	r2, [pc, #124]	@ (80039dc <HAL_TIM_PWM_Start+0x204>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d009      	beq.n	8003976 <HAL_TIM_PWM_Start+0x19e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a17      	ldr	r2, [pc, #92]	@ (80039c4 <HAL_TIM_PWM_Start+0x1ec>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d004      	beq.n	8003976 <HAL_TIM_PWM_Start+0x19e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a15      	ldr	r2, [pc, #84]	@ (80039c8 <HAL_TIM_PWM_Start+0x1f0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d115      	bne.n	80039a2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	4b18      	ldr	r3, [pc, #96]	@ (80039e0 <HAL_TIM_PWM_Start+0x208>)
 800397e:	4013      	ands	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b06      	cmp	r3, #6
 8003986:	d015      	beq.n	80039b4 <HAL_TIM_PWM_Start+0x1dc>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800398e:	d011      	beq.n	80039b4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a0:	e008      	b.n	80039b4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	e000      	b.n	80039b6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40012c00 	.word	0x40012c00
 80039c4:	40013400 	.word	0x40013400
 80039c8:	40014000 	.word	0x40014000
 80039cc:	40014400 	.word	0x40014400
 80039d0:	40014800 	.word	0x40014800
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800
 80039dc:	40000c00 	.word	0x40000c00
 80039e0:	00010007 	.word	0x00010007

080039e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d020      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01b      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0202 	mvn.w	r2, #2
 8003a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f9fe 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003a34:	e005      	b.n	8003a42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f9f0 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fa01 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d020      	beq.n	8003a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01b      	beq.n	8003a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0204 	mvn.w	r2, #4
 8003a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f9d8 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003a80:	e005      	b.n	8003a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f9ca 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f9db 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d020      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01b      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0208 	mvn.w	r2, #8
 8003ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f9b2 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003acc:	e005      	b.n	8003ada <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f9a4 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f9b5 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d020      	beq.n	8003b2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01b      	beq.n	8003b2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0210 	mvn.w	r2, #16
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2208      	movs	r2, #8
 8003b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f98c 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f97e 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f98f 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00c      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d007      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0201 	mvn.w	r2, #1
 8003b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fd fc00 	bl	8001350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d104      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00c      	beq.n	8003b7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fdab 	bl	80046d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00c      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 fda3 	bl	80046e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00c      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f949 	bl	8003e58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00c      	beq.n	8003bea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f06f 0220 	mvn.w	r2, #32
 8003be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 fd6b 	bl	80046c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e0ff      	b.n	8003e12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b14      	cmp	r3, #20
 8003c1e:	f200 80f0 	bhi.w	8003e02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c22:	a201      	add	r2, pc, #4	@ (adr r2, 8003c28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003c7d 	.word	0x08003c7d
 8003c2c:	08003e03 	.word	0x08003e03
 8003c30:	08003e03 	.word	0x08003e03
 8003c34:	08003e03 	.word	0x08003e03
 8003c38:	08003cbd 	.word	0x08003cbd
 8003c3c:	08003e03 	.word	0x08003e03
 8003c40:	08003e03 	.word	0x08003e03
 8003c44:	08003e03 	.word	0x08003e03
 8003c48:	08003cff 	.word	0x08003cff
 8003c4c:	08003e03 	.word	0x08003e03
 8003c50:	08003e03 	.word	0x08003e03
 8003c54:	08003e03 	.word	0x08003e03
 8003c58:	08003d3f 	.word	0x08003d3f
 8003c5c:	08003e03 	.word	0x08003e03
 8003c60:	08003e03 	.word	0x08003e03
 8003c64:	08003e03 	.word	0x08003e03
 8003c68:	08003d81 	.word	0x08003d81
 8003c6c:	08003e03 	.word	0x08003e03
 8003c70:	08003e03 	.word	0x08003e03
 8003c74:	08003e03 	.word	0x08003e03
 8003c78:	08003dc1 	.word	0x08003dc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68b9      	ldr	r1, [r7, #8]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 f998 	bl	8003fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0208 	orr.w	r2, r2, #8
 8003c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0204 	bic.w	r2, r2, #4
 8003ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6999      	ldr	r1, [r3, #24]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	619a      	str	r2, [r3, #24]
      break;
 8003cba:	e0a5      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fa08 	bl	80040d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699a      	ldr	r2, [r3, #24]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6999      	ldr	r1, [r3, #24]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	021a      	lsls	r2, r3, #8
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	619a      	str	r2, [r3, #24]
      break;
 8003cfc:	e084      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fa71 	bl	80041ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0208 	orr.w	r2, r2, #8
 8003d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0204 	bic.w	r2, r2, #4
 8003d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69d9      	ldr	r1, [r3, #28]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	61da      	str	r2, [r3, #28]
      break;
 8003d3c:	e064      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fad9 	bl	80042fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69d9      	ldr	r1, [r3, #28]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	021a      	lsls	r2, r3, #8
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	61da      	str	r2, [r3, #28]
      break;
 8003d7e:	e043      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68b9      	ldr	r1, [r7, #8]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fb22 	bl	80043d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0208 	orr.w	r2, r2, #8
 8003d9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0204 	bic.w	r2, r2, #4
 8003daa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003dbe:	e023      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fb66 	bl	8004498 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	021a      	lsls	r2, r3, #8
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003e00:	e002      	b.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	75fb      	strb	r3, [r7, #23]
      break;
 8003e06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop

08003e1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a46      	ldr	r2, [pc, #280]	@ (8003f98 <TIM_Base_SetConfig+0x12c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e8a:	d00f      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a43      	ldr	r2, [pc, #268]	@ (8003f9c <TIM_Base_SetConfig+0x130>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00b      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a42      	ldr	r2, [pc, #264]	@ (8003fa0 <TIM_Base_SetConfig+0x134>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a41      	ldr	r2, [pc, #260]	@ (8003fa4 <TIM_Base_SetConfig+0x138>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a40      	ldr	r2, [pc, #256]	@ (8003fa8 <TIM_Base_SetConfig+0x13c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d108      	bne.n	8003ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a35      	ldr	r2, [pc, #212]	@ (8003f98 <TIM_Base_SetConfig+0x12c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d01f      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ecc:	d01b      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a32      	ldr	r2, [pc, #200]	@ (8003f9c <TIM_Base_SetConfig+0x130>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d017      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a31      	ldr	r2, [pc, #196]	@ (8003fa0 <TIM_Base_SetConfig+0x134>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a30      	ldr	r2, [pc, #192]	@ (8003fa4 <TIM_Base_SetConfig+0x138>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00f      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8003fa8 <TIM_Base_SetConfig+0x13c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00b      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8003fac <TIM_Base_SetConfig+0x140>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb0 <TIM_Base_SetConfig+0x144>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d003      	beq.n	8003f06 <TIM_Base_SetConfig+0x9a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2c      	ldr	r2, [pc, #176]	@ (8003fb4 <TIM_Base_SetConfig+0x148>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d108      	bne.n	8003f18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a16      	ldr	r2, [pc, #88]	@ (8003f98 <TIM_Base_SetConfig+0x12c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00f      	beq.n	8003f64 <TIM_Base_SetConfig+0xf8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a18      	ldr	r2, [pc, #96]	@ (8003fa8 <TIM_Base_SetConfig+0x13c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00b      	beq.n	8003f64 <TIM_Base_SetConfig+0xf8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a17      	ldr	r2, [pc, #92]	@ (8003fac <TIM_Base_SetConfig+0x140>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d007      	beq.n	8003f64 <TIM_Base_SetConfig+0xf8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a16      	ldr	r2, [pc, #88]	@ (8003fb0 <TIM_Base_SetConfig+0x144>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_Base_SetConfig+0xf8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a15      	ldr	r2, [pc, #84]	@ (8003fb4 <TIM_Base_SetConfig+0x148>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d103      	bne.n	8003f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d105      	bne.n	8003f8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f023 0201 	bic.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	611a      	str	r2, [r3, #16]
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40012c00 	.word	0x40012c00
 8003f9c:	40000400 	.word	0x40000400
 8003fa0:	40000800 	.word	0x40000800
 8003fa4:	40000c00 	.word	0x40000c00
 8003fa8:	40013400 	.word	0x40013400
 8003fac:	40014000 	.word	0x40014000
 8003fb0:	40014400 	.word	0x40014400
 8003fb4:	40014800 	.word	0x40014800

08003fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f023 0201 	bic.w	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f023 0302 	bic.w	r3, r3, #2
 8004004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a2c      	ldr	r2, [pc, #176]	@ (80040c4 <TIM_OC1_SetConfig+0x10c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00f      	beq.n	8004038 <TIM_OC1_SetConfig+0x80>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a2b      	ldr	r2, [pc, #172]	@ (80040c8 <TIM_OC1_SetConfig+0x110>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00b      	beq.n	8004038 <TIM_OC1_SetConfig+0x80>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a2a      	ldr	r2, [pc, #168]	@ (80040cc <TIM_OC1_SetConfig+0x114>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <TIM_OC1_SetConfig+0x80>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a29      	ldr	r2, [pc, #164]	@ (80040d0 <TIM_OC1_SetConfig+0x118>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_OC1_SetConfig+0x80>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a28      	ldr	r2, [pc, #160]	@ (80040d4 <TIM_OC1_SetConfig+0x11c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d10c      	bne.n	8004052 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f023 0308 	bic.w	r3, r3, #8
 800403e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 0304 	bic.w	r3, r3, #4
 8004050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a1b      	ldr	r2, [pc, #108]	@ (80040c4 <TIM_OC1_SetConfig+0x10c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00f      	beq.n	800407a <TIM_OC1_SetConfig+0xc2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a1a      	ldr	r2, [pc, #104]	@ (80040c8 <TIM_OC1_SetConfig+0x110>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00b      	beq.n	800407a <TIM_OC1_SetConfig+0xc2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a19      	ldr	r2, [pc, #100]	@ (80040cc <TIM_OC1_SetConfig+0x114>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d007      	beq.n	800407a <TIM_OC1_SetConfig+0xc2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a18      	ldr	r2, [pc, #96]	@ (80040d0 <TIM_OC1_SetConfig+0x118>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_OC1_SetConfig+0xc2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a17      	ldr	r2, [pc, #92]	@ (80040d4 <TIM_OC1_SetConfig+0x11c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d111      	bne.n	800409e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	621a      	str	r2, [r3, #32]
}
 80040b8:	bf00      	nop
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	40013400 	.word	0x40013400
 80040cc:	40014000 	.word	0x40014000
 80040d0:	40014400 	.word	0x40014400
 80040d4:	40014800 	.word	0x40014800

080040d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f023 0210 	bic.w	r2, r3, #16
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800410a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f023 0320 	bic.w	r3, r3, #32
 8004126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a28      	ldr	r2, [pc, #160]	@ (80041d8 <TIM_OC2_SetConfig+0x100>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d003      	beq.n	8004144 <TIM_OC2_SetConfig+0x6c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a27      	ldr	r2, [pc, #156]	@ (80041dc <TIM_OC2_SetConfig+0x104>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10d      	bne.n	8004160 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800414a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800415e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a1d      	ldr	r2, [pc, #116]	@ (80041d8 <TIM_OC2_SetConfig+0x100>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00f      	beq.n	8004188 <TIM_OC2_SetConfig+0xb0>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a1c      	ldr	r2, [pc, #112]	@ (80041dc <TIM_OC2_SetConfig+0x104>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00b      	beq.n	8004188 <TIM_OC2_SetConfig+0xb0>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a1b      	ldr	r2, [pc, #108]	@ (80041e0 <TIM_OC2_SetConfig+0x108>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d007      	beq.n	8004188 <TIM_OC2_SetConfig+0xb0>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a1a      	ldr	r2, [pc, #104]	@ (80041e4 <TIM_OC2_SetConfig+0x10c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d003      	beq.n	8004188 <TIM_OC2_SetConfig+0xb0>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a19      	ldr	r2, [pc, #100]	@ (80041e8 <TIM_OC2_SetConfig+0x110>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d113      	bne.n	80041b0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800418e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40012c00 	.word	0x40012c00
 80041dc:	40013400 	.word	0x40013400
 80041e0:	40014000 	.word	0x40014000
 80041e4:	40014400 	.word	0x40014400
 80041e8:	40014800 	.word	0x40014800

080041ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800421a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0303 	bic.w	r3, r3, #3
 8004226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	021b      	lsls	r3, r3, #8
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a27      	ldr	r2, [pc, #156]	@ (80042e8 <TIM_OC3_SetConfig+0xfc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <TIM_OC3_SetConfig+0x6a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a26      	ldr	r2, [pc, #152]	@ (80042ec <TIM_OC3_SetConfig+0x100>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10d      	bne.n	8004272 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800425c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1c      	ldr	r2, [pc, #112]	@ (80042e8 <TIM_OC3_SetConfig+0xfc>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00f      	beq.n	800429a <TIM_OC3_SetConfig+0xae>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a1b      	ldr	r2, [pc, #108]	@ (80042ec <TIM_OC3_SetConfig+0x100>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00b      	beq.n	800429a <TIM_OC3_SetConfig+0xae>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a1a      	ldr	r2, [pc, #104]	@ (80042f0 <TIM_OC3_SetConfig+0x104>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d007      	beq.n	800429a <TIM_OC3_SetConfig+0xae>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a19      	ldr	r2, [pc, #100]	@ (80042f4 <TIM_OC3_SetConfig+0x108>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_OC3_SetConfig+0xae>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a18      	ldr	r2, [pc, #96]	@ (80042f8 <TIM_OC3_SetConfig+0x10c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d113      	bne.n	80042c2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	621a      	str	r2, [r3, #32]
}
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40013400 	.word	0x40013400
 80042f0:	40014000 	.word	0x40014000
 80042f4:	40014400 	.word	0x40014400
 80042f8:	40014800 	.word	0x40014800

080042fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800432a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800434a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	031b      	lsls	r3, r3, #12
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a18      	ldr	r2, [pc, #96]	@ (80043bc <TIM_OC4_SetConfig+0xc0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00f      	beq.n	8004380 <TIM_OC4_SetConfig+0x84>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a17      	ldr	r2, [pc, #92]	@ (80043c0 <TIM_OC4_SetConfig+0xc4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00b      	beq.n	8004380 <TIM_OC4_SetConfig+0x84>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a16      	ldr	r2, [pc, #88]	@ (80043c4 <TIM_OC4_SetConfig+0xc8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d007      	beq.n	8004380 <TIM_OC4_SetConfig+0x84>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a15      	ldr	r2, [pc, #84]	@ (80043c8 <TIM_OC4_SetConfig+0xcc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_OC4_SetConfig+0x84>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a14      	ldr	r2, [pc, #80]	@ (80043cc <TIM_OC4_SetConfig+0xd0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d109      	bne.n	8004394 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004386:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	019b      	lsls	r3, r3, #6
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	621a      	str	r2, [r3, #32]
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40012c00 	.word	0x40012c00
 80043c0:	40013400 	.word	0x40013400
 80043c4:	40014000 	.word	0x40014000
 80043c8:	40014400 	.word	0x40014400
 80043cc:	40014800 	.word	0x40014800

080043d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004414:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	041b      	lsls	r3, r3, #16
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a17      	ldr	r2, [pc, #92]	@ (8004484 <TIM_OC5_SetConfig+0xb4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00f      	beq.n	800444a <TIM_OC5_SetConfig+0x7a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a16      	ldr	r2, [pc, #88]	@ (8004488 <TIM_OC5_SetConfig+0xb8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00b      	beq.n	800444a <TIM_OC5_SetConfig+0x7a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a15      	ldr	r2, [pc, #84]	@ (800448c <TIM_OC5_SetConfig+0xbc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d007      	beq.n	800444a <TIM_OC5_SetConfig+0x7a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a14      	ldr	r2, [pc, #80]	@ (8004490 <TIM_OC5_SetConfig+0xc0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d003      	beq.n	800444a <TIM_OC5_SetConfig+0x7a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a13      	ldr	r2, [pc, #76]	@ (8004494 <TIM_OC5_SetConfig+0xc4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d109      	bne.n	800445e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004450:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	621a      	str	r2, [r3, #32]
}
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40013400 	.word	0x40013400
 800448c:	40014000 	.word	0x40014000
 8004490:	40014400 	.word	0x40014400
 8004494:	40014800 	.word	0x40014800

08004498 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80044de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	051b      	lsls	r3, r3, #20
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a18      	ldr	r2, [pc, #96]	@ (8004550 <TIM_OC6_SetConfig+0xb8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00f      	beq.n	8004514 <TIM_OC6_SetConfig+0x7c>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a17      	ldr	r2, [pc, #92]	@ (8004554 <TIM_OC6_SetConfig+0xbc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00b      	beq.n	8004514 <TIM_OC6_SetConfig+0x7c>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a16      	ldr	r2, [pc, #88]	@ (8004558 <TIM_OC6_SetConfig+0xc0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d007      	beq.n	8004514 <TIM_OC6_SetConfig+0x7c>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a15      	ldr	r2, [pc, #84]	@ (800455c <TIM_OC6_SetConfig+0xc4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d003      	beq.n	8004514 <TIM_OC6_SetConfig+0x7c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a14      	ldr	r2, [pc, #80]	@ (8004560 <TIM_OC6_SetConfig+0xc8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d109      	bne.n	8004528 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800451a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	029b      	lsls	r3, r3, #10
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40012c00 	.word	0x40012c00
 8004554:	40013400 	.word	0x40013400
 8004558:	40014000 	.word	0x40014000
 800455c:	40014400 	.word	0x40014400
 8004560:	40014800 	.word	0x40014800

08004564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	2201      	movs	r2, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1a      	ldr	r2, [r3, #32]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	43db      	mvns	r3, r3
 8004586:	401a      	ands	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1a      	ldr	r2, [r3, #32]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	431a      	orrs	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e068      	b.n	800469a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a2e      	ldr	r2, [pc, #184]	@ (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d004      	beq.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a2d      	ldr	r2, [pc, #180]	@ (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d108      	bne.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004602:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004614:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1e      	ldr	r2, [pc, #120]	@ (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01d      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800463a:	d018      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1b      	ldr	r2, [pc, #108]	@ (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d013      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1a      	ldr	r2, [pc, #104]	@ (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00e      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a18      	ldr	r2, [pc, #96]	@ (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d009      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a13      	ldr	r2, [pc, #76]	@ (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d004      	beq.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a14      	ldr	r2, [pc, #80]	@ (80046bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d10c      	bne.n	8004688 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	4313      	orrs	r3, r2
 800467e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40012c00 	.word	0x40012c00
 80046ac:	40013400 	.word	0x40013400
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40000800 	.word	0x40000800
 80046b8:	40000c00 	.word	0x40000c00
 80046bc:	40014000 	.word	0x40014000

080046c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e040      	b.n	8004790 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fc fecc 	bl	80014bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2224      	movs	r2, #36	@ 0x24
 8004728:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0201 	bic.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fb6a 	bl	8004e1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f8af 	bl	80048ac <UART_SetConfig>
 800474e:	4603      	mov	r3, r0
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e01b      	b.n	8004790 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004766:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004776:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fbe9 	bl	8004f60 <UART_CheckIdleState>
 800478e:	4603      	mov	r3, r0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	@ 0x28
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d177      	bne.n	80048a0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_UART_Transmit+0x24>
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e070      	b.n	80048a2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2221      	movs	r2, #33	@ 0x21
 80047cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ce:	f7fd f89b 	bl	8001908 <HAL_GetTick>
 80047d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ec:	d108      	bne.n	8004800 <HAL_UART_Transmit+0x68>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d104      	bne.n	8004800 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	e003      	b.n	8004808 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004804:	2300      	movs	r3, #0
 8004806:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004808:	e02f      	b.n	800486a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2200      	movs	r2, #0
 8004812:	2180      	movs	r1, #128	@ 0x80
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 fc4b 	bl	80050b0 <UART_WaitOnFlagUntilTimeout>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e03b      	b.n	80048a2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10b      	bne.n	8004848 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	881a      	ldrh	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800483c:	b292      	uxth	r2, r2
 800483e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	3302      	adds	r3, #2
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	e007      	b.n	8004858 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	781a      	ldrb	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3301      	adds	r3, #1
 8004856:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1c9      	bne.n	800480a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	2140      	movs	r1, #64	@ 0x40
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 fc15 	bl	80050b0 <UART_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d004      	beq.n	8004896 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e005      	b.n	80048a2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	e000      	b.n	80048a2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
  }
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b0:	b08a      	sub	sp, #40	@ 0x28
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	431a      	orrs	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4ba4      	ldr	r3, [pc, #656]	@ (8004b6c <UART_SetConfig+0x2c0>)
 80048dc:	4013      	ands	r3, r2
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a99      	ldr	r2, [pc, #612]	@ (8004b70 <UART_SetConfig+0x2c4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d004      	beq.n	8004918 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004914:	4313      	orrs	r3, r2
 8004916:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004928:	430a      	orrs	r2, r1
 800492a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a90      	ldr	r2, [pc, #576]	@ (8004b74 <UART_SetConfig+0x2c8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d126      	bne.n	8004984 <UART_SetConfig+0xd8>
 8004936:	4b90      	ldr	r3, [pc, #576]	@ (8004b78 <UART_SetConfig+0x2cc>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b03      	cmp	r3, #3
 8004942:	d81b      	bhi.n	800497c <UART_SetConfig+0xd0>
 8004944:	a201      	add	r2, pc, #4	@ (adr r2, 800494c <UART_SetConfig+0xa0>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	0800495d 	.word	0x0800495d
 8004950:	0800496d 	.word	0x0800496d
 8004954:	08004965 	.word	0x08004965
 8004958:	08004975 	.word	0x08004975
 800495c:	2301      	movs	r3, #1
 800495e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004962:	e116      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004964:	2302      	movs	r3, #2
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800496a:	e112      	b.n	8004b92 <UART_SetConfig+0x2e6>
 800496c:	2304      	movs	r3, #4
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004972:	e10e      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004974:	2308      	movs	r3, #8
 8004976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800497a:	e10a      	b.n	8004b92 <UART_SetConfig+0x2e6>
 800497c:	2310      	movs	r3, #16
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004982:	e106      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a7c      	ldr	r2, [pc, #496]	@ (8004b7c <UART_SetConfig+0x2d0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d138      	bne.n	8004a00 <UART_SetConfig+0x154>
 800498e:	4b7a      	ldr	r3, [pc, #488]	@ (8004b78 <UART_SetConfig+0x2cc>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b0c      	cmp	r3, #12
 800499a:	d82d      	bhi.n	80049f8 <UART_SetConfig+0x14c>
 800499c:	a201      	add	r2, pc, #4	@ (adr r2, 80049a4 <UART_SetConfig+0xf8>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049d9 	.word	0x080049d9
 80049a8:	080049f9 	.word	0x080049f9
 80049ac:	080049f9 	.word	0x080049f9
 80049b0:	080049f9 	.word	0x080049f9
 80049b4:	080049e9 	.word	0x080049e9
 80049b8:	080049f9 	.word	0x080049f9
 80049bc:	080049f9 	.word	0x080049f9
 80049c0:	080049f9 	.word	0x080049f9
 80049c4:	080049e1 	.word	0x080049e1
 80049c8:	080049f9 	.word	0x080049f9
 80049cc:	080049f9 	.word	0x080049f9
 80049d0:	080049f9 	.word	0x080049f9
 80049d4:	080049f1 	.word	0x080049f1
 80049d8:	2300      	movs	r3, #0
 80049da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049de:	e0d8      	b.n	8004b92 <UART_SetConfig+0x2e6>
 80049e0:	2302      	movs	r3, #2
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e6:	e0d4      	b.n	8004b92 <UART_SetConfig+0x2e6>
 80049e8:	2304      	movs	r3, #4
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ee:	e0d0      	b.n	8004b92 <UART_SetConfig+0x2e6>
 80049f0:	2308      	movs	r3, #8
 80049f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f6:	e0cc      	b.n	8004b92 <UART_SetConfig+0x2e6>
 80049f8:	2310      	movs	r3, #16
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fe:	e0c8      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a5e      	ldr	r2, [pc, #376]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d125      	bne.n	8004a56 <UART_SetConfig+0x1aa>
 8004a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8004b78 <UART_SetConfig+0x2cc>)
 8004a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a14:	2b30      	cmp	r3, #48	@ 0x30
 8004a16:	d016      	beq.n	8004a46 <UART_SetConfig+0x19a>
 8004a18:	2b30      	cmp	r3, #48	@ 0x30
 8004a1a:	d818      	bhi.n	8004a4e <UART_SetConfig+0x1a2>
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	d00a      	beq.n	8004a36 <UART_SetConfig+0x18a>
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	d814      	bhi.n	8004a4e <UART_SetConfig+0x1a2>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <UART_SetConfig+0x182>
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d008      	beq.n	8004a3e <UART_SetConfig+0x192>
 8004a2c:	e00f      	b.n	8004a4e <UART_SetConfig+0x1a2>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a34:	e0ad      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004a36:	2302      	movs	r3, #2
 8004a38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a3c:	e0a9      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004a3e:	2304      	movs	r3, #4
 8004a40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a44:	e0a5      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004a46:	2308      	movs	r3, #8
 8004a48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a4c:	e0a1      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004a4e:	2310      	movs	r3, #16
 8004a50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a54:	e09d      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a4a      	ldr	r2, [pc, #296]	@ (8004b84 <UART_SetConfig+0x2d8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d125      	bne.n	8004aac <UART_SetConfig+0x200>
 8004a60:	4b45      	ldr	r3, [pc, #276]	@ (8004b78 <UART_SetConfig+0x2cc>)
 8004a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a6c:	d016      	beq.n	8004a9c <UART_SetConfig+0x1f0>
 8004a6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a70:	d818      	bhi.n	8004aa4 <UART_SetConfig+0x1f8>
 8004a72:	2b80      	cmp	r3, #128	@ 0x80
 8004a74:	d00a      	beq.n	8004a8c <UART_SetConfig+0x1e0>
 8004a76:	2b80      	cmp	r3, #128	@ 0x80
 8004a78:	d814      	bhi.n	8004aa4 <UART_SetConfig+0x1f8>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <UART_SetConfig+0x1d8>
 8004a7e:	2b40      	cmp	r3, #64	@ 0x40
 8004a80:	d008      	beq.n	8004a94 <UART_SetConfig+0x1e8>
 8004a82:	e00f      	b.n	8004aa4 <UART_SetConfig+0x1f8>
 8004a84:	2300      	movs	r3, #0
 8004a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a8a:	e082      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a92:	e07e      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004a94:	2304      	movs	r3, #4
 8004a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a9a:	e07a      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aa2:	e076      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aaa:	e072      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a35      	ldr	r2, [pc, #212]	@ (8004b88 <UART_SetConfig+0x2dc>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d12a      	bne.n	8004b0c <UART_SetConfig+0x260>
 8004ab6:	4b30      	ldr	r3, [pc, #192]	@ (8004b78 <UART_SetConfig+0x2cc>)
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004abc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ac0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ac4:	d01a      	beq.n	8004afc <UART_SetConfig+0x250>
 8004ac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aca:	d81b      	bhi.n	8004b04 <UART_SetConfig+0x258>
 8004acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad0:	d00c      	beq.n	8004aec <UART_SetConfig+0x240>
 8004ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad6:	d815      	bhi.n	8004b04 <UART_SetConfig+0x258>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <UART_SetConfig+0x238>
 8004adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ae0:	d008      	beq.n	8004af4 <UART_SetConfig+0x248>
 8004ae2:	e00f      	b.n	8004b04 <UART_SetConfig+0x258>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aea:	e052      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004aec:	2302      	movs	r3, #2
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004af2:	e04e      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004af4:	2304      	movs	r3, #4
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afa:	e04a      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004afc:	2308      	movs	r3, #8
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b02:	e046      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004b04:	2310      	movs	r3, #16
 8004b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b0a:	e042      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a17      	ldr	r2, [pc, #92]	@ (8004b70 <UART_SetConfig+0x2c4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d13a      	bne.n	8004b8c <UART_SetConfig+0x2e0>
 8004b16:	4b18      	ldr	r3, [pc, #96]	@ (8004b78 <UART_SetConfig+0x2cc>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b24:	d01a      	beq.n	8004b5c <UART_SetConfig+0x2b0>
 8004b26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b2a:	d81b      	bhi.n	8004b64 <UART_SetConfig+0x2b8>
 8004b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b30:	d00c      	beq.n	8004b4c <UART_SetConfig+0x2a0>
 8004b32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b36:	d815      	bhi.n	8004b64 <UART_SetConfig+0x2b8>
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <UART_SetConfig+0x298>
 8004b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b40:	d008      	beq.n	8004b54 <UART_SetConfig+0x2a8>
 8004b42:	e00f      	b.n	8004b64 <UART_SetConfig+0x2b8>
 8004b44:	2300      	movs	r3, #0
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b4a:	e022      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b52:	e01e      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004b54:	2304      	movs	r3, #4
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b5a:	e01a      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b62:	e016      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004b64:	2310      	movs	r3, #16
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b6a:	e012      	b.n	8004b92 <UART_SetConfig+0x2e6>
 8004b6c:	efff69f3 	.word	0xefff69f3
 8004b70:	40008000 	.word	0x40008000
 8004b74:	40013800 	.word	0x40013800
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	40004400 	.word	0x40004400
 8004b80:	40004800 	.word	0x40004800
 8004b84:	40004c00 	.word	0x40004c00
 8004b88:	40005000 	.word	0x40005000
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a9f      	ldr	r2, [pc, #636]	@ (8004e14 <UART_SetConfig+0x568>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d17a      	bne.n	8004c92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d824      	bhi.n	8004bee <UART_SetConfig+0x342>
 8004ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bac <UART_SetConfig+0x300>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bd1 	.word	0x08004bd1
 8004bb0:	08004bef 	.word	0x08004bef
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004bef 	.word	0x08004bef
 8004bbc:	08004bdf 	.word	0x08004bdf
 8004bc0:	08004bef 	.word	0x08004bef
 8004bc4:	08004bef 	.word	0x08004bef
 8004bc8:	08004bef 	.word	0x08004bef
 8004bcc:	08004be7 	.word	0x08004be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd0:	f7fd ff5e 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8004bd4:	61f8      	str	r0, [r7, #28]
        break;
 8004bd6:	e010      	b.n	8004bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bd8:	4b8f      	ldr	r3, [pc, #572]	@ (8004e18 <UART_SetConfig+0x56c>)
 8004bda:	61fb      	str	r3, [r7, #28]
        break;
 8004bdc:	e00d      	b.n	8004bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bde:	f7fd febf 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 8004be2:	61f8      	str	r0, [r7, #28]
        break;
 8004be4:	e009      	b.n	8004bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bea:	61fb      	str	r3, [r7, #28]
        break;
 8004bec:	e005      	b.n	8004bfa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004bf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80fb 	beq.w	8004df8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	4613      	mov	r3, r2
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	4413      	add	r3, r2
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d305      	bcc.n	8004c1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d903      	bls.n	8004c26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c24:	e0e8      	b.n	8004df8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	461c      	mov	r4, r3
 8004c2c:	4615      	mov	r5, r2
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	022b      	lsls	r3, r5, #8
 8004c38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c3c:	0222      	lsls	r2, r4, #8
 8004c3e:	68f9      	ldr	r1, [r7, #12]
 8004c40:	6849      	ldr	r1, [r1, #4]
 8004c42:	0849      	lsrs	r1, r1, #1
 8004c44:	2000      	movs	r0, #0
 8004c46:	4688      	mov	r8, r1
 8004c48:	4681      	mov	r9, r0
 8004c4a:	eb12 0a08 	adds.w	sl, r2, r8
 8004c4e:	eb43 0b09 	adc.w	fp, r3, r9
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c60:	4650      	mov	r0, sl
 8004c62:	4659      	mov	r1, fp
 8004c64:	f7fb ffa0 	bl	8000ba8 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c76:	d308      	bcc.n	8004c8a <UART_SetConfig+0x3de>
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c7e:	d204      	bcs.n	8004c8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	60da      	str	r2, [r3, #12]
 8004c88:	e0b6      	b.n	8004df8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c90:	e0b2      	b.n	8004df8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c9a:	d15e      	bne.n	8004d5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d828      	bhi.n	8004cf6 <UART_SetConfig+0x44a>
 8004ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cac <UART_SetConfig+0x400>)
 8004ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004caa:	bf00      	nop
 8004cac:	08004cd1 	.word	0x08004cd1
 8004cb0:	08004cd9 	.word	0x08004cd9
 8004cb4:	08004ce1 	.word	0x08004ce1
 8004cb8:	08004cf7 	.word	0x08004cf7
 8004cbc:	08004ce7 	.word	0x08004ce7
 8004cc0:	08004cf7 	.word	0x08004cf7
 8004cc4:	08004cf7 	.word	0x08004cf7
 8004cc8:	08004cf7 	.word	0x08004cf7
 8004ccc:	08004cef 	.word	0x08004cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd0:	f7fd fede 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8004cd4:	61f8      	str	r0, [r7, #28]
        break;
 8004cd6:	e014      	b.n	8004d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd8:	f7fd fef0 	bl	8002abc <HAL_RCC_GetPCLK2Freq>
 8004cdc:	61f8      	str	r0, [r7, #28]
        break;
 8004cde:	e010      	b.n	8004d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8004e18 <UART_SetConfig+0x56c>)
 8004ce2:	61fb      	str	r3, [r7, #28]
        break;
 8004ce4:	e00d      	b.n	8004d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce6:	f7fd fe3b 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 8004cea:	61f8      	str	r0, [r7, #28]
        break;
 8004cec:	e009      	b.n	8004d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cf2:	61fb      	str	r3, [r7, #28]
        break;
 8004cf4:	e005      	b.n	8004d02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d077      	beq.n	8004df8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005a      	lsls	r2, r3, #1
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	085b      	lsrs	r3, r3, #1
 8004d12:	441a      	add	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	2b0f      	cmp	r3, #15
 8004d22:	d916      	bls.n	8004d52 <UART_SetConfig+0x4a6>
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d2a:	d212      	bcs.n	8004d52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	f023 030f 	bic.w	r3, r3, #15
 8004d34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	085b      	lsrs	r3, r3, #1
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	8afb      	ldrh	r3, [r7, #22]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	8afa      	ldrh	r2, [r7, #22]
 8004d4e:	60da      	str	r2, [r3, #12]
 8004d50:	e052      	b.n	8004df8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d58:	e04e      	b.n	8004df8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d827      	bhi.n	8004db2 <UART_SetConfig+0x506>
 8004d62:	a201      	add	r2, pc, #4	@ (adr r2, 8004d68 <UART_SetConfig+0x4bc>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004d8d 	.word	0x08004d8d
 8004d6c:	08004d95 	.word	0x08004d95
 8004d70:	08004d9d 	.word	0x08004d9d
 8004d74:	08004db3 	.word	0x08004db3
 8004d78:	08004da3 	.word	0x08004da3
 8004d7c:	08004db3 	.word	0x08004db3
 8004d80:	08004db3 	.word	0x08004db3
 8004d84:	08004db3 	.word	0x08004db3
 8004d88:	08004dab 	.word	0x08004dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d8c:	f7fd fe80 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8004d90:	61f8      	str	r0, [r7, #28]
        break;
 8004d92:	e014      	b.n	8004dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d94:	f7fd fe92 	bl	8002abc <HAL_RCC_GetPCLK2Freq>
 8004d98:	61f8      	str	r0, [r7, #28]
        break;
 8004d9a:	e010      	b.n	8004dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8004e18 <UART_SetConfig+0x56c>)
 8004d9e:	61fb      	str	r3, [r7, #28]
        break;
 8004da0:	e00d      	b.n	8004dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da2:	f7fd fddd 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 8004da6:	61f8      	str	r0, [r7, #28]
        break;
 8004da8:	e009      	b.n	8004dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dae:	61fb      	str	r3, [r7, #28]
        break;
 8004db0:	e005      	b.n	8004dbe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004dbc:	bf00      	nop
    }

    if (pclk != 0U)
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d019      	beq.n	8004df8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	085a      	lsrs	r2, r3, #1
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	441a      	add	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	2b0f      	cmp	r3, #15
 8004ddc:	d909      	bls.n	8004df2 <UART_SetConfig+0x546>
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de4:	d205      	bcs.n	8004df2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60da      	str	r2, [r3, #12]
 8004df0:	e002      	b.n	8004df8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3728      	adds	r7, #40	@ 0x28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e12:	bf00      	nop
 8004e14:	40008000 	.word	0x40008000
 8004e18:	00f42400 	.word	0x00f42400

08004e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01a      	beq.n	8004f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f1a:	d10a      	bne.n	8004f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	605a      	str	r2, [r3, #4]
  }
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b098      	sub	sp, #96	@ 0x60
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f70:	f7fc fcca 	bl	8001908 <HAL_GetTick>
 8004f74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d12e      	bne.n	8004fe2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f88c 	bl	80050b0 <UART_WaitOnFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d021      	beq.n	8004fe2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fbe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e6      	bne.n	8004f9e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e062      	b.n	80050a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d149      	bne.n	8005084 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ff0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f856 	bl	80050b0 <UART_WaitOnFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d03c      	beq.n	8005084 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	623b      	str	r3, [r7, #32]
   return(result);
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800501e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	461a      	mov	r2, r3
 8005026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005028:	633b      	str	r3, [r7, #48]	@ 0x30
 800502a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800502e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e6      	bne.n	800500a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3308      	adds	r3, #8
 8005042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	60fb      	str	r3, [r7, #12]
   return(result);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0301 	bic.w	r3, r3, #1
 8005052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3308      	adds	r3, #8
 800505a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800505c:	61fa      	str	r2, [r7, #28]
 800505e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	69b9      	ldr	r1, [r7, #24]
 8005062:	69fa      	ldr	r2, [r7, #28]
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	617b      	str	r3, [r7, #20]
   return(result);
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e5      	bne.n	800503c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e011      	b.n	80050a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3758      	adds	r7, #88	@ 0x58
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c0:	e04f      	b.n	8005162 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d04b      	beq.n	8005162 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ca:	f7fc fc1d 	bl	8001908 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d302      	bcc.n	80050e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e04e      	b.n	8005182 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d037      	beq.n	8005162 <UART_WaitOnFlagUntilTimeout+0xb2>
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b80      	cmp	r3, #128	@ 0x80
 80050f6:	d034      	beq.n	8005162 <UART_WaitOnFlagUntilTimeout+0xb2>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b40      	cmp	r3, #64	@ 0x40
 80050fc:	d031      	beq.n	8005162 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b08      	cmp	r3, #8
 800510a:	d110      	bne.n	800512e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2208      	movs	r2, #8
 8005112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f838 	bl	800518a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2208      	movs	r2, #8
 800511e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e029      	b.n	8005182 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800513c:	d111      	bne.n	8005162 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005146:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f81e 	bl	800518a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e00f      	b.n	8005182 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69da      	ldr	r2, [r3, #28]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4013      	ands	r3, r2
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	429a      	cmp	r2, r3
 8005170:	bf0c      	ite	eq
 8005172:	2301      	moveq	r3, #1
 8005174:	2300      	movne	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	79fb      	ldrb	r3, [r7, #7]
 800517c:	429a      	cmp	r2, r3
 800517e:	d0a0      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800518a:	b480      	push	{r7}
 800518c:	b095      	sub	sp, #84	@ 0x54
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80051b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e6      	bne.n	8005192 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3308      	adds	r3, #8
 80051ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	e853 3f00 	ldrex	r3, [r3]
 80051d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3308      	adds	r3, #8
 80051e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e5      	bne.n	80051c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d118      	bne.n	8005232 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	60bb      	str	r3, [r7, #8]
   return(result);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f023 0310 	bic.w	r3, r3, #16
 8005214:	647b      	str	r3, [r7, #68]	@ 0x44
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6979      	ldr	r1, [r7, #20]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	613b      	str	r3, [r7, #16]
   return(result);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e6      	bne.n	8005200 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005246:	bf00      	nop
 8005248:	3754      	adds	r7, #84	@ 0x54
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	601a      	str	r2, [r3, #0]
}
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6892      	ldr	r2, [r2, #8]
 80052b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6852      	ldr	r2, [r2, #4]
 80052ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d103      	bne.n	80052ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	1e5a      	subs	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052fa:	4b4f      	ldr	r3, [pc, #316]	@ (8005438 <xTaskIncrementTick+0x148>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f040 808f 	bne.w	8005422 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005304:	4b4d      	ldr	r3, [pc, #308]	@ (800543c <xTaskIncrementTick+0x14c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3301      	adds	r3, #1
 800530a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800530c:	4a4b      	ldr	r2, [pc, #300]	@ (800543c <xTaskIncrementTick+0x14c>)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d121      	bne.n	800535c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005318:	4b49      	ldr	r3, [pc, #292]	@ (8005440 <xTaskIncrementTick+0x150>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00b      	beq.n	800533a <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	e7fd      	b.n	8005336 <xTaskIncrementTick+0x46>
 800533a:	4b41      	ldr	r3, [pc, #260]	@ (8005440 <xTaskIncrementTick+0x150>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	4b40      	ldr	r3, [pc, #256]	@ (8005444 <xTaskIncrementTick+0x154>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a3e      	ldr	r2, [pc, #248]	@ (8005440 <xTaskIncrementTick+0x150>)
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	4a3e      	ldr	r2, [pc, #248]	@ (8005444 <xTaskIncrementTick+0x154>)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	4b3e      	ldr	r3, [pc, #248]	@ (8005448 <xTaskIncrementTick+0x158>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3301      	adds	r3, #1
 8005354:	4a3c      	ldr	r2, [pc, #240]	@ (8005448 <xTaskIncrementTick+0x158>)
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	f000 f8e8 	bl	800552c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800535c:	4b3b      	ldr	r3, [pc, #236]	@ (800544c <xTaskIncrementTick+0x15c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	429a      	cmp	r2, r3
 8005364:	d348      	bcc.n	80053f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005366:	4b36      	ldr	r3, [pc, #216]	@ (8005440 <xTaskIncrementTick+0x150>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d104      	bne.n	800537a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005370:	4b36      	ldr	r3, [pc, #216]	@ (800544c <xTaskIncrementTick+0x15c>)
 8005372:	f04f 32ff 	mov.w	r2, #4294967295
 8005376:	601a      	str	r2, [r3, #0]
					break;
 8005378:	e03e      	b.n	80053f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800537a:	4b31      	ldr	r3, [pc, #196]	@ (8005440 <xTaskIncrementTick+0x150>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	429a      	cmp	r2, r3
 8005390:	d203      	bcs.n	800539a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005392:	4a2e      	ldr	r2, [pc, #184]	@ (800544c <xTaskIncrementTick+0x15c>)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005398:	e02e      	b.n	80053f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	3304      	adds	r3, #4
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff ff7b 	bl	800529a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d004      	beq.n	80053b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	3318      	adds	r3, #24
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff ff72 	bl	800529a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ba:	2201      	movs	r2, #1
 80053bc:	409a      	lsls	r2, r3
 80053be:	4b24      	ldr	r3, [pc, #144]	@ (8005450 <xTaskIncrementTick+0x160>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	4a22      	ldr	r2, [pc, #136]	@ (8005450 <xTaskIncrementTick+0x160>)
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005454 <xTaskIncrementTick+0x164>)
 80053d6:	441a      	add	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	3304      	adds	r3, #4
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f7ff ff37 	bl	8005252 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005458 <xTaskIncrementTick+0x168>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d3b9      	bcc.n	8005366 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80053f2:	2301      	movs	r3, #1
 80053f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053f6:	e7b6      	b.n	8005366 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053f8:	4b17      	ldr	r3, [pc, #92]	@ (8005458 <xTaskIncrementTick+0x168>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053fe:	4915      	ldr	r1, [pc, #84]	@ (8005454 <xTaskIncrementTick+0x164>)
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d901      	bls.n	8005414 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005410:	2301      	movs	r3, #1
 8005412:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005414:	4b11      	ldr	r3, [pc, #68]	@ (800545c <xTaskIncrementTick+0x16c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800541c:	2301      	movs	r3, #1
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	e004      	b.n	800542c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005422:	4b0f      	ldr	r3, [pc, #60]	@ (8005460 <xTaskIncrementTick+0x170>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3301      	adds	r3, #1
 8005428:	4a0d      	ldr	r2, [pc, #52]	@ (8005460 <xTaskIncrementTick+0x170>)
 800542a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800542c:	697b      	ldr	r3, [r7, #20]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20000420 	.word	0x20000420
 800543c:	20000408 	.word	0x20000408
 8005440:	20000400 	.word	0x20000400
 8005444:	20000404 	.word	0x20000404
 8005448:	20000418 	.word	0x20000418
 800544c:	2000041c 	.word	0x2000041c
 8005450:	2000040c 	.word	0x2000040c
 8005454:	20000374 	.word	0x20000374
 8005458:	20000370 	.word	0x20000370
 800545c:	20000414 	.word	0x20000414
 8005460:	20000410 	.word	0x20000410

08005464 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800546a:	4b2a      	ldr	r3, [pc, #168]	@ (8005514 <vTaskSwitchContext+0xb0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005472:	4b29      	ldr	r3, [pc, #164]	@ (8005518 <vTaskSwitchContext+0xb4>)
 8005474:	2201      	movs	r2, #1
 8005476:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005478:	e045      	b.n	8005506 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800547a:	4b27      	ldr	r3, [pc, #156]	@ (8005518 <vTaskSwitchContext+0xb4>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005480:	4b26      	ldr	r3, [pc, #152]	@ (800551c <vTaskSwitchContext+0xb8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	fab3 f383 	clz	r3, r3
 800548c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800548e:	7afb      	ldrb	r3, [r7, #11]
 8005490:	f1c3 031f 	rsb	r3, r3, #31
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	4922      	ldr	r1, [pc, #136]	@ (8005520 <vTaskSwitchContext+0xbc>)
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4613      	mov	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10b      	bne.n	80054c2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	607b      	str	r3, [r7, #4]
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	e7fd      	b.n	80054be <vTaskSwitchContext+0x5a>
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4a14      	ldr	r2, [pc, #80]	@ (8005520 <vTaskSwitchContext+0xbc>)
 80054ce:	4413      	add	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	605a      	str	r2, [r3, #4]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	3308      	adds	r3, #8
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d104      	bne.n	80054f2 <vTaskSwitchContext+0x8e>
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	605a      	str	r2, [r3, #4]
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005524 <vTaskSwitchContext+0xc0>)
 80054fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054fc:	4b09      	ldr	r3, [pc, #36]	@ (8005524 <vTaskSwitchContext+0xc0>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	334c      	adds	r3, #76	@ 0x4c
 8005502:	4a09      	ldr	r2, [pc, #36]	@ (8005528 <vTaskSwitchContext+0xc4>)
 8005504:	6013      	str	r3, [r2, #0]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20000420 	.word	0x20000420
 8005518:	20000414 	.word	0x20000414
 800551c:	2000040c 	.word	0x2000040c
 8005520:	20000374 	.word	0x20000374
 8005524:	20000370 	.word	0x20000370
 8005528:	20000068 	.word	0x20000068

0800552c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005532:	4b0c      	ldr	r3, [pc, #48]	@ (8005564 <prvResetNextTaskUnblockTime+0x38>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d104      	bne.n	8005546 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800553c:	4b0a      	ldr	r3, [pc, #40]	@ (8005568 <prvResetNextTaskUnblockTime+0x3c>)
 800553e:	f04f 32ff 	mov.w	r2, #4294967295
 8005542:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005544:	e008      	b.n	8005558 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005546:	4b07      	ldr	r3, [pc, #28]	@ (8005564 <prvResetNextTaskUnblockTime+0x38>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	4a04      	ldr	r2, [pc, #16]	@ (8005568 <prvResetNextTaskUnblockTime+0x3c>)
 8005556:	6013      	str	r3, [r2, #0]
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	20000400 	.word	0x20000400
 8005568:	2000041c 	.word	0x2000041c
 800556c:	00000000 	.word	0x00000000

08005570 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005570:	4b07      	ldr	r3, [pc, #28]	@ (8005590 <pxCurrentTCBConst2>)
 8005572:	6819      	ldr	r1, [r3, #0]
 8005574:	6808      	ldr	r0, [r1, #0]
 8005576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557a:	f380 8809 	msr	PSP, r0
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f04f 0000 	mov.w	r0, #0
 8005586:	f380 8811 	msr	BASEPRI, r0
 800558a:	4770      	bx	lr
 800558c:	f3af 8000 	nop.w

08005590 <pxCurrentTCBConst2>:
 8005590:	20000370 	.word	0x20000370
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop
	...

080055a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055a0:	f3ef 8009 	mrs	r0, PSP
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	4b15      	ldr	r3, [pc, #84]	@ (8005600 <pxCurrentTCBConst>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	f01e 0f10 	tst.w	lr, #16
 80055b0:	bf08      	it	eq
 80055b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ba:	6010      	str	r0, [r2, #0]
 80055bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80055c4:	f380 8811 	msr	BASEPRI, r0
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f7ff ff48 	bl	8005464 <vTaskSwitchContext>
 80055d4:	f04f 0000 	mov.w	r0, #0
 80055d8:	f380 8811 	msr	BASEPRI, r0
 80055dc:	bc09      	pop	{r0, r3}
 80055de:	6819      	ldr	r1, [r3, #0]
 80055e0:	6808      	ldr	r0, [r1, #0]
 80055e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e6:	f01e 0f10 	tst.w	lr, #16
 80055ea:	bf08      	it	eq
 80055ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055f0:	f380 8809 	msr	PSP, r0
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	f3af 8000 	nop.w

08005600 <pxCurrentTCBConst>:
 8005600:	20000370 	.word	0x20000370
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005604:	bf00      	nop
 8005606:	bf00      	nop

08005608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	607b      	str	r3, [r7, #4]
}
 8005620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005622:	f7ff fe65 	bl	80052f0 <xTaskIncrementTick>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800562c:	4b06      	ldr	r3, [pc, #24]	@ (8005648 <SysTick_Handler+0x40>)
 800562e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	2300      	movs	r3, #0
 8005636:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800563e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005640:	bf00      	nop
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <__cvt>:
 800564c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005650:	ec57 6b10 	vmov	r6, r7, d0
 8005654:	2f00      	cmp	r7, #0
 8005656:	460c      	mov	r4, r1
 8005658:	4619      	mov	r1, r3
 800565a:	463b      	mov	r3, r7
 800565c:	bfbb      	ittet	lt
 800565e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005662:	461f      	movlt	r7, r3
 8005664:	2300      	movge	r3, #0
 8005666:	232d      	movlt	r3, #45	@ 0x2d
 8005668:	700b      	strb	r3, [r1, #0]
 800566a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800566c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005670:	4691      	mov	r9, r2
 8005672:	f023 0820 	bic.w	r8, r3, #32
 8005676:	bfbc      	itt	lt
 8005678:	4632      	movlt	r2, r6
 800567a:	4616      	movlt	r6, r2
 800567c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005680:	d005      	beq.n	800568e <__cvt+0x42>
 8005682:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005686:	d100      	bne.n	800568a <__cvt+0x3e>
 8005688:	3401      	adds	r4, #1
 800568a:	2102      	movs	r1, #2
 800568c:	e000      	b.n	8005690 <__cvt+0x44>
 800568e:	2103      	movs	r1, #3
 8005690:	ab03      	add	r3, sp, #12
 8005692:	9301      	str	r3, [sp, #4]
 8005694:	ab02      	add	r3, sp, #8
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	ec47 6b10 	vmov	d0, r6, r7
 800569c:	4653      	mov	r3, sl
 800569e:	4622      	mov	r2, r4
 80056a0:	f000 fe6a 	bl	8006378 <_dtoa_r>
 80056a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80056a8:	4605      	mov	r5, r0
 80056aa:	d119      	bne.n	80056e0 <__cvt+0x94>
 80056ac:	f019 0f01 	tst.w	r9, #1
 80056b0:	d00e      	beq.n	80056d0 <__cvt+0x84>
 80056b2:	eb00 0904 	add.w	r9, r0, r4
 80056b6:	2200      	movs	r2, #0
 80056b8:	2300      	movs	r3, #0
 80056ba:	4630      	mov	r0, r6
 80056bc:	4639      	mov	r1, r7
 80056be:	f7fb fa03 	bl	8000ac8 <__aeabi_dcmpeq>
 80056c2:	b108      	cbz	r0, 80056c8 <__cvt+0x7c>
 80056c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80056c8:	2230      	movs	r2, #48	@ 0x30
 80056ca:	9b03      	ldr	r3, [sp, #12]
 80056cc:	454b      	cmp	r3, r9
 80056ce:	d31e      	bcc.n	800570e <__cvt+0xc2>
 80056d0:	9b03      	ldr	r3, [sp, #12]
 80056d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80056d4:	1b5b      	subs	r3, r3, r5
 80056d6:	4628      	mov	r0, r5
 80056d8:	6013      	str	r3, [r2, #0]
 80056da:	b004      	add	sp, #16
 80056dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056e4:	eb00 0904 	add.w	r9, r0, r4
 80056e8:	d1e5      	bne.n	80056b6 <__cvt+0x6a>
 80056ea:	7803      	ldrb	r3, [r0, #0]
 80056ec:	2b30      	cmp	r3, #48	@ 0x30
 80056ee:	d10a      	bne.n	8005706 <__cvt+0xba>
 80056f0:	2200      	movs	r2, #0
 80056f2:	2300      	movs	r3, #0
 80056f4:	4630      	mov	r0, r6
 80056f6:	4639      	mov	r1, r7
 80056f8:	f7fb f9e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80056fc:	b918      	cbnz	r0, 8005706 <__cvt+0xba>
 80056fe:	f1c4 0401 	rsb	r4, r4, #1
 8005702:	f8ca 4000 	str.w	r4, [sl]
 8005706:	f8da 3000 	ldr.w	r3, [sl]
 800570a:	4499      	add	r9, r3
 800570c:	e7d3      	b.n	80056b6 <__cvt+0x6a>
 800570e:	1c59      	adds	r1, r3, #1
 8005710:	9103      	str	r1, [sp, #12]
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	e7d9      	b.n	80056ca <__cvt+0x7e>

08005716 <__exponent>:
 8005716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005718:	2900      	cmp	r1, #0
 800571a:	bfba      	itte	lt
 800571c:	4249      	neglt	r1, r1
 800571e:	232d      	movlt	r3, #45	@ 0x2d
 8005720:	232b      	movge	r3, #43	@ 0x2b
 8005722:	2909      	cmp	r1, #9
 8005724:	7002      	strb	r2, [r0, #0]
 8005726:	7043      	strb	r3, [r0, #1]
 8005728:	dd29      	ble.n	800577e <__exponent+0x68>
 800572a:	f10d 0307 	add.w	r3, sp, #7
 800572e:	461d      	mov	r5, r3
 8005730:	270a      	movs	r7, #10
 8005732:	461a      	mov	r2, r3
 8005734:	fbb1 f6f7 	udiv	r6, r1, r7
 8005738:	fb07 1416 	mls	r4, r7, r6, r1
 800573c:	3430      	adds	r4, #48	@ 0x30
 800573e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005742:	460c      	mov	r4, r1
 8005744:	2c63      	cmp	r4, #99	@ 0x63
 8005746:	f103 33ff 	add.w	r3, r3, #4294967295
 800574a:	4631      	mov	r1, r6
 800574c:	dcf1      	bgt.n	8005732 <__exponent+0x1c>
 800574e:	3130      	adds	r1, #48	@ 0x30
 8005750:	1e94      	subs	r4, r2, #2
 8005752:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005756:	1c41      	adds	r1, r0, #1
 8005758:	4623      	mov	r3, r4
 800575a:	42ab      	cmp	r3, r5
 800575c:	d30a      	bcc.n	8005774 <__exponent+0x5e>
 800575e:	f10d 0309 	add.w	r3, sp, #9
 8005762:	1a9b      	subs	r3, r3, r2
 8005764:	42ac      	cmp	r4, r5
 8005766:	bf88      	it	hi
 8005768:	2300      	movhi	r3, #0
 800576a:	3302      	adds	r3, #2
 800576c:	4403      	add	r3, r0
 800576e:	1a18      	subs	r0, r3, r0
 8005770:	b003      	add	sp, #12
 8005772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005774:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005778:	f801 6f01 	strb.w	r6, [r1, #1]!
 800577c:	e7ed      	b.n	800575a <__exponent+0x44>
 800577e:	2330      	movs	r3, #48	@ 0x30
 8005780:	3130      	adds	r1, #48	@ 0x30
 8005782:	7083      	strb	r3, [r0, #2]
 8005784:	70c1      	strb	r1, [r0, #3]
 8005786:	1d03      	adds	r3, r0, #4
 8005788:	e7f1      	b.n	800576e <__exponent+0x58>
	...

0800578c <_printf_float>:
 800578c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005790:	b08d      	sub	sp, #52	@ 0x34
 8005792:	460c      	mov	r4, r1
 8005794:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005798:	4616      	mov	r6, r2
 800579a:	461f      	mov	r7, r3
 800579c:	4605      	mov	r5, r0
 800579e:	f000 fcdb 	bl	8006158 <_localeconv_r>
 80057a2:	6803      	ldr	r3, [r0, #0]
 80057a4:	9304      	str	r3, [sp, #16]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fa fd62 	bl	8000270 <strlen>
 80057ac:	2300      	movs	r3, #0
 80057ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80057b0:	f8d8 3000 	ldr.w	r3, [r8]
 80057b4:	9005      	str	r0, [sp, #20]
 80057b6:	3307      	adds	r3, #7
 80057b8:	f023 0307 	bic.w	r3, r3, #7
 80057bc:	f103 0208 	add.w	r2, r3, #8
 80057c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80057c4:	f8d4 b000 	ldr.w	fp, [r4]
 80057c8:	f8c8 2000 	str.w	r2, [r8]
 80057cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80057d4:	9307      	str	r3, [sp, #28]
 80057d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80057da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80057de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057e2:	4b9c      	ldr	r3, [pc, #624]	@ (8005a54 <_printf_float+0x2c8>)
 80057e4:	f04f 32ff 	mov.w	r2, #4294967295
 80057e8:	f7fb f9a0 	bl	8000b2c <__aeabi_dcmpun>
 80057ec:	bb70      	cbnz	r0, 800584c <_printf_float+0xc0>
 80057ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057f2:	4b98      	ldr	r3, [pc, #608]	@ (8005a54 <_printf_float+0x2c8>)
 80057f4:	f04f 32ff 	mov.w	r2, #4294967295
 80057f8:	f7fb f97a 	bl	8000af0 <__aeabi_dcmple>
 80057fc:	bb30      	cbnz	r0, 800584c <_printf_float+0xc0>
 80057fe:	2200      	movs	r2, #0
 8005800:	2300      	movs	r3, #0
 8005802:	4640      	mov	r0, r8
 8005804:	4649      	mov	r1, r9
 8005806:	f7fb f969 	bl	8000adc <__aeabi_dcmplt>
 800580a:	b110      	cbz	r0, 8005812 <_printf_float+0x86>
 800580c:	232d      	movs	r3, #45	@ 0x2d
 800580e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005812:	4a91      	ldr	r2, [pc, #580]	@ (8005a58 <_printf_float+0x2cc>)
 8005814:	4b91      	ldr	r3, [pc, #580]	@ (8005a5c <_printf_float+0x2d0>)
 8005816:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800581a:	bf8c      	ite	hi
 800581c:	4690      	movhi	r8, r2
 800581e:	4698      	movls	r8, r3
 8005820:	2303      	movs	r3, #3
 8005822:	6123      	str	r3, [r4, #16]
 8005824:	f02b 0304 	bic.w	r3, fp, #4
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	f04f 0900 	mov.w	r9, #0
 800582e:	9700      	str	r7, [sp, #0]
 8005830:	4633      	mov	r3, r6
 8005832:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005834:	4621      	mov	r1, r4
 8005836:	4628      	mov	r0, r5
 8005838:	f000 f9d2 	bl	8005be0 <_printf_common>
 800583c:	3001      	adds	r0, #1
 800583e:	f040 808d 	bne.w	800595c <_printf_float+0x1d0>
 8005842:	f04f 30ff 	mov.w	r0, #4294967295
 8005846:	b00d      	add	sp, #52	@ 0x34
 8005848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584c:	4642      	mov	r2, r8
 800584e:	464b      	mov	r3, r9
 8005850:	4640      	mov	r0, r8
 8005852:	4649      	mov	r1, r9
 8005854:	f7fb f96a 	bl	8000b2c <__aeabi_dcmpun>
 8005858:	b140      	cbz	r0, 800586c <_printf_float+0xe0>
 800585a:	464b      	mov	r3, r9
 800585c:	2b00      	cmp	r3, #0
 800585e:	bfbc      	itt	lt
 8005860:	232d      	movlt	r3, #45	@ 0x2d
 8005862:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005866:	4a7e      	ldr	r2, [pc, #504]	@ (8005a60 <_printf_float+0x2d4>)
 8005868:	4b7e      	ldr	r3, [pc, #504]	@ (8005a64 <_printf_float+0x2d8>)
 800586a:	e7d4      	b.n	8005816 <_printf_float+0x8a>
 800586c:	6863      	ldr	r3, [r4, #4]
 800586e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005872:	9206      	str	r2, [sp, #24]
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	d13b      	bne.n	80058f0 <_printf_float+0x164>
 8005878:	2306      	movs	r3, #6
 800587a:	6063      	str	r3, [r4, #4]
 800587c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005880:	2300      	movs	r3, #0
 8005882:	6022      	str	r2, [r4, #0]
 8005884:	9303      	str	r3, [sp, #12]
 8005886:	ab0a      	add	r3, sp, #40	@ 0x28
 8005888:	e9cd a301 	strd	sl, r3, [sp, #4]
 800588c:	ab09      	add	r3, sp, #36	@ 0x24
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	6861      	ldr	r1, [r4, #4]
 8005892:	ec49 8b10 	vmov	d0, r8, r9
 8005896:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800589a:	4628      	mov	r0, r5
 800589c:	f7ff fed6 	bl	800564c <__cvt>
 80058a0:	9b06      	ldr	r3, [sp, #24]
 80058a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80058a4:	2b47      	cmp	r3, #71	@ 0x47
 80058a6:	4680      	mov	r8, r0
 80058a8:	d129      	bne.n	80058fe <_printf_float+0x172>
 80058aa:	1cc8      	adds	r0, r1, #3
 80058ac:	db02      	blt.n	80058b4 <_printf_float+0x128>
 80058ae:	6863      	ldr	r3, [r4, #4]
 80058b0:	4299      	cmp	r1, r3
 80058b2:	dd41      	ble.n	8005938 <_printf_float+0x1ac>
 80058b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80058b8:	fa5f fa8a 	uxtb.w	sl, sl
 80058bc:	3901      	subs	r1, #1
 80058be:	4652      	mov	r2, sl
 80058c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80058c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80058c6:	f7ff ff26 	bl	8005716 <__exponent>
 80058ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058cc:	1813      	adds	r3, r2, r0
 80058ce:	2a01      	cmp	r2, #1
 80058d0:	4681      	mov	r9, r0
 80058d2:	6123      	str	r3, [r4, #16]
 80058d4:	dc02      	bgt.n	80058dc <_printf_float+0x150>
 80058d6:	6822      	ldr	r2, [r4, #0]
 80058d8:	07d2      	lsls	r2, r2, #31
 80058da:	d501      	bpl.n	80058e0 <_printf_float+0x154>
 80058dc:	3301      	adds	r3, #1
 80058de:	6123      	str	r3, [r4, #16]
 80058e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0a2      	beq.n	800582e <_printf_float+0xa2>
 80058e8:	232d      	movs	r3, #45	@ 0x2d
 80058ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058ee:	e79e      	b.n	800582e <_printf_float+0xa2>
 80058f0:	9a06      	ldr	r2, [sp, #24]
 80058f2:	2a47      	cmp	r2, #71	@ 0x47
 80058f4:	d1c2      	bne.n	800587c <_printf_float+0xf0>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1c0      	bne.n	800587c <_printf_float+0xf0>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e7bd      	b.n	800587a <_printf_float+0xee>
 80058fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005902:	d9db      	bls.n	80058bc <_printf_float+0x130>
 8005904:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005908:	d118      	bne.n	800593c <_printf_float+0x1b0>
 800590a:	2900      	cmp	r1, #0
 800590c:	6863      	ldr	r3, [r4, #4]
 800590e:	dd0b      	ble.n	8005928 <_printf_float+0x19c>
 8005910:	6121      	str	r1, [r4, #16]
 8005912:	b913      	cbnz	r3, 800591a <_printf_float+0x18e>
 8005914:	6822      	ldr	r2, [r4, #0]
 8005916:	07d0      	lsls	r0, r2, #31
 8005918:	d502      	bpl.n	8005920 <_printf_float+0x194>
 800591a:	3301      	adds	r3, #1
 800591c:	440b      	add	r3, r1
 800591e:	6123      	str	r3, [r4, #16]
 8005920:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005922:	f04f 0900 	mov.w	r9, #0
 8005926:	e7db      	b.n	80058e0 <_printf_float+0x154>
 8005928:	b913      	cbnz	r3, 8005930 <_printf_float+0x1a4>
 800592a:	6822      	ldr	r2, [r4, #0]
 800592c:	07d2      	lsls	r2, r2, #31
 800592e:	d501      	bpl.n	8005934 <_printf_float+0x1a8>
 8005930:	3302      	adds	r3, #2
 8005932:	e7f4      	b.n	800591e <_printf_float+0x192>
 8005934:	2301      	movs	r3, #1
 8005936:	e7f2      	b.n	800591e <_printf_float+0x192>
 8005938:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800593c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800593e:	4299      	cmp	r1, r3
 8005940:	db05      	blt.n	800594e <_printf_float+0x1c2>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	6121      	str	r1, [r4, #16]
 8005946:	07d8      	lsls	r0, r3, #31
 8005948:	d5ea      	bpl.n	8005920 <_printf_float+0x194>
 800594a:	1c4b      	adds	r3, r1, #1
 800594c:	e7e7      	b.n	800591e <_printf_float+0x192>
 800594e:	2900      	cmp	r1, #0
 8005950:	bfd4      	ite	le
 8005952:	f1c1 0202 	rsble	r2, r1, #2
 8005956:	2201      	movgt	r2, #1
 8005958:	4413      	add	r3, r2
 800595a:	e7e0      	b.n	800591e <_printf_float+0x192>
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	055a      	lsls	r2, r3, #21
 8005960:	d407      	bmi.n	8005972 <_printf_float+0x1e6>
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	4642      	mov	r2, r8
 8005966:	4631      	mov	r1, r6
 8005968:	4628      	mov	r0, r5
 800596a:	47b8      	blx	r7
 800596c:	3001      	adds	r0, #1
 800596e:	d12b      	bne.n	80059c8 <_printf_float+0x23c>
 8005970:	e767      	b.n	8005842 <_printf_float+0xb6>
 8005972:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005976:	f240 80dd 	bls.w	8005b34 <_printf_float+0x3a8>
 800597a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800597e:	2200      	movs	r2, #0
 8005980:	2300      	movs	r3, #0
 8005982:	f7fb f8a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005986:	2800      	cmp	r0, #0
 8005988:	d033      	beq.n	80059f2 <_printf_float+0x266>
 800598a:	4a37      	ldr	r2, [pc, #220]	@ (8005a68 <_printf_float+0x2dc>)
 800598c:	2301      	movs	r3, #1
 800598e:	4631      	mov	r1, r6
 8005990:	4628      	mov	r0, r5
 8005992:	47b8      	blx	r7
 8005994:	3001      	adds	r0, #1
 8005996:	f43f af54 	beq.w	8005842 <_printf_float+0xb6>
 800599a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800599e:	4543      	cmp	r3, r8
 80059a0:	db02      	blt.n	80059a8 <_printf_float+0x21c>
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	07d8      	lsls	r0, r3, #31
 80059a6:	d50f      	bpl.n	80059c8 <_printf_float+0x23c>
 80059a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ac:	4631      	mov	r1, r6
 80059ae:	4628      	mov	r0, r5
 80059b0:	47b8      	blx	r7
 80059b2:	3001      	adds	r0, #1
 80059b4:	f43f af45 	beq.w	8005842 <_printf_float+0xb6>
 80059b8:	f04f 0900 	mov.w	r9, #0
 80059bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80059c0:	f104 0a1a 	add.w	sl, r4, #26
 80059c4:	45c8      	cmp	r8, r9
 80059c6:	dc09      	bgt.n	80059dc <_printf_float+0x250>
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	079b      	lsls	r3, r3, #30
 80059cc:	f100 8103 	bmi.w	8005bd6 <_printf_float+0x44a>
 80059d0:	68e0      	ldr	r0, [r4, #12]
 80059d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059d4:	4298      	cmp	r0, r3
 80059d6:	bfb8      	it	lt
 80059d8:	4618      	movlt	r0, r3
 80059da:	e734      	b.n	8005846 <_printf_float+0xba>
 80059dc:	2301      	movs	r3, #1
 80059de:	4652      	mov	r2, sl
 80059e0:	4631      	mov	r1, r6
 80059e2:	4628      	mov	r0, r5
 80059e4:	47b8      	blx	r7
 80059e6:	3001      	adds	r0, #1
 80059e8:	f43f af2b 	beq.w	8005842 <_printf_float+0xb6>
 80059ec:	f109 0901 	add.w	r9, r9, #1
 80059f0:	e7e8      	b.n	80059c4 <_printf_float+0x238>
 80059f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	dc39      	bgt.n	8005a6c <_printf_float+0x2e0>
 80059f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a68 <_printf_float+0x2dc>)
 80059fa:	2301      	movs	r3, #1
 80059fc:	4631      	mov	r1, r6
 80059fe:	4628      	mov	r0, r5
 8005a00:	47b8      	blx	r7
 8005a02:	3001      	adds	r0, #1
 8005a04:	f43f af1d 	beq.w	8005842 <_printf_float+0xb6>
 8005a08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005a0c:	ea59 0303 	orrs.w	r3, r9, r3
 8005a10:	d102      	bne.n	8005a18 <_printf_float+0x28c>
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	07d9      	lsls	r1, r3, #31
 8005a16:	d5d7      	bpl.n	80059c8 <_printf_float+0x23c>
 8005a18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a1c:	4631      	mov	r1, r6
 8005a1e:	4628      	mov	r0, r5
 8005a20:	47b8      	blx	r7
 8005a22:	3001      	adds	r0, #1
 8005a24:	f43f af0d 	beq.w	8005842 <_printf_float+0xb6>
 8005a28:	f04f 0a00 	mov.w	sl, #0
 8005a2c:	f104 0b1a 	add.w	fp, r4, #26
 8005a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a32:	425b      	negs	r3, r3
 8005a34:	4553      	cmp	r3, sl
 8005a36:	dc01      	bgt.n	8005a3c <_printf_float+0x2b0>
 8005a38:	464b      	mov	r3, r9
 8005a3a:	e793      	b.n	8005964 <_printf_float+0x1d8>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	465a      	mov	r2, fp
 8005a40:	4631      	mov	r1, r6
 8005a42:	4628      	mov	r0, r5
 8005a44:	47b8      	blx	r7
 8005a46:	3001      	adds	r0, #1
 8005a48:	f43f aefb 	beq.w	8005842 <_printf_float+0xb6>
 8005a4c:	f10a 0a01 	add.w	sl, sl, #1
 8005a50:	e7ee      	b.n	8005a30 <_printf_float+0x2a4>
 8005a52:	bf00      	nop
 8005a54:	7fefffff 	.word	0x7fefffff
 8005a58:	08008384 	.word	0x08008384
 8005a5c:	08008380 	.word	0x08008380
 8005a60:	0800838c 	.word	0x0800838c
 8005a64:	08008388 	.word	0x08008388
 8005a68:	08008390 	.word	0x08008390
 8005a6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005a72:	4553      	cmp	r3, sl
 8005a74:	bfa8      	it	ge
 8005a76:	4653      	movge	r3, sl
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	4699      	mov	r9, r3
 8005a7c:	dc36      	bgt.n	8005aec <_printf_float+0x360>
 8005a7e:	f04f 0b00 	mov.w	fp, #0
 8005a82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a86:	f104 021a 	add.w	r2, r4, #26
 8005a8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a8c:	9306      	str	r3, [sp, #24]
 8005a8e:	eba3 0309 	sub.w	r3, r3, r9
 8005a92:	455b      	cmp	r3, fp
 8005a94:	dc31      	bgt.n	8005afa <_printf_float+0x36e>
 8005a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a98:	459a      	cmp	sl, r3
 8005a9a:	dc3a      	bgt.n	8005b12 <_printf_float+0x386>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	07da      	lsls	r2, r3, #31
 8005aa0:	d437      	bmi.n	8005b12 <_printf_float+0x386>
 8005aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa4:	ebaa 0903 	sub.w	r9, sl, r3
 8005aa8:	9b06      	ldr	r3, [sp, #24]
 8005aaa:	ebaa 0303 	sub.w	r3, sl, r3
 8005aae:	4599      	cmp	r9, r3
 8005ab0:	bfa8      	it	ge
 8005ab2:	4699      	movge	r9, r3
 8005ab4:	f1b9 0f00 	cmp.w	r9, #0
 8005ab8:	dc33      	bgt.n	8005b22 <_printf_float+0x396>
 8005aba:	f04f 0800 	mov.w	r8, #0
 8005abe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ac2:	f104 0b1a 	add.w	fp, r4, #26
 8005ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ac8:	ebaa 0303 	sub.w	r3, sl, r3
 8005acc:	eba3 0309 	sub.w	r3, r3, r9
 8005ad0:	4543      	cmp	r3, r8
 8005ad2:	f77f af79 	ble.w	80059c8 <_printf_float+0x23c>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	465a      	mov	r2, fp
 8005ada:	4631      	mov	r1, r6
 8005adc:	4628      	mov	r0, r5
 8005ade:	47b8      	blx	r7
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f43f aeae 	beq.w	8005842 <_printf_float+0xb6>
 8005ae6:	f108 0801 	add.w	r8, r8, #1
 8005aea:	e7ec      	b.n	8005ac6 <_printf_float+0x33a>
 8005aec:	4642      	mov	r2, r8
 8005aee:	4631      	mov	r1, r6
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b8      	blx	r7
 8005af4:	3001      	adds	r0, #1
 8005af6:	d1c2      	bne.n	8005a7e <_printf_float+0x2f2>
 8005af8:	e6a3      	b.n	8005842 <_printf_float+0xb6>
 8005afa:	2301      	movs	r3, #1
 8005afc:	4631      	mov	r1, r6
 8005afe:	4628      	mov	r0, r5
 8005b00:	9206      	str	r2, [sp, #24]
 8005b02:	47b8      	blx	r7
 8005b04:	3001      	adds	r0, #1
 8005b06:	f43f ae9c 	beq.w	8005842 <_printf_float+0xb6>
 8005b0a:	9a06      	ldr	r2, [sp, #24]
 8005b0c:	f10b 0b01 	add.w	fp, fp, #1
 8005b10:	e7bb      	b.n	8005a8a <_printf_float+0x2fe>
 8005b12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b16:	4631      	mov	r1, r6
 8005b18:	4628      	mov	r0, r5
 8005b1a:	47b8      	blx	r7
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d1c0      	bne.n	8005aa2 <_printf_float+0x316>
 8005b20:	e68f      	b.n	8005842 <_printf_float+0xb6>
 8005b22:	9a06      	ldr	r2, [sp, #24]
 8005b24:	464b      	mov	r3, r9
 8005b26:	4442      	add	r2, r8
 8005b28:	4631      	mov	r1, r6
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	47b8      	blx	r7
 8005b2e:	3001      	adds	r0, #1
 8005b30:	d1c3      	bne.n	8005aba <_printf_float+0x32e>
 8005b32:	e686      	b.n	8005842 <_printf_float+0xb6>
 8005b34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b38:	f1ba 0f01 	cmp.w	sl, #1
 8005b3c:	dc01      	bgt.n	8005b42 <_printf_float+0x3b6>
 8005b3e:	07db      	lsls	r3, r3, #31
 8005b40:	d536      	bpl.n	8005bb0 <_printf_float+0x424>
 8005b42:	2301      	movs	r3, #1
 8005b44:	4642      	mov	r2, r8
 8005b46:	4631      	mov	r1, r6
 8005b48:	4628      	mov	r0, r5
 8005b4a:	47b8      	blx	r7
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	f43f ae78 	beq.w	8005842 <_printf_float+0xb6>
 8005b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b56:	4631      	mov	r1, r6
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b8      	blx	r7
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	f43f ae70 	beq.w	8005842 <_printf_float+0xb6>
 8005b62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b66:	2200      	movs	r2, #0
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b6e:	f7fa ffab 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b72:	b9c0      	cbnz	r0, 8005ba6 <_printf_float+0x41a>
 8005b74:	4653      	mov	r3, sl
 8005b76:	f108 0201 	add.w	r2, r8, #1
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	47b8      	blx	r7
 8005b80:	3001      	adds	r0, #1
 8005b82:	d10c      	bne.n	8005b9e <_printf_float+0x412>
 8005b84:	e65d      	b.n	8005842 <_printf_float+0xb6>
 8005b86:	2301      	movs	r3, #1
 8005b88:	465a      	mov	r2, fp
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b8      	blx	r7
 8005b90:	3001      	adds	r0, #1
 8005b92:	f43f ae56 	beq.w	8005842 <_printf_float+0xb6>
 8005b96:	f108 0801 	add.w	r8, r8, #1
 8005b9a:	45d0      	cmp	r8, sl
 8005b9c:	dbf3      	blt.n	8005b86 <_printf_float+0x3fa>
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005ba4:	e6df      	b.n	8005966 <_printf_float+0x1da>
 8005ba6:	f04f 0800 	mov.w	r8, #0
 8005baa:	f104 0b1a 	add.w	fp, r4, #26
 8005bae:	e7f4      	b.n	8005b9a <_printf_float+0x40e>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	4642      	mov	r2, r8
 8005bb4:	e7e1      	b.n	8005b7a <_printf_float+0x3ee>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	464a      	mov	r2, r9
 8005bba:	4631      	mov	r1, r6
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	47b8      	blx	r7
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	f43f ae3e 	beq.w	8005842 <_printf_float+0xb6>
 8005bc6:	f108 0801 	add.w	r8, r8, #1
 8005bca:	68e3      	ldr	r3, [r4, #12]
 8005bcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005bce:	1a5b      	subs	r3, r3, r1
 8005bd0:	4543      	cmp	r3, r8
 8005bd2:	dcf0      	bgt.n	8005bb6 <_printf_float+0x42a>
 8005bd4:	e6fc      	b.n	80059d0 <_printf_float+0x244>
 8005bd6:	f04f 0800 	mov.w	r8, #0
 8005bda:	f104 0919 	add.w	r9, r4, #25
 8005bde:	e7f4      	b.n	8005bca <_printf_float+0x43e>

08005be0 <_printf_common>:
 8005be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be4:	4616      	mov	r6, r2
 8005be6:	4698      	mov	r8, r3
 8005be8:	688a      	ldr	r2, [r1, #8]
 8005bea:	690b      	ldr	r3, [r1, #16]
 8005bec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	bfb8      	it	lt
 8005bf4:	4613      	movlt	r3, r2
 8005bf6:	6033      	str	r3, [r6, #0]
 8005bf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005bfc:	4607      	mov	r7, r0
 8005bfe:	460c      	mov	r4, r1
 8005c00:	b10a      	cbz	r2, 8005c06 <_printf_common+0x26>
 8005c02:	3301      	adds	r3, #1
 8005c04:	6033      	str	r3, [r6, #0]
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	0699      	lsls	r1, r3, #26
 8005c0a:	bf42      	ittt	mi
 8005c0c:	6833      	ldrmi	r3, [r6, #0]
 8005c0e:	3302      	addmi	r3, #2
 8005c10:	6033      	strmi	r3, [r6, #0]
 8005c12:	6825      	ldr	r5, [r4, #0]
 8005c14:	f015 0506 	ands.w	r5, r5, #6
 8005c18:	d106      	bne.n	8005c28 <_printf_common+0x48>
 8005c1a:	f104 0a19 	add.w	sl, r4, #25
 8005c1e:	68e3      	ldr	r3, [r4, #12]
 8005c20:	6832      	ldr	r2, [r6, #0]
 8005c22:	1a9b      	subs	r3, r3, r2
 8005c24:	42ab      	cmp	r3, r5
 8005c26:	dc26      	bgt.n	8005c76 <_printf_common+0x96>
 8005c28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c2c:	6822      	ldr	r2, [r4, #0]
 8005c2e:	3b00      	subs	r3, #0
 8005c30:	bf18      	it	ne
 8005c32:	2301      	movne	r3, #1
 8005c34:	0692      	lsls	r2, r2, #26
 8005c36:	d42b      	bmi.n	8005c90 <_printf_common+0xb0>
 8005c38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c3c:	4641      	mov	r1, r8
 8005c3e:	4638      	mov	r0, r7
 8005c40:	47c8      	blx	r9
 8005c42:	3001      	adds	r0, #1
 8005c44:	d01e      	beq.n	8005c84 <_printf_common+0xa4>
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	6922      	ldr	r2, [r4, #16]
 8005c4a:	f003 0306 	and.w	r3, r3, #6
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	bf02      	ittt	eq
 8005c52:	68e5      	ldreq	r5, [r4, #12]
 8005c54:	6833      	ldreq	r3, [r6, #0]
 8005c56:	1aed      	subeq	r5, r5, r3
 8005c58:	68a3      	ldr	r3, [r4, #8]
 8005c5a:	bf0c      	ite	eq
 8005c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c60:	2500      	movne	r5, #0
 8005c62:	4293      	cmp	r3, r2
 8005c64:	bfc4      	itt	gt
 8005c66:	1a9b      	subgt	r3, r3, r2
 8005c68:	18ed      	addgt	r5, r5, r3
 8005c6a:	2600      	movs	r6, #0
 8005c6c:	341a      	adds	r4, #26
 8005c6e:	42b5      	cmp	r5, r6
 8005c70:	d11a      	bne.n	8005ca8 <_printf_common+0xc8>
 8005c72:	2000      	movs	r0, #0
 8005c74:	e008      	b.n	8005c88 <_printf_common+0xa8>
 8005c76:	2301      	movs	r3, #1
 8005c78:	4652      	mov	r2, sl
 8005c7a:	4641      	mov	r1, r8
 8005c7c:	4638      	mov	r0, r7
 8005c7e:	47c8      	blx	r9
 8005c80:	3001      	adds	r0, #1
 8005c82:	d103      	bne.n	8005c8c <_printf_common+0xac>
 8005c84:	f04f 30ff 	mov.w	r0, #4294967295
 8005c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c8c:	3501      	adds	r5, #1
 8005c8e:	e7c6      	b.n	8005c1e <_printf_common+0x3e>
 8005c90:	18e1      	adds	r1, r4, r3
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	2030      	movs	r0, #48	@ 0x30
 8005c96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c9a:	4422      	add	r2, r4
 8005c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ca0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ca4:	3302      	adds	r3, #2
 8005ca6:	e7c7      	b.n	8005c38 <_printf_common+0x58>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	4622      	mov	r2, r4
 8005cac:	4641      	mov	r1, r8
 8005cae:	4638      	mov	r0, r7
 8005cb0:	47c8      	blx	r9
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	d0e6      	beq.n	8005c84 <_printf_common+0xa4>
 8005cb6:	3601      	adds	r6, #1
 8005cb8:	e7d9      	b.n	8005c6e <_printf_common+0x8e>
	...

08005cbc <_printf_i>:
 8005cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc0:	7e0f      	ldrb	r7, [r1, #24]
 8005cc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cc4:	2f78      	cmp	r7, #120	@ 0x78
 8005cc6:	4691      	mov	r9, r2
 8005cc8:	4680      	mov	r8, r0
 8005cca:	460c      	mov	r4, r1
 8005ccc:	469a      	mov	sl, r3
 8005cce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cd2:	d807      	bhi.n	8005ce4 <_printf_i+0x28>
 8005cd4:	2f62      	cmp	r7, #98	@ 0x62
 8005cd6:	d80a      	bhi.n	8005cee <_printf_i+0x32>
 8005cd8:	2f00      	cmp	r7, #0
 8005cda:	f000 80d1 	beq.w	8005e80 <_printf_i+0x1c4>
 8005cde:	2f58      	cmp	r7, #88	@ 0x58
 8005ce0:	f000 80b8 	beq.w	8005e54 <_printf_i+0x198>
 8005ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ce8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cec:	e03a      	b.n	8005d64 <_printf_i+0xa8>
 8005cee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005cf2:	2b15      	cmp	r3, #21
 8005cf4:	d8f6      	bhi.n	8005ce4 <_printf_i+0x28>
 8005cf6:	a101      	add	r1, pc, #4	@ (adr r1, 8005cfc <_printf_i+0x40>)
 8005cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cfc:	08005d55 	.word	0x08005d55
 8005d00:	08005d69 	.word	0x08005d69
 8005d04:	08005ce5 	.word	0x08005ce5
 8005d08:	08005ce5 	.word	0x08005ce5
 8005d0c:	08005ce5 	.word	0x08005ce5
 8005d10:	08005ce5 	.word	0x08005ce5
 8005d14:	08005d69 	.word	0x08005d69
 8005d18:	08005ce5 	.word	0x08005ce5
 8005d1c:	08005ce5 	.word	0x08005ce5
 8005d20:	08005ce5 	.word	0x08005ce5
 8005d24:	08005ce5 	.word	0x08005ce5
 8005d28:	08005e67 	.word	0x08005e67
 8005d2c:	08005d93 	.word	0x08005d93
 8005d30:	08005e21 	.word	0x08005e21
 8005d34:	08005ce5 	.word	0x08005ce5
 8005d38:	08005ce5 	.word	0x08005ce5
 8005d3c:	08005e89 	.word	0x08005e89
 8005d40:	08005ce5 	.word	0x08005ce5
 8005d44:	08005d93 	.word	0x08005d93
 8005d48:	08005ce5 	.word	0x08005ce5
 8005d4c:	08005ce5 	.word	0x08005ce5
 8005d50:	08005e29 	.word	0x08005e29
 8005d54:	6833      	ldr	r3, [r6, #0]
 8005d56:	1d1a      	adds	r2, r3, #4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6032      	str	r2, [r6, #0]
 8005d5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d64:	2301      	movs	r3, #1
 8005d66:	e09c      	b.n	8005ea2 <_printf_i+0x1e6>
 8005d68:	6833      	ldr	r3, [r6, #0]
 8005d6a:	6820      	ldr	r0, [r4, #0]
 8005d6c:	1d19      	adds	r1, r3, #4
 8005d6e:	6031      	str	r1, [r6, #0]
 8005d70:	0606      	lsls	r6, r0, #24
 8005d72:	d501      	bpl.n	8005d78 <_printf_i+0xbc>
 8005d74:	681d      	ldr	r5, [r3, #0]
 8005d76:	e003      	b.n	8005d80 <_printf_i+0xc4>
 8005d78:	0645      	lsls	r5, r0, #25
 8005d7a:	d5fb      	bpl.n	8005d74 <_printf_i+0xb8>
 8005d7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d80:	2d00      	cmp	r5, #0
 8005d82:	da03      	bge.n	8005d8c <_printf_i+0xd0>
 8005d84:	232d      	movs	r3, #45	@ 0x2d
 8005d86:	426d      	negs	r5, r5
 8005d88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d8c:	4858      	ldr	r0, [pc, #352]	@ (8005ef0 <_printf_i+0x234>)
 8005d8e:	230a      	movs	r3, #10
 8005d90:	e011      	b.n	8005db6 <_printf_i+0xfa>
 8005d92:	6821      	ldr	r1, [r4, #0]
 8005d94:	6833      	ldr	r3, [r6, #0]
 8005d96:	0608      	lsls	r0, r1, #24
 8005d98:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d9c:	d402      	bmi.n	8005da4 <_printf_i+0xe8>
 8005d9e:	0649      	lsls	r1, r1, #25
 8005da0:	bf48      	it	mi
 8005da2:	b2ad      	uxthmi	r5, r5
 8005da4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005da6:	4852      	ldr	r0, [pc, #328]	@ (8005ef0 <_printf_i+0x234>)
 8005da8:	6033      	str	r3, [r6, #0]
 8005daa:	bf14      	ite	ne
 8005dac:	230a      	movne	r3, #10
 8005dae:	2308      	moveq	r3, #8
 8005db0:	2100      	movs	r1, #0
 8005db2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005db6:	6866      	ldr	r6, [r4, #4]
 8005db8:	60a6      	str	r6, [r4, #8]
 8005dba:	2e00      	cmp	r6, #0
 8005dbc:	db05      	blt.n	8005dca <_printf_i+0x10e>
 8005dbe:	6821      	ldr	r1, [r4, #0]
 8005dc0:	432e      	orrs	r6, r5
 8005dc2:	f021 0104 	bic.w	r1, r1, #4
 8005dc6:	6021      	str	r1, [r4, #0]
 8005dc8:	d04b      	beq.n	8005e62 <_printf_i+0x1a6>
 8005dca:	4616      	mov	r6, r2
 8005dcc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dd0:	fb03 5711 	mls	r7, r3, r1, r5
 8005dd4:	5dc7      	ldrb	r7, [r0, r7]
 8005dd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005dda:	462f      	mov	r7, r5
 8005ddc:	42bb      	cmp	r3, r7
 8005dde:	460d      	mov	r5, r1
 8005de0:	d9f4      	bls.n	8005dcc <_printf_i+0x110>
 8005de2:	2b08      	cmp	r3, #8
 8005de4:	d10b      	bne.n	8005dfe <_printf_i+0x142>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	07df      	lsls	r7, r3, #31
 8005dea:	d508      	bpl.n	8005dfe <_printf_i+0x142>
 8005dec:	6923      	ldr	r3, [r4, #16]
 8005dee:	6861      	ldr	r1, [r4, #4]
 8005df0:	4299      	cmp	r1, r3
 8005df2:	bfde      	ittt	le
 8005df4:	2330      	movle	r3, #48	@ 0x30
 8005df6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005dfa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005dfe:	1b92      	subs	r2, r2, r6
 8005e00:	6122      	str	r2, [r4, #16]
 8005e02:	f8cd a000 	str.w	sl, [sp]
 8005e06:	464b      	mov	r3, r9
 8005e08:	aa03      	add	r2, sp, #12
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	f7ff fee7 	bl	8005be0 <_printf_common>
 8005e12:	3001      	adds	r0, #1
 8005e14:	d14a      	bne.n	8005eac <_printf_i+0x1f0>
 8005e16:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1a:	b004      	add	sp, #16
 8005e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	f043 0320 	orr.w	r3, r3, #32
 8005e26:	6023      	str	r3, [r4, #0]
 8005e28:	4832      	ldr	r0, [pc, #200]	@ (8005ef4 <_printf_i+0x238>)
 8005e2a:	2778      	movs	r7, #120	@ 0x78
 8005e2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	6831      	ldr	r1, [r6, #0]
 8005e34:	061f      	lsls	r7, r3, #24
 8005e36:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e3a:	d402      	bmi.n	8005e42 <_printf_i+0x186>
 8005e3c:	065f      	lsls	r7, r3, #25
 8005e3e:	bf48      	it	mi
 8005e40:	b2ad      	uxthmi	r5, r5
 8005e42:	6031      	str	r1, [r6, #0]
 8005e44:	07d9      	lsls	r1, r3, #31
 8005e46:	bf44      	itt	mi
 8005e48:	f043 0320 	orrmi.w	r3, r3, #32
 8005e4c:	6023      	strmi	r3, [r4, #0]
 8005e4e:	b11d      	cbz	r5, 8005e58 <_printf_i+0x19c>
 8005e50:	2310      	movs	r3, #16
 8005e52:	e7ad      	b.n	8005db0 <_printf_i+0xf4>
 8005e54:	4826      	ldr	r0, [pc, #152]	@ (8005ef0 <_printf_i+0x234>)
 8005e56:	e7e9      	b.n	8005e2c <_printf_i+0x170>
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	f023 0320 	bic.w	r3, r3, #32
 8005e5e:	6023      	str	r3, [r4, #0]
 8005e60:	e7f6      	b.n	8005e50 <_printf_i+0x194>
 8005e62:	4616      	mov	r6, r2
 8005e64:	e7bd      	b.n	8005de2 <_printf_i+0x126>
 8005e66:	6833      	ldr	r3, [r6, #0]
 8005e68:	6825      	ldr	r5, [r4, #0]
 8005e6a:	6961      	ldr	r1, [r4, #20]
 8005e6c:	1d18      	adds	r0, r3, #4
 8005e6e:	6030      	str	r0, [r6, #0]
 8005e70:	062e      	lsls	r6, r5, #24
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	d501      	bpl.n	8005e7a <_printf_i+0x1be>
 8005e76:	6019      	str	r1, [r3, #0]
 8005e78:	e002      	b.n	8005e80 <_printf_i+0x1c4>
 8005e7a:	0668      	lsls	r0, r5, #25
 8005e7c:	d5fb      	bpl.n	8005e76 <_printf_i+0x1ba>
 8005e7e:	8019      	strh	r1, [r3, #0]
 8005e80:	2300      	movs	r3, #0
 8005e82:	6123      	str	r3, [r4, #16]
 8005e84:	4616      	mov	r6, r2
 8005e86:	e7bc      	b.n	8005e02 <_printf_i+0x146>
 8005e88:	6833      	ldr	r3, [r6, #0]
 8005e8a:	1d1a      	adds	r2, r3, #4
 8005e8c:	6032      	str	r2, [r6, #0]
 8005e8e:	681e      	ldr	r6, [r3, #0]
 8005e90:	6862      	ldr	r2, [r4, #4]
 8005e92:	2100      	movs	r1, #0
 8005e94:	4630      	mov	r0, r6
 8005e96:	f7fa f99b 	bl	80001d0 <memchr>
 8005e9a:	b108      	cbz	r0, 8005ea0 <_printf_i+0x1e4>
 8005e9c:	1b80      	subs	r0, r0, r6
 8005e9e:	6060      	str	r0, [r4, #4]
 8005ea0:	6863      	ldr	r3, [r4, #4]
 8005ea2:	6123      	str	r3, [r4, #16]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005eaa:	e7aa      	b.n	8005e02 <_printf_i+0x146>
 8005eac:	6923      	ldr	r3, [r4, #16]
 8005eae:	4632      	mov	r2, r6
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	47d0      	blx	sl
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d0ad      	beq.n	8005e16 <_printf_i+0x15a>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	079b      	lsls	r3, r3, #30
 8005ebe:	d413      	bmi.n	8005ee8 <_printf_i+0x22c>
 8005ec0:	68e0      	ldr	r0, [r4, #12]
 8005ec2:	9b03      	ldr	r3, [sp, #12]
 8005ec4:	4298      	cmp	r0, r3
 8005ec6:	bfb8      	it	lt
 8005ec8:	4618      	movlt	r0, r3
 8005eca:	e7a6      	b.n	8005e1a <_printf_i+0x15e>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	4632      	mov	r2, r6
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	4640      	mov	r0, r8
 8005ed4:	47d0      	blx	sl
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	d09d      	beq.n	8005e16 <_printf_i+0x15a>
 8005eda:	3501      	adds	r5, #1
 8005edc:	68e3      	ldr	r3, [r4, #12]
 8005ede:	9903      	ldr	r1, [sp, #12]
 8005ee0:	1a5b      	subs	r3, r3, r1
 8005ee2:	42ab      	cmp	r3, r5
 8005ee4:	dcf2      	bgt.n	8005ecc <_printf_i+0x210>
 8005ee6:	e7eb      	b.n	8005ec0 <_printf_i+0x204>
 8005ee8:	2500      	movs	r5, #0
 8005eea:	f104 0619 	add.w	r6, r4, #25
 8005eee:	e7f5      	b.n	8005edc <_printf_i+0x220>
 8005ef0:	08008392 	.word	0x08008392
 8005ef4:	080083a3 	.word	0x080083a3

08005ef8 <std>:
 8005ef8:	2300      	movs	r3, #0
 8005efa:	b510      	push	{r4, lr}
 8005efc:	4604      	mov	r4, r0
 8005efe:	e9c0 3300 	strd	r3, r3, [r0]
 8005f02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f06:	6083      	str	r3, [r0, #8]
 8005f08:	8181      	strh	r1, [r0, #12]
 8005f0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f0c:	81c2      	strh	r2, [r0, #14]
 8005f0e:	6183      	str	r3, [r0, #24]
 8005f10:	4619      	mov	r1, r3
 8005f12:	2208      	movs	r2, #8
 8005f14:	305c      	adds	r0, #92	@ 0x5c
 8005f16:	f000 f916 	bl	8006146 <memset>
 8005f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f50 <std+0x58>)
 8005f1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f54 <std+0x5c>)
 8005f20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f22:	4b0d      	ldr	r3, [pc, #52]	@ (8005f58 <std+0x60>)
 8005f24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f26:	4b0d      	ldr	r3, [pc, #52]	@ (8005f5c <std+0x64>)
 8005f28:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f60 <std+0x68>)
 8005f2c:	6224      	str	r4, [r4, #32]
 8005f2e:	429c      	cmp	r4, r3
 8005f30:	d006      	beq.n	8005f40 <std+0x48>
 8005f32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f36:	4294      	cmp	r4, r2
 8005f38:	d002      	beq.n	8005f40 <std+0x48>
 8005f3a:	33d0      	adds	r3, #208	@ 0xd0
 8005f3c:	429c      	cmp	r4, r3
 8005f3e:	d105      	bne.n	8005f4c <std+0x54>
 8005f40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f48:	f000 b97a 	b.w	8006240 <__retarget_lock_init_recursive>
 8005f4c:	bd10      	pop	{r4, pc}
 8005f4e:	bf00      	nop
 8005f50:	080060c1 	.word	0x080060c1
 8005f54:	080060e3 	.word	0x080060e3
 8005f58:	0800611b 	.word	0x0800611b
 8005f5c:	0800613f 	.word	0x0800613f
 8005f60:	20000424 	.word	0x20000424

08005f64 <stdio_exit_handler>:
 8005f64:	4a02      	ldr	r2, [pc, #8]	@ (8005f70 <stdio_exit_handler+0xc>)
 8005f66:	4903      	ldr	r1, [pc, #12]	@ (8005f74 <stdio_exit_handler+0x10>)
 8005f68:	4803      	ldr	r0, [pc, #12]	@ (8005f78 <stdio_exit_handler+0x14>)
 8005f6a:	f000 b869 	b.w	8006040 <_fwalk_sglue>
 8005f6e:	bf00      	nop
 8005f70:	2000005c 	.word	0x2000005c
 8005f74:	08007bc5 	.word	0x08007bc5
 8005f78:	2000006c 	.word	0x2000006c

08005f7c <cleanup_stdio>:
 8005f7c:	6841      	ldr	r1, [r0, #4]
 8005f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb0 <cleanup_stdio+0x34>)
 8005f80:	4299      	cmp	r1, r3
 8005f82:	b510      	push	{r4, lr}
 8005f84:	4604      	mov	r4, r0
 8005f86:	d001      	beq.n	8005f8c <cleanup_stdio+0x10>
 8005f88:	f001 fe1c 	bl	8007bc4 <_fflush_r>
 8005f8c:	68a1      	ldr	r1, [r4, #8]
 8005f8e:	4b09      	ldr	r3, [pc, #36]	@ (8005fb4 <cleanup_stdio+0x38>)
 8005f90:	4299      	cmp	r1, r3
 8005f92:	d002      	beq.n	8005f9a <cleanup_stdio+0x1e>
 8005f94:	4620      	mov	r0, r4
 8005f96:	f001 fe15 	bl	8007bc4 <_fflush_r>
 8005f9a:	68e1      	ldr	r1, [r4, #12]
 8005f9c:	4b06      	ldr	r3, [pc, #24]	@ (8005fb8 <cleanup_stdio+0x3c>)
 8005f9e:	4299      	cmp	r1, r3
 8005fa0:	d004      	beq.n	8005fac <cleanup_stdio+0x30>
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fa8:	f001 be0c 	b.w	8007bc4 <_fflush_r>
 8005fac:	bd10      	pop	{r4, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000424 	.word	0x20000424
 8005fb4:	2000048c 	.word	0x2000048c
 8005fb8:	200004f4 	.word	0x200004f4

08005fbc <global_stdio_init.part.0>:
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8005fec <global_stdio_init.part.0+0x30>)
 8005fc0:	4c0b      	ldr	r4, [pc, #44]	@ (8005ff0 <global_stdio_init.part.0+0x34>)
 8005fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8005ff4 <global_stdio_init.part.0+0x38>)
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2104      	movs	r1, #4
 8005fcc:	f7ff ff94 	bl	8005ef8 <std>
 8005fd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	2109      	movs	r1, #9
 8005fd8:	f7ff ff8e 	bl	8005ef8 <std>
 8005fdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fe6:	2112      	movs	r1, #18
 8005fe8:	f7ff bf86 	b.w	8005ef8 <std>
 8005fec:	2000055c 	.word	0x2000055c
 8005ff0:	20000424 	.word	0x20000424
 8005ff4:	08005f65 	.word	0x08005f65

08005ff8 <__sfp_lock_acquire>:
 8005ff8:	4801      	ldr	r0, [pc, #4]	@ (8006000 <__sfp_lock_acquire+0x8>)
 8005ffa:	f000 b922 	b.w	8006242 <__retarget_lock_acquire_recursive>
 8005ffe:	bf00      	nop
 8006000:	20000565 	.word	0x20000565

08006004 <__sfp_lock_release>:
 8006004:	4801      	ldr	r0, [pc, #4]	@ (800600c <__sfp_lock_release+0x8>)
 8006006:	f000 b91d 	b.w	8006244 <__retarget_lock_release_recursive>
 800600a:	bf00      	nop
 800600c:	20000565 	.word	0x20000565

08006010 <__sinit>:
 8006010:	b510      	push	{r4, lr}
 8006012:	4604      	mov	r4, r0
 8006014:	f7ff fff0 	bl	8005ff8 <__sfp_lock_acquire>
 8006018:	6a23      	ldr	r3, [r4, #32]
 800601a:	b11b      	cbz	r3, 8006024 <__sinit+0x14>
 800601c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006020:	f7ff bff0 	b.w	8006004 <__sfp_lock_release>
 8006024:	4b04      	ldr	r3, [pc, #16]	@ (8006038 <__sinit+0x28>)
 8006026:	6223      	str	r3, [r4, #32]
 8006028:	4b04      	ldr	r3, [pc, #16]	@ (800603c <__sinit+0x2c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1f5      	bne.n	800601c <__sinit+0xc>
 8006030:	f7ff ffc4 	bl	8005fbc <global_stdio_init.part.0>
 8006034:	e7f2      	b.n	800601c <__sinit+0xc>
 8006036:	bf00      	nop
 8006038:	08005f7d 	.word	0x08005f7d
 800603c:	2000055c 	.word	0x2000055c

08006040 <_fwalk_sglue>:
 8006040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006044:	4607      	mov	r7, r0
 8006046:	4688      	mov	r8, r1
 8006048:	4614      	mov	r4, r2
 800604a:	2600      	movs	r6, #0
 800604c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006050:	f1b9 0901 	subs.w	r9, r9, #1
 8006054:	d505      	bpl.n	8006062 <_fwalk_sglue+0x22>
 8006056:	6824      	ldr	r4, [r4, #0]
 8006058:	2c00      	cmp	r4, #0
 800605a:	d1f7      	bne.n	800604c <_fwalk_sglue+0xc>
 800605c:	4630      	mov	r0, r6
 800605e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006062:	89ab      	ldrh	r3, [r5, #12]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d907      	bls.n	8006078 <_fwalk_sglue+0x38>
 8006068:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800606c:	3301      	adds	r3, #1
 800606e:	d003      	beq.n	8006078 <_fwalk_sglue+0x38>
 8006070:	4629      	mov	r1, r5
 8006072:	4638      	mov	r0, r7
 8006074:	47c0      	blx	r8
 8006076:	4306      	orrs	r6, r0
 8006078:	3568      	adds	r5, #104	@ 0x68
 800607a:	e7e9      	b.n	8006050 <_fwalk_sglue+0x10>

0800607c <siprintf>:
 800607c:	b40e      	push	{r1, r2, r3}
 800607e:	b510      	push	{r4, lr}
 8006080:	b09d      	sub	sp, #116	@ 0x74
 8006082:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006084:	9002      	str	r0, [sp, #8]
 8006086:	9006      	str	r0, [sp, #24]
 8006088:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800608c:	480a      	ldr	r0, [pc, #40]	@ (80060b8 <siprintf+0x3c>)
 800608e:	9107      	str	r1, [sp, #28]
 8006090:	9104      	str	r1, [sp, #16]
 8006092:	490a      	ldr	r1, [pc, #40]	@ (80060bc <siprintf+0x40>)
 8006094:	f853 2b04 	ldr.w	r2, [r3], #4
 8006098:	9105      	str	r1, [sp, #20]
 800609a:	2400      	movs	r4, #0
 800609c:	a902      	add	r1, sp, #8
 800609e:	6800      	ldr	r0, [r0, #0]
 80060a0:	9301      	str	r3, [sp, #4]
 80060a2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80060a4:	f001 fc0e 	bl	80078c4 <_svfiprintf_r>
 80060a8:	9b02      	ldr	r3, [sp, #8]
 80060aa:	701c      	strb	r4, [r3, #0]
 80060ac:	b01d      	add	sp, #116	@ 0x74
 80060ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060b2:	b003      	add	sp, #12
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	20000068 	.word	0x20000068
 80060bc:	ffff0208 	.word	0xffff0208

080060c0 <__sread>:
 80060c0:	b510      	push	{r4, lr}
 80060c2:	460c      	mov	r4, r1
 80060c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c8:	f000 f86c 	bl	80061a4 <_read_r>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	bfab      	itete	ge
 80060d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060d2:	89a3      	ldrhlt	r3, [r4, #12]
 80060d4:	181b      	addge	r3, r3, r0
 80060d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060da:	bfac      	ite	ge
 80060dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060de:	81a3      	strhlt	r3, [r4, #12]
 80060e0:	bd10      	pop	{r4, pc}

080060e2 <__swrite>:
 80060e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060e6:	461f      	mov	r7, r3
 80060e8:	898b      	ldrh	r3, [r1, #12]
 80060ea:	05db      	lsls	r3, r3, #23
 80060ec:	4605      	mov	r5, r0
 80060ee:	460c      	mov	r4, r1
 80060f0:	4616      	mov	r6, r2
 80060f2:	d505      	bpl.n	8006100 <__swrite+0x1e>
 80060f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f8:	2302      	movs	r3, #2
 80060fa:	2200      	movs	r2, #0
 80060fc:	f000 f840 	bl	8006180 <_lseek_r>
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006106:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800610a:	81a3      	strh	r3, [r4, #12]
 800610c:	4632      	mov	r2, r6
 800610e:	463b      	mov	r3, r7
 8006110:	4628      	mov	r0, r5
 8006112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006116:	f000 b857 	b.w	80061c8 <_write_r>

0800611a <__sseek>:
 800611a:	b510      	push	{r4, lr}
 800611c:	460c      	mov	r4, r1
 800611e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006122:	f000 f82d 	bl	8006180 <_lseek_r>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	bf15      	itete	ne
 800612c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800612e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006132:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006136:	81a3      	strheq	r3, [r4, #12]
 8006138:	bf18      	it	ne
 800613a:	81a3      	strhne	r3, [r4, #12]
 800613c:	bd10      	pop	{r4, pc}

0800613e <__sclose>:
 800613e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006142:	f000 b80d 	b.w	8006160 <_close_r>

08006146 <memset>:
 8006146:	4402      	add	r2, r0
 8006148:	4603      	mov	r3, r0
 800614a:	4293      	cmp	r3, r2
 800614c:	d100      	bne.n	8006150 <memset+0xa>
 800614e:	4770      	bx	lr
 8006150:	f803 1b01 	strb.w	r1, [r3], #1
 8006154:	e7f9      	b.n	800614a <memset+0x4>
	...

08006158 <_localeconv_r>:
 8006158:	4800      	ldr	r0, [pc, #0]	@ (800615c <_localeconv_r+0x4>)
 800615a:	4770      	bx	lr
 800615c:	200001a8 	.word	0x200001a8

08006160 <_close_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4d06      	ldr	r5, [pc, #24]	@ (800617c <_close_r+0x1c>)
 8006164:	2300      	movs	r3, #0
 8006166:	4604      	mov	r4, r0
 8006168:	4608      	mov	r0, r1
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	f7fb faf2 	bl	8001754 <_close>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_close_r+0x1a>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	b103      	cbz	r3, 800617a <_close_r+0x1a>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	20000560 	.word	0x20000560

08006180 <_lseek_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4d07      	ldr	r5, [pc, #28]	@ (80061a0 <_lseek_r+0x20>)
 8006184:	4604      	mov	r4, r0
 8006186:	4608      	mov	r0, r1
 8006188:	4611      	mov	r1, r2
 800618a:	2200      	movs	r2, #0
 800618c:	602a      	str	r2, [r5, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	f7fb fb07 	bl	80017a2 <_lseek>
 8006194:	1c43      	adds	r3, r0, #1
 8006196:	d102      	bne.n	800619e <_lseek_r+0x1e>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	b103      	cbz	r3, 800619e <_lseek_r+0x1e>
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	bd38      	pop	{r3, r4, r5, pc}
 80061a0:	20000560 	.word	0x20000560

080061a4 <_read_r>:
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	4d07      	ldr	r5, [pc, #28]	@ (80061c4 <_read_r+0x20>)
 80061a8:	4604      	mov	r4, r0
 80061aa:	4608      	mov	r0, r1
 80061ac:	4611      	mov	r1, r2
 80061ae:	2200      	movs	r2, #0
 80061b0:	602a      	str	r2, [r5, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	f7fb fa95 	bl	80016e2 <_read>
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	d102      	bne.n	80061c2 <_read_r+0x1e>
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	b103      	cbz	r3, 80061c2 <_read_r+0x1e>
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	bd38      	pop	{r3, r4, r5, pc}
 80061c4:	20000560 	.word	0x20000560

080061c8 <_write_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	4d07      	ldr	r5, [pc, #28]	@ (80061e8 <_write_r+0x20>)
 80061cc:	4604      	mov	r4, r0
 80061ce:	4608      	mov	r0, r1
 80061d0:	4611      	mov	r1, r2
 80061d2:	2200      	movs	r2, #0
 80061d4:	602a      	str	r2, [r5, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	f7fb faa0 	bl	800171c <_write>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_write_r+0x1e>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_write_r+0x1e>
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	20000560 	.word	0x20000560

080061ec <__errno>:
 80061ec:	4b01      	ldr	r3, [pc, #4]	@ (80061f4 <__errno+0x8>)
 80061ee:	6818      	ldr	r0, [r3, #0]
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	20000068 	.word	0x20000068

080061f8 <__libc_init_array>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	4d0d      	ldr	r5, [pc, #52]	@ (8006230 <__libc_init_array+0x38>)
 80061fc:	4c0d      	ldr	r4, [pc, #52]	@ (8006234 <__libc_init_array+0x3c>)
 80061fe:	1b64      	subs	r4, r4, r5
 8006200:	10a4      	asrs	r4, r4, #2
 8006202:	2600      	movs	r6, #0
 8006204:	42a6      	cmp	r6, r4
 8006206:	d109      	bne.n	800621c <__libc_init_array+0x24>
 8006208:	4d0b      	ldr	r5, [pc, #44]	@ (8006238 <__libc_init_array+0x40>)
 800620a:	4c0c      	ldr	r4, [pc, #48]	@ (800623c <__libc_init_array+0x44>)
 800620c:	f002 f86a 	bl	80082e4 <_init>
 8006210:	1b64      	subs	r4, r4, r5
 8006212:	10a4      	asrs	r4, r4, #2
 8006214:	2600      	movs	r6, #0
 8006216:	42a6      	cmp	r6, r4
 8006218:	d105      	bne.n	8006226 <__libc_init_array+0x2e>
 800621a:	bd70      	pop	{r4, r5, r6, pc}
 800621c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006220:	4798      	blx	r3
 8006222:	3601      	adds	r6, #1
 8006224:	e7ee      	b.n	8006204 <__libc_init_array+0xc>
 8006226:	f855 3b04 	ldr.w	r3, [r5], #4
 800622a:	4798      	blx	r3
 800622c:	3601      	adds	r6, #1
 800622e:	e7f2      	b.n	8006216 <__libc_init_array+0x1e>
 8006230:	080086fc 	.word	0x080086fc
 8006234:	080086fc 	.word	0x080086fc
 8006238:	080086fc 	.word	0x080086fc
 800623c:	08008700 	.word	0x08008700

08006240 <__retarget_lock_init_recursive>:
 8006240:	4770      	bx	lr

08006242 <__retarget_lock_acquire_recursive>:
 8006242:	4770      	bx	lr

08006244 <__retarget_lock_release_recursive>:
 8006244:	4770      	bx	lr

08006246 <memcpy>:
 8006246:	440a      	add	r2, r1
 8006248:	4291      	cmp	r1, r2
 800624a:	f100 33ff 	add.w	r3, r0, #4294967295
 800624e:	d100      	bne.n	8006252 <memcpy+0xc>
 8006250:	4770      	bx	lr
 8006252:	b510      	push	{r4, lr}
 8006254:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006258:	f803 4f01 	strb.w	r4, [r3, #1]!
 800625c:	4291      	cmp	r1, r2
 800625e:	d1f9      	bne.n	8006254 <memcpy+0xe>
 8006260:	bd10      	pop	{r4, pc}

08006262 <quorem>:
 8006262:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006266:	6903      	ldr	r3, [r0, #16]
 8006268:	690c      	ldr	r4, [r1, #16]
 800626a:	42a3      	cmp	r3, r4
 800626c:	4607      	mov	r7, r0
 800626e:	db7e      	blt.n	800636e <quorem+0x10c>
 8006270:	3c01      	subs	r4, #1
 8006272:	f101 0814 	add.w	r8, r1, #20
 8006276:	00a3      	lsls	r3, r4, #2
 8006278:	f100 0514 	add.w	r5, r0, #20
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006282:	9301      	str	r3, [sp, #4]
 8006284:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006288:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800628c:	3301      	adds	r3, #1
 800628e:	429a      	cmp	r2, r3
 8006290:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006294:	fbb2 f6f3 	udiv	r6, r2, r3
 8006298:	d32e      	bcc.n	80062f8 <quorem+0x96>
 800629a:	f04f 0a00 	mov.w	sl, #0
 800629e:	46c4      	mov	ip, r8
 80062a0:	46ae      	mov	lr, r5
 80062a2:	46d3      	mov	fp, sl
 80062a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80062a8:	b298      	uxth	r0, r3
 80062aa:	fb06 a000 	mla	r0, r6, r0, sl
 80062ae:	0c02      	lsrs	r2, r0, #16
 80062b0:	0c1b      	lsrs	r3, r3, #16
 80062b2:	fb06 2303 	mla	r3, r6, r3, r2
 80062b6:	f8de 2000 	ldr.w	r2, [lr]
 80062ba:	b280      	uxth	r0, r0
 80062bc:	b292      	uxth	r2, r2
 80062be:	1a12      	subs	r2, r2, r0
 80062c0:	445a      	add	r2, fp
 80062c2:	f8de 0000 	ldr.w	r0, [lr]
 80062c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80062d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80062d4:	b292      	uxth	r2, r2
 80062d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80062da:	45e1      	cmp	r9, ip
 80062dc:	f84e 2b04 	str.w	r2, [lr], #4
 80062e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80062e4:	d2de      	bcs.n	80062a4 <quorem+0x42>
 80062e6:	9b00      	ldr	r3, [sp, #0]
 80062e8:	58eb      	ldr	r3, [r5, r3]
 80062ea:	b92b      	cbnz	r3, 80062f8 <quorem+0x96>
 80062ec:	9b01      	ldr	r3, [sp, #4]
 80062ee:	3b04      	subs	r3, #4
 80062f0:	429d      	cmp	r5, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	d32f      	bcc.n	8006356 <quorem+0xf4>
 80062f6:	613c      	str	r4, [r7, #16]
 80062f8:	4638      	mov	r0, r7
 80062fa:	f001 f97f 	bl	80075fc <__mcmp>
 80062fe:	2800      	cmp	r0, #0
 8006300:	db25      	blt.n	800634e <quorem+0xec>
 8006302:	4629      	mov	r1, r5
 8006304:	2000      	movs	r0, #0
 8006306:	f858 2b04 	ldr.w	r2, [r8], #4
 800630a:	f8d1 c000 	ldr.w	ip, [r1]
 800630e:	fa1f fe82 	uxth.w	lr, r2
 8006312:	fa1f f38c 	uxth.w	r3, ip
 8006316:	eba3 030e 	sub.w	r3, r3, lr
 800631a:	4403      	add	r3, r0
 800631c:	0c12      	lsrs	r2, r2, #16
 800631e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006322:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006326:	b29b      	uxth	r3, r3
 8006328:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800632c:	45c1      	cmp	r9, r8
 800632e:	f841 3b04 	str.w	r3, [r1], #4
 8006332:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006336:	d2e6      	bcs.n	8006306 <quorem+0xa4>
 8006338:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800633c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006340:	b922      	cbnz	r2, 800634c <quorem+0xea>
 8006342:	3b04      	subs	r3, #4
 8006344:	429d      	cmp	r5, r3
 8006346:	461a      	mov	r2, r3
 8006348:	d30b      	bcc.n	8006362 <quorem+0x100>
 800634a:	613c      	str	r4, [r7, #16]
 800634c:	3601      	adds	r6, #1
 800634e:	4630      	mov	r0, r6
 8006350:	b003      	add	sp, #12
 8006352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006356:	6812      	ldr	r2, [r2, #0]
 8006358:	3b04      	subs	r3, #4
 800635a:	2a00      	cmp	r2, #0
 800635c:	d1cb      	bne.n	80062f6 <quorem+0x94>
 800635e:	3c01      	subs	r4, #1
 8006360:	e7c6      	b.n	80062f0 <quorem+0x8e>
 8006362:	6812      	ldr	r2, [r2, #0]
 8006364:	3b04      	subs	r3, #4
 8006366:	2a00      	cmp	r2, #0
 8006368:	d1ef      	bne.n	800634a <quorem+0xe8>
 800636a:	3c01      	subs	r4, #1
 800636c:	e7ea      	b.n	8006344 <quorem+0xe2>
 800636e:	2000      	movs	r0, #0
 8006370:	e7ee      	b.n	8006350 <quorem+0xee>
 8006372:	0000      	movs	r0, r0
 8006374:	0000      	movs	r0, r0
	...

08006378 <_dtoa_r>:
 8006378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	69c7      	ldr	r7, [r0, #28]
 800637e:	b097      	sub	sp, #92	@ 0x5c
 8006380:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006384:	ec55 4b10 	vmov	r4, r5, d0
 8006388:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800638a:	9107      	str	r1, [sp, #28]
 800638c:	4681      	mov	r9, r0
 800638e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006390:	9311      	str	r3, [sp, #68]	@ 0x44
 8006392:	b97f      	cbnz	r7, 80063b4 <_dtoa_r+0x3c>
 8006394:	2010      	movs	r0, #16
 8006396:	f000 fe09 	bl	8006fac <malloc>
 800639a:	4602      	mov	r2, r0
 800639c:	f8c9 001c 	str.w	r0, [r9, #28]
 80063a0:	b920      	cbnz	r0, 80063ac <_dtoa_r+0x34>
 80063a2:	4ba9      	ldr	r3, [pc, #676]	@ (8006648 <_dtoa_r+0x2d0>)
 80063a4:	21ef      	movs	r1, #239	@ 0xef
 80063a6:	48a9      	ldr	r0, [pc, #676]	@ (800664c <_dtoa_r+0x2d4>)
 80063a8:	f001 fc5e 	bl	8007c68 <__assert_func>
 80063ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80063b0:	6007      	str	r7, [r0, #0]
 80063b2:	60c7      	str	r7, [r0, #12]
 80063b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80063b8:	6819      	ldr	r1, [r3, #0]
 80063ba:	b159      	cbz	r1, 80063d4 <_dtoa_r+0x5c>
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	604a      	str	r2, [r1, #4]
 80063c0:	2301      	movs	r3, #1
 80063c2:	4093      	lsls	r3, r2
 80063c4:	608b      	str	r3, [r1, #8]
 80063c6:	4648      	mov	r0, r9
 80063c8:	f000 fee6 	bl	8007198 <_Bfree>
 80063cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	1e2b      	subs	r3, r5, #0
 80063d6:	bfb9      	ittee	lt
 80063d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80063dc:	9305      	strlt	r3, [sp, #20]
 80063de:	2300      	movge	r3, #0
 80063e0:	6033      	strge	r3, [r6, #0]
 80063e2:	9f05      	ldr	r7, [sp, #20]
 80063e4:	4b9a      	ldr	r3, [pc, #616]	@ (8006650 <_dtoa_r+0x2d8>)
 80063e6:	bfbc      	itt	lt
 80063e8:	2201      	movlt	r2, #1
 80063ea:	6032      	strlt	r2, [r6, #0]
 80063ec:	43bb      	bics	r3, r7
 80063ee:	d112      	bne.n	8006416 <_dtoa_r+0x9e>
 80063f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80063f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80063fc:	4323      	orrs	r3, r4
 80063fe:	f000 855a 	beq.w	8006eb6 <_dtoa_r+0xb3e>
 8006402:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006404:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006664 <_dtoa_r+0x2ec>
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 855c 	beq.w	8006ec6 <_dtoa_r+0xb4e>
 800640e:	f10a 0303 	add.w	r3, sl, #3
 8006412:	f000 bd56 	b.w	8006ec2 <_dtoa_r+0xb4a>
 8006416:	ed9d 7b04 	vldr	d7, [sp, #16]
 800641a:	2200      	movs	r2, #0
 800641c:	ec51 0b17 	vmov	r0, r1, d7
 8006420:	2300      	movs	r3, #0
 8006422:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006426:	f7fa fb4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800642a:	4680      	mov	r8, r0
 800642c:	b158      	cbz	r0, 8006446 <_dtoa_r+0xce>
 800642e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006430:	2301      	movs	r3, #1
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006436:	b113      	cbz	r3, 800643e <_dtoa_r+0xc6>
 8006438:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800643a:	4b86      	ldr	r3, [pc, #536]	@ (8006654 <_dtoa_r+0x2dc>)
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006668 <_dtoa_r+0x2f0>
 8006442:	f000 bd40 	b.w	8006ec6 <_dtoa_r+0xb4e>
 8006446:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800644a:	aa14      	add	r2, sp, #80	@ 0x50
 800644c:	a915      	add	r1, sp, #84	@ 0x54
 800644e:	4648      	mov	r0, r9
 8006450:	f001 f984 	bl	800775c <__d2b>
 8006454:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006458:	9002      	str	r0, [sp, #8]
 800645a:	2e00      	cmp	r6, #0
 800645c:	d078      	beq.n	8006550 <_dtoa_r+0x1d8>
 800645e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006460:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006468:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800646c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006470:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006474:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006478:	4619      	mov	r1, r3
 800647a:	2200      	movs	r2, #0
 800647c:	4b76      	ldr	r3, [pc, #472]	@ (8006658 <_dtoa_r+0x2e0>)
 800647e:	f7f9 ff03 	bl	8000288 <__aeabi_dsub>
 8006482:	a36b      	add	r3, pc, #428	@ (adr r3, 8006630 <_dtoa_r+0x2b8>)
 8006484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006488:	f7fa f8b6 	bl	80005f8 <__aeabi_dmul>
 800648c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006638 <_dtoa_r+0x2c0>)
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f7f9 fefb 	bl	800028c <__adddf3>
 8006496:	4604      	mov	r4, r0
 8006498:	4630      	mov	r0, r6
 800649a:	460d      	mov	r5, r1
 800649c:	f7fa f842 	bl	8000524 <__aeabi_i2d>
 80064a0:	a367      	add	r3, pc, #412	@ (adr r3, 8006640 <_dtoa_r+0x2c8>)
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f7fa f8a7 	bl	80005f8 <__aeabi_dmul>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4620      	mov	r0, r4
 80064b0:	4629      	mov	r1, r5
 80064b2:	f7f9 feeb 	bl	800028c <__adddf3>
 80064b6:	4604      	mov	r4, r0
 80064b8:	460d      	mov	r5, r1
 80064ba:	f7fa fb4d 	bl	8000b58 <__aeabi_d2iz>
 80064be:	2200      	movs	r2, #0
 80064c0:	4607      	mov	r7, r0
 80064c2:	2300      	movs	r3, #0
 80064c4:	4620      	mov	r0, r4
 80064c6:	4629      	mov	r1, r5
 80064c8:	f7fa fb08 	bl	8000adc <__aeabi_dcmplt>
 80064cc:	b140      	cbz	r0, 80064e0 <_dtoa_r+0x168>
 80064ce:	4638      	mov	r0, r7
 80064d0:	f7fa f828 	bl	8000524 <__aeabi_i2d>
 80064d4:	4622      	mov	r2, r4
 80064d6:	462b      	mov	r3, r5
 80064d8:	f7fa faf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80064dc:	b900      	cbnz	r0, 80064e0 <_dtoa_r+0x168>
 80064de:	3f01      	subs	r7, #1
 80064e0:	2f16      	cmp	r7, #22
 80064e2:	d852      	bhi.n	800658a <_dtoa_r+0x212>
 80064e4:	4b5d      	ldr	r3, [pc, #372]	@ (800665c <_dtoa_r+0x2e4>)
 80064e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80064ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064f2:	f7fa faf3 	bl	8000adc <__aeabi_dcmplt>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	d049      	beq.n	800658e <_dtoa_r+0x216>
 80064fa:	3f01      	subs	r7, #1
 80064fc:	2300      	movs	r3, #0
 80064fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8006500:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006502:	1b9b      	subs	r3, r3, r6
 8006504:	1e5a      	subs	r2, r3, #1
 8006506:	bf45      	ittet	mi
 8006508:	f1c3 0301 	rsbmi	r3, r3, #1
 800650c:	9300      	strmi	r3, [sp, #0]
 800650e:	2300      	movpl	r3, #0
 8006510:	2300      	movmi	r3, #0
 8006512:	9206      	str	r2, [sp, #24]
 8006514:	bf54      	ite	pl
 8006516:	9300      	strpl	r3, [sp, #0]
 8006518:	9306      	strmi	r3, [sp, #24]
 800651a:	2f00      	cmp	r7, #0
 800651c:	db39      	blt.n	8006592 <_dtoa_r+0x21a>
 800651e:	9b06      	ldr	r3, [sp, #24]
 8006520:	970d      	str	r7, [sp, #52]	@ 0x34
 8006522:	443b      	add	r3, r7
 8006524:	9306      	str	r3, [sp, #24]
 8006526:	2300      	movs	r3, #0
 8006528:	9308      	str	r3, [sp, #32]
 800652a:	9b07      	ldr	r3, [sp, #28]
 800652c:	2b09      	cmp	r3, #9
 800652e:	d863      	bhi.n	80065f8 <_dtoa_r+0x280>
 8006530:	2b05      	cmp	r3, #5
 8006532:	bfc4      	itt	gt
 8006534:	3b04      	subgt	r3, #4
 8006536:	9307      	strgt	r3, [sp, #28]
 8006538:	9b07      	ldr	r3, [sp, #28]
 800653a:	f1a3 0302 	sub.w	r3, r3, #2
 800653e:	bfcc      	ite	gt
 8006540:	2400      	movgt	r4, #0
 8006542:	2401      	movle	r4, #1
 8006544:	2b03      	cmp	r3, #3
 8006546:	d863      	bhi.n	8006610 <_dtoa_r+0x298>
 8006548:	e8df f003 	tbb	[pc, r3]
 800654c:	2b375452 	.word	0x2b375452
 8006550:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006554:	441e      	add	r6, r3
 8006556:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800655a:	2b20      	cmp	r3, #32
 800655c:	bfc1      	itttt	gt
 800655e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006562:	409f      	lslgt	r7, r3
 8006564:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006568:	fa24 f303 	lsrgt.w	r3, r4, r3
 800656c:	bfd6      	itet	le
 800656e:	f1c3 0320 	rsble	r3, r3, #32
 8006572:	ea47 0003 	orrgt.w	r0, r7, r3
 8006576:	fa04 f003 	lslle.w	r0, r4, r3
 800657a:	f7f9 ffc3 	bl	8000504 <__aeabi_ui2d>
 800657e:	2201      	movs	r2, #1
 8006580:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006584:	3e01      	subs	r6, #1
 8006586:	9212      	str	r2, [sp, #72]	@ 0x48
 8006588:	e776      	b.n	8006478 <_dtoa_r+0x100>
 800658a:	2301      	movs	r3, #1
 800658c:	e7b7      	b.n	80064fe <_dtoa_r+0x186>
 800658e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006590:	e7b6      	b.n	8006500 <_dtoa_r+0x188>
 8006592:	9b00      	ldr	r3, [sp, #0]
 8006594:	1bdb      	subs	r3, r3, r7
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	427b      	negs	r3, r7
 800659a:	9308      	str	r3, [sp, #32]
 800659c:	2300      	movs	r3, #0
 800659e:	930d      	str	r3, [sp, #52]	@ 0x34
 80065a0:	e7c3      	b.n	800652a <_dtoa_r+0x1b2>
 80065a2:	2301      	movs	r3, #1
 80065a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065a8:	eb07 0b03 	add.w	fp, r7, r3
 80065ac:	f10b 0301 	add.w	r3, fp, #1
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	9303      	str	r3, [sp, #12]
 80065b4:	bfb8      	it	lt
 80065b6:	2301      	movlt	r3, #1
 80065b8:	e006      	b.n	80065c8 <_dtoa_r+0x250>
 80065ba:	2301      	movs	r3, #1
 80065bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80065be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	dd28      	ble.n	8006616 <_dtoa_r+0x29e>
 80065c4:	469b      	mov	fp, r3
 80065c6:	9303      	str	r3, [sp, #12]
 80065c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80065cc:	2100      	movs	r1, #0
 80065ce:	2204      	movs	r2, #4
 80065d0:	f102 0514 	add.w	r5, r2, #20
 80065d4:	429d      	cmp	r5, r3
 80065d6:	d926      	bls.n	8006626 <_dtoa_r+0x2ae>
 80065d8:	6041      	str	r1, [r0, #4]
 80065da:	4648      	mov	r0, r9
 80065dc:	f000 fd9c 	bl	8007118 <_Balloc>
 80065e0:	4682      	mov	sl, r0
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d142      	bne.n	800666c <_dtoa_r+0x2f4>
 80065e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006660 <_dtoa_r+0x2e8>)
 80065e8:	4602      	mov	r2, r0
 80065ea:	f240 11af 	movw	r1, #431	@ 0x1af
 80065ee:	e6da      	b.n	80063a6 <_dtoa_r+0x2e>
 80065f0:	2300      	movs	r3, #0
 80065f2:	e7e3      	b.n	80065bc <_dtoa_r+0x244>
 80065f4:	2300      	movs	r3, #0
 80065f6:	e7d5      	b.n	80065a4 <_dtoa_r+0x22c>
 80065f8:	2401      	movs	r4, #1
 80065fa:	2300      	movs	r3, #0
 80065fc:	9307      	str	r3, [sp, #28]
 80065fe:	9409      	str	r4, [sp, #36]	@ 0x24
 8006600:	f04f 3bff 	mov.w	fp, #4294967295
 8006604:	2200      	movs	r2, #0
 8006606:	f8cd b00c 	str.w	fp, [sp, #12]
 800660a:	2312      	movs	r3, #18
 800660c:	920c      	str	r2, [sp, #48]	@ 0x30
 800660e:	e7db      	b.n	80065c8 <_dtoa_r+0x250>
 8006610:	2301      	movs	r3, #1
 8006612:	9309      	str	r3, [sp, #36]	@ 0x24
 8006614:	e7f4      	b.n	8006600 <_dtoa_r+0x288>
 8006616:	f04f 0b01 	mov.w	fp, #1
 800661a:	f8cd b00c 	str.w	fp, [sp, #12]
 800661e:	465b      	mov	r3, fp
 8006620:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006624:	e7d0      	b.n	80065c8 <_dtoa_r+0x250>
 8006626:	3101      	adds	r1, #1
 8006628:	0052      	lsls	r2, r2, #1
 800662a:	e7d1      	b.n	80065d0 <_dtoa_r+0x258>
 800662c:	f3af 8000 	nop.w
 8006630:	636f4361 	.word	0x636f4361
 8006634:	3fd287a7 	.word	0x3fd287a7
 8006638:	8b60c8b3 	.word	0x8b60c8b3
 800663c:	3fc68a28 	.word	0x3fc68a28
 8006640:	509f79fb 	.word	0x509f79fb
 8006644:	3fd34413 	.word	0x3fd34413
 8006648:	080083c1 	.word	0x080083c1
 800664c:	080083d8 	.word	0x080083d8
 8006650:	7ff00000 	.word	0x7ff00000
 8006654:	08008391 	.word	0x08008391
 8006658:	3ff80000 	.word	0x3ff80000
 800665c:	08008528 	.word	0x08008528
 8006660:	08008430 	.word	0x08008430
 8006664:	080083bd 	.word	0x080083bd
 8006668:	08008390 	.word	0x08008390
 800666c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006670:	6018      	str	r0, [r3, #0]
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	2b0e      	cmp	r3, #14
 8006676:	f200 80a1 	bhi.w	80067bc <_dtoa_r+0x444>
 800667a:	2c00      	cmp	r4, #0
 800667c:	f000 809e 	beq.w	80067bc <_dtoa_r+0x444>
 8006680:	2f00      	cmp	r7, #0
 8006682:	dd33      	ble.n	80066ec <_dtoa_r+0x374>
 8006684:	4b9c      	ldr	r3, [pc, #624]	@ (80068f8 <_dtoa_r+0x580>)
 8006686:	f007 020f 	and.w	r2, r7, #15
 800668a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800668e:	ed93 7b00 	vldr	d7, [r3]
 8006692:	05f8      	lsls	r0, r7, #23
 8006694:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006698:	ea4f 1427 	mov.w	r4, r7, asr #4
 800669c:	d516      	bpl.n	80066cc <_dtoa_r+0x354>
 800669e:	4b97      	ldr	r3, [pc, #604]	@ (80068fc <_dtoa_r+0x584>)
 80066a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066a8:	f7fa f8d0 	bl	800084c <__aeabi_ddiv>
 80066ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066b0:	f004 040f 	and.w	r4, r4, #15
 80066b4:	2603      	movs	r6, #3
 80066b6:	4d91      	ldr	r5, [pc, #580]	@ (80068fc <_dtoa_r+0x584>)
 80066b8:	b954      	cbnz	r4, 80066d0 <_dtoa_r+0x358>
 80066ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80066be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066c2:	f7fa f8c3 	bl	800084c <__aeabi_ddiv>
 80066c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066ca:	e028      	b.n	800671e <_dtoa_r+0x3a6>
 80066cc:	2602      	movs	r6, #2
 80066ce:	e7f2      	b.n	80066b6 <_dtoa_r+0x33e>
 80066d0:	07e1      	lsls	r1, r4, #31
 80066d2:	d508      	bpl.n	80066e6 <_dtoa_r+0x36e>
 80066d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80066d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066dc:	f7f9 ff8c 	bl	80005f8 <__aeabi_dmul>
 80066e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80066e4:	3601      	adds	r6, #1
 80066e6:	1064      	asrs	r4, r4, #1
 80066e8:	3508      	adds	r5, #8
 80066ea:	e7e5      	b.n	80066b8 <_dtoa_r+0x340>
 80066ec:	f000 80af 	beq.w	800684e <_dtoa_r+0x4d6>
 80066f0:	427c      	negs	r4, r7
 80066f2:	4b81      	ldr	r3, [pc, #516]	@ (80068f8 <_dtoa_r+0x580>)
 80066f4:	4d81      	ldr	r5, [pc, #516]	@ (80068fc <_dtoa_r+0x584>)
 80066f6:	f004 020f 	and.w	r2, r4, #15
 80066fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006706:	f7f9 ff77 	bl	80005f8 <__aeabi_dmul>
 800670a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800670e:	1124      	asrs	r4, r4, #4
 8006710:	2300      	movs	r3, #0
 8006712:	2602      	movs	r6, #2
 8006714:	2c00      	cmp	r4, #0
 8006716:	f040 808f 	bne.w	8006838 <_dtoa_r+0x4c0>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1d3      	bne.n	80066c6 <_dtoa_r+0x34e>
 800671e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006720:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 8094 	beq.w	8006852 <_dtoa_r+0x4da>
 800672a:	4b75      	ldr	r3, [pc, #468]	@ (8006900 <_dtoa_r+0x588>)
 800672c:	2200      	movs	r2, #0
 800672e:	4620      	mov	r0, r4
 8006730:	4629      	mov	r1, r5
 8006732:	f7fa f9d3 	bl	8000adc <__aeabi_dcmplt>
 8006736:	2800      	cmp	r0, #0
 8006738:	f000 808b 	beq.w	8006852 <_dtoa_r+0x4da>
 800673c:	9b03      	ldr	r3, [sp, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 8087 	beq.w	8006852 <_dtoa_r+0x4da>
 8006744:	f1bb 0f00 	cmp.w	fp, #0
 8006748:	dd34      	ble.n	80067b4 <_dtoa_r+0x43c>
 800674a:	4620      	mov	r0, r4
 800674c:	4b6d      	ldr	r3, [pc, #436]	@ (8006904 <_dtoa_r+0x58c>)
 800674e:	2200      	movs	r2, #0
 8006750:	4629      	mov	r1, r5
 8006752:	f7f9 ff51 	bl	80005f8 <__aeabi_dmul>
 8006756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800675a:	f107 38ff 	add.w	r8, r7, #4294967295
 800675e:	3601      	adds	r6, #1
 8006760:	465c      	mov	r4, fp
 8006762:	4630      	mov	r0, r6
 8006764:	f7f9 fede 	bl	8000524 <__aeabi_i2d>
 8006768:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800676c:	f7f9 ff44 	bl	80005f8 <__aeabi_dmul>
 8006770:	4b65      	ldr	r3, [pc, #404]	@ (8006908 <_dtoa_r+0x590>)
 8006772:	2200      	movs	r2, #0
 8006774:	f7f9 fd8a 	bl	800028c <__adddf3>
 8006778:	4605      	mov	r5, r0
 800677a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800677e:	2c00      	cmp	r4, #0
 8006780:	d16a      	bne.n	8006858 <_dtoa_r+0x4e0>
 8006782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006786:	4b61      	ldr	r3, [pc, #388]	@ (800690c <_dtoa_r+0x594>)
 8006788:	2200      	movs	r2, #0
 800678a:	f7f9 fd7d 	bl	8000288 <__aeabi_dsub>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006796:	462a      	mov	r2, r5
 8006798:	4633      	mov	r3, r6
 800679a:	f7fa f9bd 	bl	8000b18 <__aeabi_dcmpgt>
 800679e:	2800      	cmp	r0, #0
 80067a0:	f040 8298 	bne.w	8006cd4 <_dtoa_r+0x95c>
 80067a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067a8:	462a      	mov	r2, r5
 80067aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80067ae:	f7fa f995 	bl	8000adc <__aeabi_dcmplt>
 80067b2:	bb38      	cbnz	r0, 8006804 <_dtoa_r+0x48c>
 80067b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80067b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80067bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f2c0 8157 	blt.w	8006a72 <_dtoa_r+0x6fa>
 80067c4:	2f0e      	cmp	r7, #14
 80067c6:	f300 8154 	bgt.w	8006a72 <_dtoa_r+0x6fa>
 80067ca:	4b4b      	ldr	r3, [pc, #300]	@ (80068f8 <_dtoa_r+0x580>)
 80067cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80067d0:	ed93 7b00 	vldr	d7, [r3]
 80067d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	ed8d 7b00 	vstr	d7, [sp]
 80067dc:	f280 80e5 	bge.w	80069aa <_dtoa_r+0x632>
 80067e0:	9b03      	ldr	r3, [sp, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f300 80e1 	bgt.w	80069aa <_dtoa_r+0x632>
 80067e8:	d10c      	bne.n	8006804 <_dtoa_r+0x48c>
 80067ea:	4b48      	ldr	r3, [pc, #288]	@ (800690c <_dtoa_r+0x594>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	ec51 0b17 	vmov	r0, r1, d7
 80067f2:	f7f9 ff01 	bl	80005f8 <__aeabi_dmul>
 80067f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067fa:	f7fa f983 	bl	8000b04 <__aeabi_dcmpge>
 80067fe:	2800      	cmp	r0, #0
 8006800:	f000 8266 	beq.w	8006cd0 <_dtoa_r+0x958>
 8006804:	2400      	movs	r4, #0
 8006806:	4625      	mov	r5, r4
 8006808:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800680a:	4656      	mov	r6, sl
 800680c:	ea6f 0803 	mvn.w	r8, r3
 8006810:	2700      	movs	r7, #0
 8006812:	4621      	mov	r1, r4
 8006814:	4648      	mov	r0, r9
 8006816:	f000 fcbf 	bl	8007198 <_Bfree>
 800681a:	2d00      	cmp	r5, #0
 800681c:	f000 80bd 	beq.w	800699a <_dtoa_r+0x622>
 8006820:	b12f      	cbz	r7, 800682e <_dtoa_r+0x4b6>
 8006822:	42af      	cmp	r7, r5
 8006824:	d003      	beq.n	800682e <_dtoa_r+0x4b6>
 8006826:	4639      	mov	r1, r7
 8006828:	4648      	mov	r0, r9
 800682a:	f000 fcb5 	bl	8007198 <_Bfree>
 800682e:	4629      	mov	r1, r5
 8006830:	4648      	mov	r0, r9
 8006832:	f000 fcb1 	bl	8007198 <_Bfree>
 8006836:	e0b0      	b.n	800699a <_dtoa_r+0x622>
 8006838:	07e2      	lsls	r2, r4, #31
 800683a:	d505      	bpl.n	8006848 <_dtoa_r+0x4d0>
 800683c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006840:	f7f9 feda 	bl	80005f8 <__aeabi_dmul>
 8006844:	3601      	adds	r6, #1
 8006846:	2301      	movs	r3, #1
 8006848:	1064      	asrs	r4, r4, #1
 800684a:	3508      	adds	r5, #8
 800684c:	e762      	b.n	8006714 <_dtoa_r+0x39c>
 800684e:	2602      	movs	r6, #2
 8006850:	e765      	b.n	800671e <_dtoa_r+0x3a6>
 8006852:	9c03      	ldr	r4, [sp, #12]
 8006854:	46b8      	mov	r8, r7
 8006856:	e784      	b.n	8006762 <_dtoa_r+0x3ea>
 8006858:	4b27      	ldr	r3, [pc, #156]	@ (80068f8 <_dtoa_r+0x580>)
 800685a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800685c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006860:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006864:	4454      	add	r4, sl
 8006866:	2900      	cmp	r1, #0
 8006868:	d054      	beq.n	8006914 <_dtoa_r+0x59c>
 800686a:	4929      	ldr	r1, [pc, #164]	@ (8006910 <_dtoa_r+0x598>)
 800686c:	2000      	movs	r0, #0
 800686e:	f7f9 ffed 	bl	800084c <__aeabi_ddiv>
 8006872:	4633      	mov	r3, r6
 8006874:	462a      	mov	r2, r5
 8006876:	f7f9 fd07 	bl	8000288 <__aeabi_dsub>
 800687a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800687e:	4656      	mov	r6, sl
 8006880:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006884:	f7fa f968 	bl	8000b58 <__aeabi_d2iz>
 8006888:	4605      	mov	r5, r0
 800688a:	f7f9 fe4b 	bl	8000524 <__aeabi_i2d>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006896:	f7f9 fcf7 	bl	8000288 <__aeabi_dsub>
 800689a:	3530      	adds	r5, #48	@ 0x30
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068a4:	f806 5b01 	strb.w	r5, [r6], #1
 80068a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80068ac:	f7fa f916 	bl	8000adc <__aeabi_dcmplt>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d172      	bne.n	800699a <_dtoa_r+0x622>
 80068b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068b8:	4911      	ldr	r1, [pc, #68]	@ (8006900 <_dtoa_r+0x588>)
 80068ba:	2000      	movs	r0, #0
 80068bc:	f7f9 fce4 	bl	8000288 <__aeabi_dsub>
 80068c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80068c4:	f7fa f90a 	bl	8000adc <__aeabi_dcmplt>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	f040 80b4 	bne.w	8006a36 <_dtoa_r+0x6be>
 80068ce:	42a6      	cmp	r6, r4
 80068d0:	f43f af70 	beq.w	80067b4 <_dtoa_r+0x43c>
 80068d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80068d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006904 <_dtoa_r+0x58c>)
 80068da:	2200      	movs	r2, #0
 80068dc:	f7f9 fe8c 	bl	80005f8 <__aeabi_dmul>
 80068e0:	4b08      	ldr	r3, [pc, #32]	@ (8006904 <_dtoa_r+0x58c>)
 80068e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80068e6:	2200      	movs	r2, #0
 80068e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068ec:	f7f9 fe84 	bl	80005f8 <__aeabi_dmul>
 80068f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068f4:	e7c4      	b.n	8006880 <_dtoa_r+0x508>
 80068f6:	bf00      	nop
 80068f8:	08008528 	.word	0x08008528
 80068fc:	08008500 	.word	0x08008500
 8006900:	3ff00000 	.word	0x3ff00000
 8006904:	40240000 	.word	0x40240000
 8006908:	401c0000 	.word	0x401c0000
 800690c:	40140000 	.word	0x40140000
 8006910:	3fe00000 	.word	0x3fe00000
 8006914:	4631      	mov	r1, r6
 8006916:	4628      	mov	r0, r5
 8006918:	f7f9 fe6e 	bl	80005f8 <__aeabi_dmul>
 800691c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006920:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006922:	4656      	mov	r6, sl
 8006924:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006928:	f7fa f916 	bl	8000b58 <__aeabi_d2iz>
 800692c:	4605      	mov	r5, r0
 800692e:	f7f9 fdf9 	bl	8000524 <__aeabi_i2d>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800693a:	f7f9 fca5 	bl	8000288 <__aeabi_dsub>
 800693e:	3530      	adds	r5, #48	@ 0x30
 8006940:	f806 5b01 	strb.w	r5, [r6], #1
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	42a6      	cmp	r6, r4
 800694a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800694e:	f04f 0200 	mov.w	r2, #0
 8006952:	d124      	bne.n	800699e <_dtoa_r+0x626>
 8006954:	4baf      	ldr	r3, [pc, #700]	@ (8006c14 <_dtoa_r+0x89c>)
 8006956:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800695a:	f7f9 fc97 	bl	800028c <__adddf3>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006966:	f7fa f8d7 	bl	8000b18 <__aeabi_dcmpgt>
 800696a:	2800      	cmp	r0, #0
 800696c:	d163      	bne.n	8006a36 <_dtoa_r+0x6be>
 800696e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006972:	49a8      	ldr	r1, [pc, #672]	@ (8006c14 <_dtoa_r+0x89c>)
 8006974:	2000      	movs	r0, #0
 8006976:	f7f9 fc87 	bl	8000288 <__aeabi_dsub>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006982:	f7fa f8ab 	bl	8000adc <__aeabi_dcmplt>
 8006986:	2800      	cmp	r0, #0
 8006988:	f43f af14 	beq.w	80067b4 <_dtoa_r+0x43c>
 800698c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800698e:	1e73      	subs	r3, r6, #1
 8006990:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006992:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006996:	2b30      	cmp	r3, #48	@ 0x30
 8006998:	d0f8      	beq.n	800698c <_dtoa_r+0x614>
 800699a:	4647      	mov	r7, r8
 800699c:	e03b      	b.n	8006a16 <_dtoa_r+0x69e>
 800699e:	4b9e      	ldr	r3, [pc, #632]	@ (8006c18 <_dtoa_r+0x8a0>)
 80069a0:	f7f9 fe2a 	bl	80005f8 <__aeabi_dmul>
 80069a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069a8:	e7bc      	b.n	8006924 <_dtoa_r+0x5ac>
 80069aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80069ae:	4656      	mov	r6, sl
 80069b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069b4:	4620      	mov	r0, r4
 80069b6:	4629      	mov	r1, r5
 80069b8:	f7f9 ff48 	bl	800084c <__aeabi_ddiv>
 80069bc:	f7fa f8cc 	bl	8000b58 <__aeabi_d2iz>
 80069c0:	4680      	mov	r8, r0
 80069c2:	f7f9 fdaf 	bl	8000524 <__aeabi_i2d>
 80069c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069ca:	f7f9 fe15 	bl	80005f8 <__aeabi_dmul>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4620      	mov	r0, r4
 80069d4:	4629      	mov	r1, r5
 80069d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80069da:	f7f9 fc55 	bl	8000288 <__aeabi_dsub>
 80069de:	f806 4b01 	strb.w	r4, [r6], #1
 80069e2:	9d03      	ldr	r5, [sp, #12]
 80069e4:	eba6 040a 	sub.w	r4, r6, sl
 80069e8:	42a5      	cmp	r5, r4
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	d133      	bne.n	8006a58 <_dtoa_r+0x6e0>
 80069f0:	f7f9 fc4c 	bl	800028c <__adddf3>
 80069f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069f8:	4604      	mov	r4, r0
 80069fa:	460d      	mov	r5, r1
 80069fc:	f7fa f88c 	bl	8000b18 <__aeabi_dcmpgt>
 8006a00:	b9c0      	cbnz	r0, 8006a34 <_dtoa_r+0x6bc>
 8006a02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a06:	4620      	mov	r0, r4
 8006a08:	4629      	mov	r1, r5
 8006a0a:	f7fa f85d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a0e:	b110      	cbz	r0, 8006a16 <_dtoa_r+0x69e>
 8006a10:	f018 0f01 	tst.w	r8, #1
 8006a14:	d10e      	bne.n	8006a34 <_dtoa_r+0x6bc>
 8006a16:	9902      	ldr	r1, [sp, #8]
 8006a18:	4648      	mov	r0, r9
 8006a1a:	f000 fbbd 	bl	8007198 <_Bfree>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	7033      	strb	r3, [r6, #0]
 8006a22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a24:	3701      	adds	r7, #1
 8006a26:	601f      	str	r7, [r3, #0]
 8006a28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 824b 	beq.w	8006ec6 <_dtoa_r+0xb4e>
 8006a30:	601e      	str	r6, [r3, #0]
 8006a32:	e248      	b.n	8006ec6 <_dtoa_r+0xb4e>
 8006a34:	46b8      	mov	r8, r7
 8006a36:	4633      	mov	r3, r6
 8006a38:	461e      	mov	r6, r3
 8006a3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a3e:	2a39      	cmp	r2, #57	@ 0x39
 8006a40:	d106      	bne.n	8006a50 <_dtoa_r+0x6d8>
 8006a42:	459a      	cmp	sl, r3
 8006a44:	d1f8      	bne.n	8006a38 <_dtoa_r+0x6c0>
 8006a46:	2230      	movs	r2, #48	@ 0x30
 8006a48:	f108 0801 	add.w	r8, r8, #1
 8006a4c:	f88a 2000 	strb.w	r2, [sl]
 8006a50:	781a      	ldrb	r2, [r3, #0]
 8006a52:	3201      	adds	r2, #1
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	e7a0      	b.n	800699a <_dtoa_r+0x622>
 8006a58:	4b6f      	ldr	r3, [pc, #444]	@ (8006c18 <_dtoa_r+0x8a0>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f7f9 fdcc 	bl	80005f8 <__aeabi_dmul>
 8006a60:	2200      	movs	r2, #0
 8006a62:	2300      	movs	r3, #0
 8006a64:	4604      	mov	r4, r0
 8006a66:	460d      	mov	r5, r1
 8006a68:	f7fa f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d09f      	beq.n	80069b0 <_dtoa_r+0x638>
 8006a70:	e7d1      	b.n	8006a16 <_dtoa_r+0x69e>
 8006a72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a74:	2a00      	cmp	r2, #0
 8006a76:	f000 80ea 	beq.w	8006c4e <_dtoa_r+0x8d6>
 8006a7a:	9a07      	ldr	r2, [sp, #28]
 8006a7c:	2a01      	cmp	r2, #1
 8006a7e:	f300 80cd 	bgt.w	8006c1c <_dtoa_r+0x8a4>
 8006a82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006a84:	2a00      	cmp	r2, #0
 8006a86:	f000 80c1 	beq.w	8006c0c <_dtoa_r+0x894>
 8006a8a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006a8e:	9c08      	ldr	r4, [sp, #32]
 8006a90:	9e00      	ldr	r6, [sp, #0]
 8006a92:	9a00      	ldr	r2, [sp, #0]
 8006a94:	441a      	add	r2, r3
 8006a96:	9200      	str	r2, [sp, #0]
 8006a98:	9a06      	ldr	r2, [sp, #24]
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	441a      	add	r2, r3
 8006a9e:	4648      	mov	r0, r9
 8006aa0:	9206      	str	r2, [sp, #24]
 8006aa2:	f000 fc2d 	bl	8007300 <__i2b>
 8006aa6:	4605      	mov	r5, r0
 8006aa8:	b166      	cbz	r6, 8006ac4 <_dtoa_r+0x74c>
 8006aaa:	9b06      	ldr	r3, [sp, #24]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	dd09      	ble.n	8006ac4 <_dtoa_r+0x74c>
 8006ab0:	42b3      	cmp	r3, r6
 8006ab2:	9a00      	ldr	r2, [sp, #0]
 8006ab4:	bfa8      	it	ge
 8006ab6:	4633      	movge	r3, r6
 8006ab8:	1ad2      	subs	r2, r2, r3
 8006aba:	9200      	str	r2, [sp, #0]
 8006abc:	9a06      	ldr	r2, [sp, #24]
 8006abe:	1af6      	subs	r6, r6, r3
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	9306      	str	r3, [sp, #24]
 8006ac4:	9b08      	ldr	r3, [sp, #32]
 8006ac6:	b30b      	cbz	r3, 8006b0c <_dtoa_r+0x794>
 8006ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 80c6 	beq.w	8006c5c <_dtoa_r+0x8e4>
 8006ad0:	2c00      	cmp	r4, #0
 8006ad2:	f000 80c0 	beq.w	8006c56 <_dtoa_r+0x8de>
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	4622      	mov	r2, r4
 8006ada:	4648      	mov	r0, r9
 8006adc:	f000 fcc8 	bl	8007470 <__pow5mult>
 8006ae0:	9a02      	ldr	r2, [sp, #8]
 8006ae2:	4601      	mov	r1, r0
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	4648      	mov	r0, r9
 8006ae8:	f000 fc20 	bl	800732c <__multiply>
 8006aec:	9902      	ldr	r1, [sp, #8]
 8006aee:	4680      	mov	r8, r0
 8006af0:	4648      	mov	r0, r9
 8006af2:	f000 fb51 	bl	8007198 <_Bfree>
 8006af6:	9b08      	ldr	r3, [sp, #32]
 8006af8:	1b1b      	subs	r3, r3, r4
 8006afa:	9308      	str	r3, [sp, #32]
 8006afc:	f000 80b1 	beq.w	8006c62 <_dtoa_r+0x8ea>
 8006b00:	9a08      	ldr	r2, [sp, #32]
 8006b02:	4641      	mov	r1, r8
 8006b04:	4648      	mov	r0, r9
 8006b06:	f000 fcb3 	bl	8007470 <__pow5mult>
 8006b0a:	9002      	str	r0, [sp, #8]
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	4648      	mov	r0, r9
 8006b10:	f000 fbf6 	bl	8007300 <__i2b>
 8006b14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b16:	4604      	mov	r4, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 81d8 	beq.w	8006ece <_dtoa_r+0xb56>
 8006b1e:	461a      	mov	r2, r3
 8006b20:	4601      	mov	r1, r0
 8006b22:	4648      	mov	r0, r9
 8006b24:	f000 fca4 	bl	8007470 <__pow5mult>
 8006b28:	9b07      	ldr	r3, [sp, #28]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	f300 809f 	bgt.w	8006c70 <_dtoa_r+0x8f8>
 8006b32:	9b04      	ldr	r3, [sp, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f040 8097 	bne.w	8006c68 <_dtoa_r+0x8f0>
 8006b3a:	9b05      	ldr	r3, [sp, #20]
 8006b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f040 8093 	bne.w	8006c6c <_dtoa_r+0x8f4>
 8006b46:	9b05      	ldr	r3, [sp, #20]
 8006b48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b4c:	0d1b      	lsrs	r3, r3, #20
 8006b4e:	051b      	lsls	r3, r3, #20
 8006b50:	b133      	cbz	r3, 8006b60 <_dtoa_r+0x7e8>
 8006b52:	9b00      	ldr	r3, [sp, #0]
 8006b54:	3301      	adds	r3, #1
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	9b06      	ldr	r3, [sp, #24]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	9306      	str	r3, [sp, #24]
 8006b5e:	2301      	movs	r3, #1
 8006b60:	9308      	str	r3, [sp, #32]
 8006b62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 81b8 	beq.w	8006eda <_dtoa_r+0xb62>
 8006b6a:	6923      	ldr	r3, [r4, #16]
 8006b6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b70:	6918      	ldr	r0, [r3, #16]
 8006b72:	f000 fb79 	bl	8007268 <__hi0bits>
 8006b76:	f1c0 0020 	rsb	r0, r0, #32
 8006b7a:	9b06      	ldr	r3, [sp, #24]
 8006b7c:	4418      	add	r0, r3
 8006b7e:	f010 001f 	ands.w	r0, r0, #31
 8006b82:	f000 8082 	beq.w	8006c8a <_dtoa_r+0x912>
 8006b86:	f1c0 0320 	rsb	r3, r0, #32
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	dd73      	ble.n	8006c76 <_dtoa_r+0x8fe>
 8006b8e:	9b00      	ldr	r3, [sp, #0]
 8006b90:	f1c0 001c 	rsb	r0, r0, #28
 8006b94:	4403      	add	r3, r0
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	9b06      	ldr	r3, [sp, #24]
 8006b9a:	4403      	add	r3, r0
 8006b9c:	4406      	add	r6, r0
 8006b9e:	9306      	str	r3, [sp, #24]
 8006ba0:	9b00      	ldr	r3, [sp, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	dd05      	ble.n	8006bb2 <_dtoa_r+0x83a>
 8006ba6:	9902      	ldr	r1, [sp, #8]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4648      	mov	r0, r9
 8006bac:	f000 fcba 	bl	8007524 <__lshift>
 8006bb0:	9002      	str	r0, [sp, #8]
 8006bb2:	9b06      	ldr	r3, [sp, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	dd05      	ble.n	8006bc4 <_dtoa_r+0x84c>
 8006bb8:	4621      	mov	r1, r4
 8006bba:	461a      	mov	r2, r3
 8006bbc:	4648      	mov	r0, r9
 8006bbe:	f000 fcb1 	bl	8007524 <__lshift>
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d061      	beq.n	8006c8e <_dtoa_r+0x916>
 8006bca:	9802      	ldr	r0, [sp, #8]
 8006bcc:	4621      	mov	r1, r4
 8006bce:	f000 fd15 	bl	80075fc <__mcmp>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	da5b      	bge.n	8006c8e <_dtoa_r+0x916>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	9902      	ldr	r1, [sp, #8]
 8006bda:	220a      	movs	r2, #10
 8006bdc:	4648      	mov	r0, r9
 8006bde:	f000 fafd 	bl	80071dc <__multadd>
 8006be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be4:	9002      	str	r0, [sp, #8]
 8006be6:	f107 38ff 	add.w	r8, r7, #4294967295
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 8177 	beq.w	8006ede <_dtoa_r+0xb66>
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	220a      	movs	r2, #10
 8006bf6:	4648      	mov	r0, r9
 8006bf8:	f000 faf0 	bl	80071dc <__multadd>
 8006bfc:	f1bb 0f00 	cmp.w	fp, #0
 8006c00:	4605      	mov	r5, r0
 8006c02:	dc6f      	bgt.n	8006ce4 <_dtoa_r+0x96c>
 8006c04:	9b07      	ldr	r3, [sp, #28]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	dc49      	bgt.n	8006c9e <_dtoa_r+0x926>
 8006c0a:	e06b      	b.n	8006ce4 <_dtoa_r+0x96c>
 8006c0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006c12:	e73c      	b.n	8006a8e <_dtoa_r+0x716>
 8006c14:	3fe00000 	.word	0x3fe00000
 8006c18:	40240000 	.word	0x40240000
 8006c1c:	9b03      	ldr	r3, [sp, #12]
 8006c1e:	1e5c      	subs	r4, r3, #1
 8006c20:	9b08      	ldr	r3, [sp, #32]
 8006c22:	42a3      	cmp	r3, r4
 8006c24:	db09      	blt.n	8006c3a <_dtoa_r+0x8c2>
 8006c26:	1b1c      	subs	r4, r3, r4
 8006c28:	9b03      	ldr	r3, [sp, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f6bf af30 	bge.w	8006a90 <_dtoa_r+0x718>
 8006c30:	9b00      	ldr	r3, [sp, #0]
 8006c32:	9a03      	ldr	r2, [sp, #12]
 8006c34:	1a9e      	subs	r6, r3, r2
 8006c36:	2300      	movs	r3, #0
 8006c38:	e72b      	b.n	8006a92 <_dtoa_r+0x71a>
 8006c3a:	9b08      	ldr	r3, [sp, #32]
 8006c3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006c3e:	9408      	str	r4, [sp, #32]
 8006c40:	1ae3      	subs	r3, r4, r3
 8006c42:	441a      	add	r2, r3
 8006c44:	9e00      	ldr	r6, [sp, #0]
 8006c46:	9b03      	ldr	r3, [sp, #12]
 8006c48:	920d      	str	r2, [sp, #52]	@ 0x34
 8006c4a:	2400      	movs	r4, #0
 8006c4c:	e721      	b.n	8006a92 <_dtoa_r+0x71a>
 8006c4e:	9c08      	ldr	r4, [sp, #32]
 8006c50:	9e00      	ldr	r6, [sp, #0]
 8006c52:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006c54:	e728      	b.n	8006aa8 <_dtoa_r+0x730>
 8006c56:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006c5a:	e751      	b.n	8006b00 <_dtoa_r+0x788>
 8006c5c:	9a08      	ldr	r2, [sp, #32]
 8006c5e:	9902      	ldr	r1, [sp, #8]
 8006c60:	e750      	b.n	8006b04 <_dtoa_r+0x78c>
 8006c62:	f8cd 8008 	str.w	r8, [sp, #8]
 8006c66:	e751      	b.n	8006b0c <_dtoa_r+0x794>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	e779      	b.n	8006b60 <_dtoa_r+0x7e8>
 8006c6c:	9b04      	ldr	r3, [sp, #16]
 8006c6e:	e777      	b.n	8006b60 <_dtoa_r+0x7e8>
 8006c70:	2300      	movs	r3, #0
 8006c72:	9308      	str	r3, [sp, #32]
 8006c74:	e779      	b.n	8006b6a <_dtoa_r+0x7f2>
 8006c76:	d093      	beq.n	8006ba0 <_dtoa_r+0x828>
 8006c78:	9a00      	ldr	r2, [sp, #0]
 8006c7a:	331c      	adds	r3, #28
 8006c7c:	441a      	add	r2, r3
 8006c7e:	9200      	str	r2, [sp, #0]
 8006c80:	9a06      	ldr	r2, [sp, #24]
 8006c82:	441a      	add	r2, r3
 8006c84:	441e      	add	r6, r3
 8006c86:	9206      	str	r2, [sp, #24]
 8006c88:	e78a      	b.n	8006ba0 <_dtoa_r+0x828>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	e7f4      	b.n	8006c78 <_dtoa_r+0x900>
 8006c8e:	9b03      	ldr	r3, [sp, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	46b8      	mov	r8, r7
 8006c94:	dc20      	bgt.n	8006cd8 <_dtoa_r+0x960>
 8006c96:	469b      	mov	fp, r3
 8006c98:	9b07      	ldr	r3, [sp, #28]
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	dd1e      	ble.n	8006cdc <_dtoa_r+0x964>
 8006c9e:	f1bb 0f00 	cmp.w	fp, #0
 8006ca2:	f47f adb1 	bne.w	8006808 <_dtoa_r+0x490>
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	465b      	mov	r3, fp
 8006caa:	2205      	movs	r2, #5
 8006cac:	4648      	mov	r0, r9
 8006cae:	f000 fa95 	bl	80071dc <__multadd>
 8006cb2:	4601      	mov	r1, r0
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	9802      	ldr	r0, [sp, #8]
 8006cb8:	f000 fca0 	bl	80075fc <__mcmp>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	f77f ada3 	ble.w	8006808 <_dtoa_r+0x490>
 8006cc2:	4656      	mov	r6, sl
 8006cc4:	2331      	movs	r3, #49	@ 0x31
 8006cc6:	f806 3b01 	strb.w	r3, [r6], #1
 8006cca:	f108 0801 	add.w	r8, r8, #1
 8006cce:	e59f      	b.n	8006810 <_dtoa_r+0x498>
 8006cd0:	9c03      	ldr	r4, [sp, #12]
 8006cd2:	46b8      	mov	r8, r7
 8006cd4:	4625      	mov	r5, r4
 8006cd6:	e7f4      	b.n	8006cc2 <_dtoa_r+0x94a>
 8006cd8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 8101 	beq.w	8006ee6 <_dtoa_r+0xb6e>
 8006ce4:	2e00      	cmp	r6, #0
 8006ce6:	dd05      	ble.n	8006cf4 <_dtoa_r+0x97c>
 8006ce8:	4629      	mov	r1, r5
 8006cea:	4632      	mov	r2, r6
 8006cec:	4648      	mov	r0, r9
 8006cee:	f000 fc19 	bl	8007524 <__lshift>
 8006cf2:	4605      	mov	r5, r0
 8006cf4:	9b08      	ldr	r3, [sp, #32]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d05c      	beq.n	8006db4 <_dtoa_r+0xa3c>
 8006cfa:	6869      	ldr	r1, [r5, #4]
 8006cfc:	4648      	mov	r0, r9
 8006cfe:	f000 fa0b 	bl	8007118 <_Balloc>
 8006d02:	4606      	mov	r6, r0
 8006d04:	b928      	cbnz	r0, 8006d12 <_dtoa_r+0x99a>
 8006d06:	4b82      	ldr	r3, [pc, #520]	@ (8006f10 <_dtoa_r+0xb98>)
 8006d08:	4602      	mov	r2, r0
 8006d0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006d0e:	f7ff bb4a 	b.w	80063a6 <_dtoa_r+0x2e>
 8006d12:	692a      	ldr	r2, [r5, #16]
 8006d14:	3202      	adds	r2, #2
 8006d16:	0092      	lsls	r2, r2, #2
 8006d18:	f105 010c 	add.w	r1, r5, #12
 8006d1c:	300c      	adds	r0, #12
 8006d1e:	f7ff fa92 	bl	8006246 <memcpy>
 8006d22:	2201      	movs	r2, #1
 8006d24:	4631      	mov	r1, r6
 8006d26:	4648      	mov	r0, r9
 8006d28:	f000 fbfc 	bl	8007524 <__lshift>
 8006d2c:	f10a 0301 	add.w	r3, sl, #1
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	eb0a 030b 	add.w	r3, sl, fp
 8006d36:	9308      	str	r3, [sp, #32]
 8006d38:	9b04      	ldr	r3, [sp, #16]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	462f      	mov	r7, r5
 8006d40:	9306      	str	r3, [sp, #24]
 8006d42:	4605      	mov	r5, r0
 8006d44:	9b00      	ldr	r3, [sp, #0]
 8006d46:	9802      	ldr	r0, [sp, #8]
 8006d48:	4621      	mov	r1, r4
 8006d4a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006d4e:	f7ff fa88 	bl	8006262 <quorem>
 8006d52:	4603      	mov	r3, r0
 8006d54:	3330      	adds	r3, #48	@ 0x30
 8006d56:	9003      	str	r0, [sp, #12]
 8006d58:	4639      	mov	r1, r7
 8006d5a:	9802      	ldr	r0, [sp, #8]
 8006d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d5e:	f000 fc4d 	bl	80075fc <__mcmp>
 8006d62:	462a      	mov	r2, r5
 8006d64:	9004      	str	r0, [sp, #16]
 8006d66:	4621      	mov	r1, r4
 8006d68:	4648      	mov	r0, r9
 8006d6a:	f000 fc63 	bl	8007634 <__mdiff>
 8006d6e:	68c2      	ldr	r2, [r0, #12]
 8006d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d72:	4606      	mov	r6, r0
 8006d74:	bb02      	cbnz	r2, 8006db8 <_dtoa_r+0xa40>
 8006d76:	4601      	mov	r1, r0
 8006d78:	9802      	ldr	r0, [sp, #8]
 8006d7a:	f000 fc3f 	bl	80075fc <__mcmp>
 8006d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d80:	4602      	mov	r2, r0
 8006d82:	4631      	mov	r1, r6
 8006d84:	4648      	mov	r0, r9
 8006d86:	920c      	str	r2, [sp, #48]	@ 0x30
 8006d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d8a:	f000 fa05 	bl	8007198 <_Bfree>
 8006d8e:	9b07      	ldr	r3, [sp, #28]
 8006d90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006d92:	9e00      	ldr	r6, [sp, #0]
 8006d94:	ea42 0103 	orr.w	r1, r2, r3
 8006d98:	9b06      	ldr	r3, [sp, #24]
 8006d9a:	4319      	orrs	r1, r3
 8006d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d9e:	d10d      	bne.n	8006dbc <_dtoa_r+0xa44>
 8006da0:	2b39      	cmp	r3, #57	@ 0x39
 8006da2:	d027      	beq.n	8006df4 <_dtoa_r+0xa7c>
 8006da4:	9a04      	ldr	r2, [sp, #16]
 8006da6:	2a00      	cmp	r2, #0
 8006da8:	dd01      	ble.n	8006dae <_dtoa_r+0xa36>
 8006daa:	9b03      	ldr	r3, [sp, #12]
 8006dac:	3331      	adds	r3, #49	@ 0x31
 8006dae:	f88b 3000 	strb.w	r3, [fp]
 8006db2:	e52e      	b.n	8006812 <_dtoa_r+0x49a>
 8006db4:	4628      	mov	r0, r5
 8006db6:	e7b9      	b.n	8006d2c <_dtoa_r+0x9b4>
 8006db8:	2201      	movs	r2, #1
 8006dba:	e7e2      	b.n	8006d82 <_dtoa_r+0xa0a>
 8006dbc:	9904      	ldr	r1, [sp, #16]
 8006dbe:	2900      	cmp	r1, #0
 8006dc0:	db04      	blt.n	8006dcc <_dtoa_r+0xa54>
 8006dc2:	9807      	ldr	r0, [sp, #28]
 8006dc4:	4301      	orrs	r1, r0
 8006dc6:	9806      	ldr	r0, [sp, #24]
 8006dc8:	4301      	orrs	r1, r0
 8006dca:	d120      	bne.n	8006e0e <_dtoa_r+0xa96>
 8006dcc:	2a00      	cmp	r2, #0
 8006dce:	ddee      	ble.n	8006dae <_dtoa_r+0xa36>
 8006dd0:	9902      	ldr	r1, [sp, #8]
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	4648      	mov	r0, r9
 8006dd8:	f000 fba4 	bl	8007524 <__lshift>
 8006ddc:	4621      	mov	r1, r4
 8006dde:	9002      	str	r0, [sp, #8]
 8006de0:	f000 fc0c 	bl	80075fc <__mcmp>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	9b00      	ldr	r3, [sp, #0]
 8006de8:	dc02      	bgt.n	8006df0 <_dtoa_r+0xa78>
 8006dea:	d1e0      	bne.n	8006dae <_dtoa_r+0xa36>
 8006dec:	07da      	lsls	r2, r3, #31
 8006dee:	d5de      	bpl.n	8006dae <_dtoa_r+0xa36>
 8006df0:	2b39      	cmp	r3, #57	@ 0x39
 8006df2:	d1da      	bne.n	8006daa <_dtoa_r+0xa32>
 8006df4:	2339      	movs	r3, #57	@ 0x39
 8006df6:	f88b 3000 	strb.w	r3, [fp]
 8006dfa:	4633      	mov	r3, r6
 8006dfc:	461e      	mov	r6, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006e04:	2a39      	cmp	r2, #57	@ 0x39
 8006e06:	d04e      	beq.n	8006ea6 <_dtoa_r+0xb2e>
 8006e08:	3201      	adds	r2, #1
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	e501      	b.n	8006812 <_dtoa_r+0x49a>
 8006e0e:	2a00      	cmp	r2, #0
 8006e10:	dd03      	ble.n	8006e1a <_dtoa_r+0xaa2>
 8006e12:	2b39      	cmp	r3, #57	@ 0x39
 8006e14:	d0ee      	beq.n	8006df4 <_dtoa_r+0xa7c>
 8006e16:	3301      	adds	r3, #1
 8006e18:	e7c9      	b.n	8006dae <_dtoa_r+0xa36>
 8006e1a:	9a00      	ldr	r2, [sp, #0]
 8006e1c:	9908      	ldr	r1, [sp, #32]
 8006e1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006e22:	428a      	cmp	r2, r1
 8006e24:	d028      	beq.n	8006e78 <_dtoa_r+0xb00>
 8006e26:	9902      	ldr	r1, [sp, #8]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	220a      	movs	r2, #10
 8006e2c:	4648      	mov	r0, r9
 8006e2e:	f000 f9d5 	bl	80071dc <__multadd>
 8006e32:	42af      	cmp	r7, r5
 8006e34:	9002      	str	r0, [sp, #8]
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	f04f 020a 	mov.w	r2, #10
 8006e3e:	4639      	mov	r1, r7
 8006e40:	4648      	mov	r0, r9
 8006e42:	d107      	bne.n	8006e54 <_dtoa_r+0xadc>
 8006e44:	f000 f9ca 	bl	80071dc <__multadd>
 8006e48:	4607      	mov	r7, r0
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	9b00      	ldr	r3, [sp, #0]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	e777      	b.n	8006d44 <_dtoa_r+0x9cc>
 8006e54:	f000 f9c2 	bl	80071dc <__multadd>
 8006e58:	4629      	mov	r1, r5
 8006e5a:	4607      	mov	r7, r0
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	220a      	movs	r2, #10
 8006e60:	4648      	mov	r0, r9
 8006e62:	f000 f9bb 	bl	80071dc <__multadd>
 8006e66:	4605      	mov	r5, r0
 8006e68:	e7f0      	b.n	8006e4c <_dtoa_r+0xad4>
 8006e6a:	f1bb 0f00 	cmp.w	fp, #0
 8006e6e:	bfcc      	ite	gt
 8006e70:	465e      	movgt	r6, fp
 8006e72:	2601      	movle	r6, #1
 8006e74:	4456      	add	r6, sl
 8006e76:	2700      	movs	r7, #0
 8006e78:	9902      	ldr	r1, [sp, #8]
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	4648      	mov	r0, r9
 8006e80:	f000 fb50 	bl	8007524 <__lshift>
 8006e84:	4621      	mov	r1, r4
 8006e86:	9002      	str	r0, [sp, #8]
 8006e88:	f000 fbb8 	bl	80075fc <__mcmp>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	dcb4      	bgt.n	8006dfa <_dtoa_r+0xa82>
 8006e90:	d102      	bne.n	8006e98 <_dtoa_r+0xb20>
 8006e92:	9b00      	ldr	r3, [sp, #0]
 8006e94:	07db      	lsls	r3, r3, #31
 8006e96:	d4b0      	bmi.n	8006dfa <_dtoa_r+0xa82>
 8006e98:	4633      	mov	r3, r6
 8006e9a:	461e      	mov	r6, r3
 8006e9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ea0:	2a30      	cmp	r2, #48	@ 0x30
 8006ea2:	d0fa      	beq.n	8006e9a <_dtoa_r+0xb22>
 8006ea4:	e4b5      	b.n	8006812 <_dtoa_r+0x49a>
 8006ea6:	459a      	cmp	sl, r3
 8006ea8:	d1a8      	bne.n	8006dfc <_dtoa_r+0xa84>
 8006eaa:	2331      	movs	r3, #49	@ 0x31
 8006eac:	f108 0801 	add.w	r8, r8, #1
 8006eb0:	f88a 3000 	strb.w	r3, [sl]
 8006eb4:	e4ad      	b.n	8006812 <_dtoa_r+0x49a>
 8006eb6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006eb8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006f14 <_dtoa_r+0xb9c>
 8006ebc:	b11b      	cbz	r3, 8006ec6 <_dtoa_r+0xb4e>
 8006ebe:	f10a 0308 	add.w	r3, sl, #8
 8006ec2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	4650      	mov	r0, sl
 8006ec8:	b017      	add	sp, #92	@ 0x5c
 8006eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ece:	9b07      	ldr	r3, [sp, #28]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	f77f ae2e 	ble.w	8006b32 <_dtoa_r+0x7ba>
 8006ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ed8:	9308      	str	r3, [sp, #32]
 8006eda:	2001      	movs	r0, #1
 8006edc:	e64d      	b.n	8006b7a <_dtoa_r+0x802>
 8006ede:	f1bb 0f00 	cmp.w	fp, #0
 8006ee2:	f77f aed9 	ble.w	8006c98 <_dtoa_r+0x920>
 8006ee6:	4656      	mov	r6, sl
 8006ee8:	9802      	ldr	r0, [sp, #8]
 8006eea:	4621      	mov	r1, r4
 8006eec:	f7ff f9b9 	bl	8006262 <quorem>
 8006ef0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006ef4:	f806 3b01 	strb.w	r3, [r6], #1
 8006ef8:	eba6 020a 	sub.w	r2, r6, sl
 8006efc:	4593      	cmp	fp, r2
 8006efe:	ddb4      	ble.n	8006e6a <_dtoa_r+0xaf2>
 8006f00:	9902      	ldr	r1, [sp, #8]
 8006f02:	2300      	movs	r3, #0
 8006f04:	220a      	movs	r2, #10
 8006f06:	4648      	mov	r0, r9
 8006f08:	f000 f968 	bl	80071dc <__multadd>
 8006f0c:	9002      	str	r0, [sp, #8]
 8006f0e:	e7eb      	b.n	8006ee8 <_dtoa_r+0xb70>
 8006f10:	08008430 	.word	0x08008430
 8006f14:	080083b4 	.word	0x080083b4

08006f18 <_free_r>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	2900      	cmp	r1, #0
 8006f1e:	d041      	beq.n	8006fa4 <_free_r+0x8c>
 8006f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f24:	1f0c      	subs	r4, r1, #4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	bfb8      	it	lt
 8006f2a:	18e4      	addlt	r4, r4, r3
 8006f2c:	f000 f8e8 	bl	8007100 <__malloc_lock>
 8006f30:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa8 <_free_r+0x90>)
 8006f32:	6813      	ldr	r3, [r2, #0]
 8006f34:	b933      	cbnz	r3, 8006f44 <_free_r+0x2c>
 8006f36:	6063      	str	r3, [r4, #4]
 8006f38:	6014      	str	r4, [r2, #0]
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f40:	f000 b8e4 	b.w	800710c <__malloc_unlock>
 8006f44:	42a3      	cmp	r3, r4
 8006f46:	d908      	bls.n	8006f5a <_free_r+0x42>
 8006f48:	6820      	ldr	r0, [r4, #0]
 8006f4a:	1821      	adds	r1, r4, r0
 8006f4c:	428b      	cmp	r3, r1
 8006f4e:	bf01      	itttt	eq
 8006f50:	6819      	ldreq	r1, [r3, #0]
 8006f52:	685b      	ldreq	r3, [r3, #4]
 8006f54:	1809      	addeq	r1, r1, r0
 8006f56:	6021      	streq	r1, [r4, #0]
 8006f58:	e7ed      	b.n	8006f36 <_free_r+0x1e>
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	b10b      	cbz	r3, 8006f64 <_free_r+0x4c>
 8006f60:	42a3      	cmp	r3, r4
 8006f62:	d9fa      	bls.n	8006f5a <_free_r+0x42>
 8006f64:	6811      	ldr	r1, [r2, #0]
 8006f66:	1850      	adds	r0, r2, r1
 8006f68:	42a0      	cmp	r0, r4
 8006f6a:	d10b      	bne.n	8006f84 <_free_r+0x6c>
 8006f6c:	6820      	ldr	r0, [r4, #0]
 8006f6e:	4401      	add	r1, r0
 8006f70:	1850      	adds	r0, r2, r1
 8006f72:	4283      	cmp	r3, r0
 8006f74:	6011      	str	r1, [r2, #0]
 8006f76:	d1e0      	bne.n	8006f3a <_free_r+0x22>
 8006f78:	6818      	ldr	r0, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	6053      	str	r3, [r2, #4]
 8006f7e:	4408      	add	r0, r1
 8006f80:	6010      	str	r0, [r2, #0]
 8006f82:	e7da      	b.n	8006f3a <_free_r+0x22>
 8006f84:	d902      	bls.n	8006f8c <_free_r+0x74>
 8006f86:	230c      	movs	r3, #12
 8006f88:	602b      	str	r3, [r5, #0]
 8006f8a:	e7d6      	b.n	8006f3a <_free_r+0x22>
 8006f8c:	6820      	ldr	r0, [r4, #0]
 8006f8e:	1821      	adds	r1, r4, r0
 8006f90:	428b      	cmp	r3, r1
 8006f92:	bf04      	itt	eq
 8006f94:	6819      	ldreq	r1, [r3, #0]
 8006f96:	685b      	ldreq	r3, [r3, #4]
 8006f98:	6063      	str	r3, [r4, #4]
 8006f9a:	bf04      	itt	eq
 8006f9c:	1809      	addeq	r1, r1, r0
 8006f9e:	6021      	streq	r1, [r4, #0]
 8006fa0:	6054      	str	r4, [r2, #4]
 8006fa2:	e7ca      	b.n	8006f3a <_free_r+0x22>
 8006fa4:	bd38      	pop	{r3, r4, r5, pc}
 8006fa6:	bf00      	nop
 8006fa8:	2000056c 	.word	0x2000056c

08006fac <malloc>:
 8006fac:	4b02      	ldr	r3, [pc, #8]	@ (8006fb8 <malloc+0xc>)
 8006fae:	4601      	mov	r1, r0
 8006fb0:	6818      	ldr	r0, [r3, #0]
 8006fb2:	f000 b825 	b.w	8007000 <_malloc_r>
 8006fb6:	bf00      	nop
 8006fb8:	20000068 	.word	0x20000068

08006fbc <sbrk_aligned>:
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	4e0f      	ldr	r6, [pc, #60]	@ (8006ffc <sbrk_aligned+0x40>)
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	6831      	ldr	r1, [r6, #0]
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	b911      	cbnz	r1, 8006fce <sbrk_aligned+0x12>
 8006fc8:	f000 fe3e 	bl	8007c48 <_sbrk_r>
 8006fcc:	6030      	str	r0, [r6, #0]
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	f000 fe39 	bl	8007c48 <_sbrk_r>
 8006fd6:	1c43      	adds	r3, r0, #1
 8006fd8:	d103      	bne.n	8006fe2 <sbrk_aligned+0x26>
 8006fda:	f04f 34ff 	mov.w	r4, #4294967295
 8006fde:	4620      	mov	r0, r4
 8006fe0:	bd70      	pop	{r4, r5, r6, pc}
 8006fe2:	1cc4      	adds	r4, r0, #3
 8006fe4:	f024 0403 	bic.w	r4, r4, #3
 8006fe8:	42a0      	cmp	r0, r4
 8006fea:	d0f8      	beq.n	8006fde <sbrk_aligned+0x22>
 8006fec:	1a21      	subs	r1, r4, r0
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f000 fe2a 	bl	8007c48 <_sbrk_r>
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d1f2      	bne.n	8006fde <sbrk_aligned+0x22>
 8006ff8:	e7ef      	b.n	8006fda <sbrk_aligned+0x1e>
 8006ffa:	bf00      	nop
 8006ffc:	20000568 	.word	0x20000568

08007000 <_malloc_r>:
 8007000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007004:	1ccd      	adds	r5, r1, #3
 8007006:	f025 0503 	bic.w	r5, r5, #3
 800700a:	3508      	adds	r5, #8
 800700c:	2d0c      	cmp	r5, #12
 800700e:	bf38      	it	cc
 8007010:	250c      	movcc	r5, #12
 8007012:	2d00      	cmp	r5, #0
 8007014:	4606      	mov	r6, r0
 8007016:	db01      	blt.n	800701c <_malloc_r+0x1c>
 8007018:	42a9      	cmp	r1, r5
 800701a:	d904      	bls.n	8007026 <_malloc_r+0x26>
 800701c:	230c      	movs	r3, #12
 800701e:	6033      	str	r3, [r6, #0]
 8007020:	2000      	movs	r0, #0
 8007022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007026:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070fc <_malloc_r+0xfc>
 800702a:	f000 f869 	bl	8007100 <__malloc_lock>
 800702e:	f8d8 3000 	ldr.w	r3, [r8]
 8007032:	461c      	mov	r4, r3
 8007034:	bb44      	cbnz	r4, 8007088 <_malloc_r+0x88>
 8007036:	4629      	mov	r1, r5
 8007038:	4630      	mov	r0, r6
 800703a:	f7ff ffbf 	bl	8006fbc <sbrk_aligned>
 800703e:	1c43      	adds	r3, r0, #1
 8007040:	4604      	mov	r4, r0
 8007042:	d158      	bne.n	80070f6 <_malloc_r+0xf6>
 8007044:	f8d8 4000 	ldr.w	r4, [r8]
 8007048:	4627      	mov	r7, r4
 800704a:	2f00      	cmp	r7, #0
 800704c:	d143      	bne.n	80070d6 <_malloc_r+0xd6>
 800704e:	2c00      	cmp	r4, #0
 8007050:	d04b      	beq.n	80070ea <_malloc_r+0xea>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	4639      	mov	r1, r7
 8007056:	4630      	mov	r0, r6
 8007058:	eb04 0903 	add.w	r9, r4, r3
 800705c:	f000 fdf4 	bl	8007c48 <_sbrk_r>
 8007060:	4581      	cmp	r9, r0
 8007062:	d142      	bne.n	80070ea <_malloc_r+0xea>
 8007064:	6821      	ldr	r1, [r4, #0]
 8007066:	1a6d      	subs	r5, r5, r1
 8007068:	4629      	mov	r1, r5
 800706a:	4630      	mov	r0, r6
 800706c:	f7ff ffa6 	bl	8006fbc <sbrk_aligned>
 8007070:	3001      	adds	r0, #1
 8007072:	d03a      	beq.n	80070ea <_malloc_r+0xea>
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	442b      	add	r3, r5
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	f8d8 3000 	ldr.w	r3, [r8]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	bb62      	cbnz	r2, 80070dc <_malloc_r+0xdc>
 8007082:	f8c8 7000 	str.w	r7, [r8]
 8007086:	e00f      	b.n	80070a8 <_malloc_r+0xa8>
 8007088:	6822      	ldr	r2, [r4, #0]
 800708a:	1b52      	subs	r2, r2, r5
 800708c:	d420      	bmi.n	80070d0 <_malloc_r+0xd0>
 800708e:	2a0b      	cmp	r2, #11
 8007090:	d917      	bls.n	80070c2 <_malloc_r+0xc2>
 8007092:	1961      	adds	r1, r4, r5
 8007094:	42a3      	cmp	r3, r4
 8007096:	6025      	str	r5, [r4, #0]
 8007098:	bf18      	it	ne
 800709a:	6059      	strne	r1, [r3, #4]
 800709c:	6863      	ldr	r3, [r4, #4]
 800709e:	bf08      	it	eq
 80070a0:	f8c8 1000 	streq.w	r1, [r8]
 80070a4:	5162      	str	r2, [r4, r5]
 80070a6:	604b      	str	r3, [r1, #4]
 80070a8:	4630      	mov	r0, r6
 80070aa:	f000 f82f 	bl	800710c <__malloc_unlock>
 80070ae:	f104 000b 	add.w	r0, r4, #11
 80070b2:	1d23      	adds	r3, r4, #4
 80070b4:	f020 0007 	bic.w	r0, r0, #7
 80070b8:	1ac2      	subs	r2, r0, r3
 80070ba:	bf1c      	itt	ne
 80070bc:	1a1b      	subne	r3, r3, r0
 80070be:	50a3      	strne	r3, [r4, r2]
 80070c0:	e7af      	b.n	8007022 <_malloc_r+0x22>
 80070c2:	6862      	ldr	r2, [r4, #4]
 80070c4:	42a3      	cmp	r3, r4
 80070c6:	bf0c      	ite	eq
 80070c8:	f8c8 2000 	streq.w	r2, [r8]
 80070cc:	605a      	strne	r2, [r3, #4]
 80070ce:	e7eb      	b.n	80070a8 <_malloc_r+0xa8>
 80070d0:	4623      	mov	r3, r4
 80070d2:	6864      	ldr	r4, [r4, #4]
 80070d4:	e7ae      	b.n	8007034 <_malloc_r+0x34>
 80070d6:	463c      	mov	r4, r7
 80070d8:	687f      	ldr	r7, [r7, #4]
 80070da:	e7b6      	b.n	800704a <_malloc_r+0x4a>
 80070dc:	461a      	mov	r2, r3
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	d1fb      	bne.n	80070dc <_malloc_r+0xdc>
 80070e4:	2300      	movs	r3, #0
 80070e6:	6053      	str	r3, [r2, #4]
 80070e8:	e7de      	b.n	80070a8 <_malloc_r+0xa8>
 80070ea:	230c      	movs	r3, #12
 80070ec:	6033      	str	r3, [r6, #0]
 80070ee:	4630      	mov	r0, r6
 80070f0:	f000 f80c 	bl	800710c <__malloc_unlock>
 80070f4:	e794      	b.n	8007020 <_malloc_r+0x20>
 80070f6:	6005      	str	r5, [r0, #0]
 80070f8:	e7d6      	b.n	80070a8 <_malloc_r+0xa8>
 80070fa:	bf00      	nop
 80070fc:	2000056c 	.word	0x2000056c

08007100 <__malloc_lock>:
 8007100:	4801      	ldr	r0, [pc, #4]	@ (8007108 <__malloc_lock+0x8>)
 8007102:	f7ff b89e 	b.w	8006242 <__retarget_lock_acquire_recursive>
 8007106:	bf00      	nop
 8007108:	20000564 	.word	0x20000564

0800710c <__malloc_unlock>:
 800710c:	4801      	ldr	r0, [pc, #4]	@ (8007114 <__malloc_unlock+0x8>)
 800710e:	f7ff b899 	b.w	8006244 <__retarget_lock_release_recursive>
 8007112:	bf00      	nop
 8007114:	20000564 	.word	0x20000564

08007118 <_Balloc>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	69c6      	ldr	r6, [r0, #28]
 800711c:	4604      	mov	r4, r0
 800711e:	460d      	mov	r5, r1
 8007120:	b976      	cbnz	r6, 8007140 <_Balloc+0x28>
 8007122:	2010      	movs	r0, #16
 8007124:	f7ff ff42 	bl	8006fac <malloc>
 8007128:	4602      	mov	r2, r0
 800712a:	61e0      	str	r0, [r4, #28]
 800712c:	b920      	cbnz	r0, 8007138 <_Balloc+0x20>
 800712e:	4b18      	ldr	r3, [pc, #96]	@ (8007190 <_Balloc+0x78>)
 8007130:	4818      	ldr	r0, [pc, #96]	@ (8007194 <_Balloc+0x7c>)
 8007132:	216b      	movs	r1, #107	@ 0x6b
 8007134:	f000 fd98 	bl	8007c68 <__assert_func>
 8007138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800713c:	6006      	str	r6, [r0, #0]
 800713e:	60c6      	str	r6, [r0, #12]
 8007140:	69e6      	ldr	r6, [r4, #28]
 8007142:	68f3      	ldr	r3, [r6, #12]
 8007144:	b183      	cbz	r3, 8007168 <_Balloc+0x50>
 8007146:	69e3      	ldr	r3, [r4, #28]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800714e:	b9b8      	cbnz	r0, 8007180 <_Balloc+0x68>
 8007150:	2101      	movs	r1, #1
 8007152:	fa01 f605 	lsl.w	r6, r1, r5
 8007156:	1d72      	adds	r2, r6, #5
 8007158:	0092      	lsls	r2, r2, #2
 800715a:	4620      	mov	r0, r4
 800715c:	f000 fda2 	bl	8007ca4 <_calloc_r>
 8007160:	b160      	cbz	r0, 800717c <_Balloc+0x64>
 8007162:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007166:	e00e      	b.n	8007186 <_Balloc+0x6e>
 8007168:	2221      	movs	r2, #33	@ 0x21
 800716a:	2104      	movs	r1, #4
 800716c:	4620      	mov	r0, r4
 800716e:	f000 fd99 	bl	8007ca4 <_calloc_r>
 8007172:	69e3      	ldr	r3, [r4, #28]
 8007174:	60f0      	str	r0, [r6, #12]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e4      	bne.n	8007146 <_Balloc+0x2e>
 800717c:	2000      	movs	r0, #0
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	6802      	ldr	r2, [r0, #0]
 8007182:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007186:	2300      	movs	r3, #0
 8007188:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800718c:	e7f7      	b.n	800717e <_Balloc+0x66>
 800718e:	bf00      	nop
 8007190:	080083c1 	.word	0x080083c1
 8007194:	08008441 	.word	0x08008441

08007198 <_Bfree>:
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	69c6      	ldr	r6, [r0, #28]
 800719c:	4605      	mov	r5, r0
 800719e:	460c      	mov	r4, r1
 80071a0:	b976      	cbnz	r6, 80071c0 <_Bfree+0x28>
 80071a2:	2010      	movs	r0, #16
 80071a4:	f7ff ff02 	bl	8006fac <malloc>
 80071a8:	4602      	mov	r2, r0
 80071aa:	61e8      	str	r0, [r5, #28]
 80071ac:	b920      	cbnz	r0, 80071b8 <_Bfree+0x20>
 80071ae:	4b09      	ldr	r3, [pc, #36]	@ (80071d4 <_Bfree+0x3c>)
 80071b0:	4809      	ldr	r0, [pc, #36]	@ (80071d8 <_Bfree+0x40>)
 80071b2:	218f      	movs	r1, #143	@ 0x8f
 80071b4:	f000 fd58 	bl	8007c68 <__assert_func>
 80071b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071bc:	6006      	str	r6, [r0, #0]
 80071be:	60c6      	str	r6, [r0, #12]
 80071c0:	b13c      	cbz	r4, 80071d2 <_Bfree+0x3a>
 80071c2:	69eb      	ldr	r3, [r5, #28]
 80071c4:	6862      	ldr	r2, [r4, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071cc:	6021      	str	r1, [r4, #0]
 80071ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071d2:	bd70      	pop	{r4, r5, r6, pc}
 80071d4:	080083c1 	.word	0x080083c1
 80071d8:	08008441 	.word	0x08008441

080071dc <__multadd>:
 80071dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e0:	690d      	ldr	r5, [r1, #16]
 80071e2:	4607      	mov	r7, r0
 80071e4:	460c      	mov	r4, r1
 80071e6:	461e      	mov	r6, r3
 80071e8:	f101 0c14 	add.w	ip, r1, #20
 80071ec:	2000      	movs	r0, #0
 80071ee:	f8dc 3000 	ldr.w	r3, [ip]
 80071f2:	b299      	uxth	r1, r3
 80071f4:	fb02 6101 	mla	r1, r2, r1, r6
 80071f8:	0c1e      	lsrs	r6, r3, #16
 80071fa:	0c0b      	lsrs	r3, r1, #16
 80071fc:	fb02 3306 	mla	r3, r2, r6, r3
 8007200:	b289      	uxth	r1, r1
 8007202:	3001      	adds	r0, #1
 8007204:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007208:	4285      	cmp	r5, r0
 800720a:	f84c 1b04 	str.w	r1, [ip], #4
 800720e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007212:	dcec      	bgt.n	80071ee <__multadd+0x12>
 8007214:	b30e      	cbz	r6, 800725a <__multadd+0x7e>
 8007216:	68a3      	ldr	r3, [r4, #8]
 8007218:	42ab      	cmp	r3, r5
 800721a:	dc19      	bgt.n	8007250 <__multadd+0x74>
 800721c:	6861      	ldr	r1, [r4, #4]
 800721e:	4638      	mov	r0, r7
 8007220:	3101      	adds	r1, #1
 8007222:	f7ff ff79 	bl	8007118 <_Balloc>
 8007226:	4680      	mov	r8, r0
 8007228:	b928      	cbnz	r0, 8007236 <__multadd+0x5a>
 800722a:	4602      	mov	r2, r0
 800722c:	4b0c      	ldr	r3, [pc, #48]	@ (8007260 <__multadd+0x84>)
 800722e:	480d      	ldr	r0, [pc, #52]	@ (8007264 <__multadd+0x88>)
 8007230:	21ba      	movs	r1, #186	@ 0xba
 8007232:	f000 fd19 	bl	8007c68 <__assert_func>
 8007236:	6922      	ldr	r2, [r4, #16]
 8007238:	3202      	adds	r2, #2
 800723a:	f104 010c 	add.w	r1, r4, #12
 800723e:	0092      	lsls	r2, r2, #2
 8007240:	300c      	adds	r0, #12
 8007242:	f7ff f800 	bl	8006246 <memcpy>
 8007246:	4621      	mov	r1, r4
 8007248:	4638      	mov	r0, r7
 800724a:	f7ff ffa5 	bl	8007198 <_Bfree>
 800724e:	4644      	mov	r4, r8
 8007250:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007254:	3501      	adds	r5, #1
 8007256:	615e      	str	r6, [r3, #20]
 8007258:	6125      	str	r5, [r4, #16]
 800725a:	4620      	mov	r0, r4
 800725c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007260:	08008430 	.word	0x08008430
 8007264:	08008441 	.word	0x08008441

08007268 <__hi0bits>:
 8007268:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800726c:	4603      	mov	r3, r0
 800726e:	bf36      	itet	cc
 8007270:	0403      	lslcc	r3, r0, #16
 8007272:	2000      	movcs	r0, #0
 8007274:	2010      	movcc	r0, #16
 8007276:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800727a:	bf3c      	itt	cc
 800727c:	021b      	lslcc	r3, r3, #8
 800727e:	3008      	addcc	r0, #8
 8007280:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007284:	bf3c      	itt	cc
 8007286:	011b      	lslcc	r3, r3, #4
 8007288:	3004      	addcc	r0, #4
 800728a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800728e:	bf3c      	itt	cc
 8007290:	009b      	lslcc	r3, r3, #2
 8007292:	3002      	addcc	r0, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	db05      	blt.n	80072a4 <__hi0bits+0x3c>
 8007298:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800729c:	f100 0001 	add.w	r0, r0, #1
 80072a0:	bf08      	it	eq
 80072a2:	2020      	moveq	r0, #32
 80072a4:	4770      	bx	lr

080072a6 <__lo0bits>:
 80072a6:	6803      	ldr	r3, [r0, #0]
 80072a8:	4602      	mov	r2, r0
 80072aa:	f013 0007 	ands.w	r0, r3, #7
 80072ae:	d00b      	beq.n	80072c8 <__lo0bits+0x22>
 80072b0:	07d9      	lsls	r1, r3, #31
 80072b2:	d421      	bmi.n	80072f8 <__lo0bits+0x52>
 80072b4:	0798      	lsls	r0, r3, #30
 80072b6:	bf49      	itett	mi
 80072b8:	085b      	lsrmi	r3, r3, #1
 80072ba:	089b      	lsrpl	r3, r3, #2
 80072bc:	2001      	movmi	r0, #1
 80072be:	6013      	strmi	r3, [r2, #0]
 80072c0:	bf5c      	itt	pl
 80072c2:	6013      	strpl	r3, [r2, #0]
 80072c4:	2002      	movpl	r0, #2
 80072c6:	4770      	bx	lr
 80072c8:	b299      	uxth	r1, r3
 80072ca:	b909      	cbnz	r1, 80072d0 <__lo0bits+0x2a>
 80072cc:	0c1b      	lsrs	r3, r3, #16
 80072ce:	2010      	movs	r0, #16
 80072d0:	b2d9      	uxtb	r1, r3
 80072d2:	b909      	cbnz	r1, 80072d8 <__lo0bits+0x32>
 80072d4:	3008      	adds	r0, #8
 80072d6:	0a1b      	lsrs	r3, r3, #8
 80072d8:	0719      	lsls	r1, r3, #28
 80072da:	bf04      	itt	eq
 80072dc:	091b      	lsreq	r3, r3, #4
 80072de:	3004      	addeq	r0, #4
 80072e0:	0799      	lsls	r1, r3, #30
 80072e2:	bf04      	itt	eq
 80072e4:	089b      	lsreq	r3, r3, #2
 80072e6:	3002      	addeq	r0, #2
 80072e8:	07d9      	lsls	r1, r3, #31
 80072ea:	d403      	bmi.n	80072f4 <__lo0bits+0x4e>
 80072ec:	085b      	lsrs	r3, r3, #1
 80072ee:	f100 0001 	add.w	r0, r0, #1
 80072f2:	d003      	beq.n	80072fc <__lo0bits+0x56>
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	4770      	bx	lr
 80072f8:	2000      	movs	r0, #0
 80072fa:	4770      	bx	lr
 80072fc:	2020      	movs	r0, #32
 80072fe:	4770      	bx	lr

08007300 <__i2b>:
 8007300:	b510      	push	{r4, lr}
 8007302:	460c      	mov	r4, r1
 8007304:	2101      	movs	r1, #1
 8007306:	f7ff ff07 	bl	8007118 <_Balloc>
 800730a:	4602      	mov	r2, r0
 800730c:	b928      	cbnz	r0, 800731a <__i2b+0x1a>
 800730e:	4b05      	ldr	r3, [pc, #20]	@ (8007324 <__i2b+0x24>)
 8007310:	4805      	ldr	r0, [pc, #20]	@ (8007328 <__i2b+0x28>)
 8007312:	f240 1145 	movw	r1, #325	@ 0x145
 8007316:	f000 fca7 	bl	8007c68 <__assert_func>
 800731a:	2301      	movs	r3, #1
 800731c:	6144      	str	r4, [r0, #20]
 800731e:	6103      	str	r3, [r0, #16]
 8007320:	bd10      	pop	{r4, pc}
 8007322:	bf00      	nop
 8007324:	08008430 	.word	0x08008430
 8007328:	08008441 	.word	0x08008441

0800732c <__multiply>:
 800732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	4617      	mov	r7, r2
 8007332:	690a      	ldr	r2, [r1, #16]
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	429a      	cmp	r2, r3
 8007338:	bfa8      	it	ge
 800733a:	463b      	movge	r3, r7
 800733c:	4689      	mov	r9, r1
 800733e:	bfa4      	itt	ge
 8007340:	460f      	movge	r7, r1
 8007342:	4699      	movge	r9, r3
 8007344:	693d      	ldr	r5, [r7, #16]
 8007346:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	eb05 060a 	add.w	r6, r5, sl
 8007352:	42b3      	cmp	r3, r6
 8007354:	b085      	sub	sp, #20
 8007356:	bfb8      	it	lt
 8007358:	3101      	addlt	r1, #1
 800735a:	f7ff fedd 	bl	8007118 <_Balloc>
 800735e:	b930      	cbnz	r0, 800736e <__multiply+0x42>
 8007360:	4602      	mov	r2, r0
 8007362:	4b41      	ldr	r3, [pc, #260]	@ (8007468 <__multiply+0x13c>)
 8007364:	4841      	ldr	r0, [pc, #260]	@ (800746c <__multiply+0x140>)
 8007366:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800736a:	f000 fc7d 	bl	8007c68 <__assert_func>
 800736e:	f100 0414 	add.w	r4, r0, #20
 8007372:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007376:	4623      	mov	r3, r4
 8007378:	2200      	movs	r2, #0
 800737a:	4573      	cmp	r3, lr
 800737c:	d320      	bcc.n	80073c0 <__multiply+0x94>
 800737e:	f107 0814 	add.w	r8, r7, #20
 8007382:	f109 0114 	add.w	r1, r9, #20
 8007386:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800738a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800738e:	9302      	str	r3, [sp, #8]
 8007390:	1beb      	subs	r3, r5, r7
 8007392:	3b15      	subs	r3, #21
 8007394:	f023 0303 	bic.w	r3, r3, #3
 8007398:	3304      	adds	r3, #4
 800739a:	3715      	adds	r7, #21
 800739c:	42bd      	cmp	r5, r7
 800739e:	bf38      	it	cc
 80073a0:	2304      	movcc	r3, #4
 80073a2:	9301      	str	r3, [sp, #4]
 80073a4:	9b02      	ldr	r3, [sp, #8]
 80073a6:	9103      	str	r1, [sp, #12]
 80073a8:	428b      	cmp	r3, r1
 80073aa:	d80c      	bhi.n	80073c6 <__multiply+0x9a>
 80073ac:	2e00      	cmp	r6, #0
 80073ae:	dd03      	ble.n	80073b8 <__multiply+0x8c>
 80073b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d055      	beq.n	8007464 <__multiply+0x138>
 80073b8:	6106      	str	r6, [r0, #16]
 80073ba:	b005      	add	sp, #20
 80073bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c0:	f843 2b04 	str.w	r2, [r3], #4
 80073c4:	e7d9      	b.n	800737a <__multiply+0x4e>
 80073c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80073ca:	f1ba 0f00 	cmp.w	sl, #0
 80073ce:	d01f      	beq.n	8007410 <__multiply+0xe4>
 80073d0:	46c4      	mov	ip, r8
 80073d2:	46a1      	mov	r9, r4
 80073d4:	2700      	movs	r7, #0
 80073d6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80073da:	f8d9 3000 	ldr.w	r3, [r9]
 80073de:	fa1f fb82 	uxth.w	fp, r2
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80073e8:	443b      	add	r3, r7
 80073ea:	f8d9 7000 	ldr.w	r7, [r9]
 80073ee:	0c12      	lsrs	r2, r2, #16
 80073f0:	0c3f      	lsrs	r7, r7, #16
 80073f2:	fb0a 7202 	mla	r2, sl, r2, r7
 80073f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007400:	4565      	cmp	r5, ip
 8007402:	f849 3b04 	str.w	r3, [r9], #4
 8007406:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800740a:	d8e4      	bhi.n	80073d6 <__multiply+0xaa>
 800740c:	9b01      	ldr	r3, [sp, #4]
 800740e:	50e7      	str	r7, [r4, r3]
 8007410:	9b03      	ldr	r3, [sp, #12]
 8007412:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007416:	3104      	adds	r1, #4
 8007418:	f1b9 0f00 	cmp.w	r9, #0
 800741c:	d020      	beq.n	8007460 <__multiply+0x134>
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	4647      	mov	r7, r8
 8007422:	46a4      	mov	ip, r4
 8007424:	f04f 0a00 	mov.w	sl, #0
 8007428:	f8b7 b000 	ldrh.w	fp, [r7]
 800742c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007430:	fb09 220b 	mla	r2, r9, fp, r2
 8007434:	4452      	add	r2, sl
 8007436:	b29b      	uxth	r3, r3
 8007438:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800743c:	f84c 3b04 	str.w	r3, [ip], #4
 8007440:	f857 3b04 	ldr.w	r3, [r7], #4
 8007444:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007448:	f8bc 3000 	ldrh.w	r3, [ip]
 800744c:	fb09 330a 	mla	r3, r9, sl, r3
 8007450:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007454:	42bd      	cmp	r5, r7
 8007456:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800745a:	d8e5      	bhi.n	8007428 <__multiply+0xfc>
 800745c:	9a01      	ldr	r2, [sp, #4]
 800745e:	50a3      	str	r3, [r4, r2]
 8007460:	3404      	adds	r4, #4
 8007462:	e79f      	b.n	80073a4 <__multiply+0x78>
 8007464:	3e01      	subs	r6, #1
 8007466:	e7a1      	b.n	80073ac <__multiply+0x80>
 8007468:	08008430 	.word	0x08008430
 800746c:	08008441 	.word	0x08008441

08007470 <__pow5mult>:
 8007470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007474:	4615      	mov	r5, r2
 8007476:	f012 0203 	ands.w	r2, r2, #3
 800747a:	4607      	mov	r7, r0
 800747c:	460e      	mov	r6, r1
 800747e:	d007      	beq.n	8007490 <__pow5mult+0x20>
 8007480:	4c25      	ldr	r4, [pc, #148]	@ (8007518 <__pow5mult+0xa8>)
 8007482:	3a01      	subs	r2, #1
 8007484:	2300      	movs	r3, #0
 8007486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800748a:	f7ff fea7 	bl	80071dc <__multadd>
 800748e:	4606      	mov	r6, r0
 8007490:	10ad      	asrs	r5, r5, #2
 8007492:	d03d      	beq.n	8007510 <__pow5mult+0xa0>
 8007494:	69fc      	ldr	r4, [r7, #28]
 8007496:	b97c      	cbnz	r4, 80074b8 <__pow5mult+0x48>
 8007498:	2010      	movs	r0, #16
 800749a:	f7ff fd87 	bl	8006fac <malloc>
 800749e:	4602      	mov	r2, r0
 80074a0:	61f8      	str	r0, [r7, #28]
 80074a2:	b928      	cbnz	r0, 80074b0 <__pow5mult+0x40>
 80074a4:	4b1d      	ldr	r3, [pc, #116]	@ (800751c <__pow5mult+0xac>)
 80074a6:	481e      	ldr	r0, [pc, #120]	@ (8007520 <__pow5mult+0xb0>)
 80074a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80074ac:	f000 fbdc 	bl	8007c68 <__assert_func>
 80074b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074b4:	6004      	str	r4, [r0, #0]
 80074b6:	60c4      	str	r4, [r0, #12]
 80074b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80074bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074c0:	b94c      	cbnz	r4, 80074d6 <__pow5mult+0x66>
 80074c2:	f240 2171 	movw	r1, #625	@ 0x271
 80074c6:	4638      	mov	r0, r7
 80074c8:	f7ff ff1a 	bl	8007300 <__i2b>
 80074cc:	2300      	movs	r3, #0
 80074ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80074d2:	4604      	mov	r4, r0
 80074d4:	6003      	str	r3, [r0, #0]
 80074d6:	f04f 0900 	mov.w	r9, #0
 80074da:	07eb      	lsls	r3, r5, #31
 80074dc:	d50a      	bpl.n	80074f4 <__pow5mult+0x84>
 80074de:	4631      	mov	r1, r6
 80074e0:	4622      	mov	r2, r4
 80074e2:	4638      	mov	r0, r7
 80074e4:	f7ff ff22 	bl	800732c <__multiply>
 80074e8:	4631      	mov	r1, r6
 80074ea:	4680      	mov	r8, r0
 80074ec:	4638      	mov	r0, r7
 80074ee:	f7ff fe53 	bl	8007198 <_Bfree>
 80074f2:	4646      	mov	r6, r8
 80074f4:	106d      	asrs	r5, r5, #1
 80074f6:	d00b      	beq.n	8007510 <__pow5mult+0xa0>
 80074f8:	6820      	ldr	r0, [r4, #0]
 80074fa:	b938      	cbnz	r0, 800750c <__pow5mult+0x9c>
 80074fc:	4622      	mov	r2, r4
 80074fe:	4621      	mov	r1, r4
 8007500:	4638      	mov	r0, r7
 8007502:	f7ff ff13 	bl	800732c <__multiply>
 8007506:	6020      	str	r0, [r4, #0]
 8007508:	f8c0 9000 	str.w	r9, [r0]
 800750c:	4604      	mov	r4, r0
 800750e:	e7e4      	b.n	80074da <__pow5mult+0x6a>
 8007510:	4630      	mov	r0, r6
 8007512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007516:	bf00      	nop
 8007518:	080084f4 	.word	0x080084f4
 800751c:	080083c1 	.word	0x080083c1
 8007520:	08008441 	.word	0x08008441

08007524 <__lshift>:
 8007524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007528:	460c      	mov	r4, r1
 800752a:	6849      	ldr	r1, [r1, #4]
 800752c:	6923      	ldr	r3, [r4, #16]
 800752e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007532:	68a3      	ldr	r3, [r4, #8]
 8007534:	4607      	mov	r7, r0
 8007536:	4691      	mov	r9, r2
 8007538:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800753c:	f108 0601 	add.w	r6, r8, #1
 8007540:	42b3      	cmp	r3, r6
 8007542:	db0b      	blt.n	800755c <__lshift+0x38>
 8007544:	4638      	mov	r0, r7
 8007546:	f7ff fde7 	bl	8007118 <_Balloc>
 800754a:	4605      	mov	r5, r0
 800754c:	b948      	cbnz	r0, 8007562 <__lshift+0x3e>
 800754e:	4602      	mov	r2, r0
 8007550:	4b28      	ldr	r3, [pc, #160]	@ (80075f4 <__lshift+0xd0>)
 8007552:	4829      	ldr	r0, [pc, #164]	@ (80075f8 <__lshift+0xd4>)
 8007554:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007558:	f000 fb86 	bl	8007c68 <__assert_func>
 800755c:	3101      	adds	r1, #1
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	e7ee      	b.n	8007540 <__lshift+0x1c>
 8007562:	2300      	movs	r3, #0
 8007564:	f100 0114 	add.w	r1, r0, #20
 8007568:	f100 0210 	add.w	r2, r0, #16
 800756c:	4618      	mov	r0, r3
 800756e:	4553      	cmp	r3, sl
 8007570:	db33      	blt.n	80075da <__lshift+0xb6>
 8007572:	6920      	ldr	r0, [r4, #16]
 8007574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007578:	f104 0314 	add.w	r3, r4, #20
 800757c:	f019 091f 	ands.w	r9, r9, #31
 8007580:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007584:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007588:	d02b      	beq.n	80075e2 <__lshift+0xbe>
 800758a:	f1c9 0e20 	rsb	lr, r9, #32
 800758e:	468a      	mov	sl, r1
 8007590:	2200      	movs	r2, #0
 8007592:	6818      	ldr	r0, [r3, #0]
 8007594:	fa00 f009 	lsl.w	r0, r0, r9
 8007598:	4310      	orrs	r0, r2
 800759a:	f84a 0b04 	str.w	r0, [sl], #4
 800759e:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a2:	459c      	cmp	ip, r3
 80075a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80075a8:	d8f3      	bhi.n	8007592 <__lshift+0x6e>
 80075aa:	ebac 0304 	sub.w	r3, ip, r4
 80075ae:	3b15      	subs	r3, #21
 80075b0:	f023 0303 	bic.w	r3, r3, #3
 80075b4:	3304      	adds	r3, #4
 80075b6:	f104 0015 	add.w	r0, r4, #21
 80075ba:	4560      	cmp	r0, ip
 80075bc:	bf88      	it	hi
 80075be:	2304      	movhi	r3, #4
 80075c0:	50ca      	str	r2, [r1, r3]
 80075c2:	b10a      	cbz	r2, 80075c8 <__lshift+0xa4>
 80075c4:	f108 0602 	add.w	r6, r8, #2
 80075c8:	3e01      	subs	r6, #1
 80075ca:	4638      	mov	r0, r7
 80075cc:	612e      	str	r6, [r5, #16]
 80075ce:	4621      	mov	r1, r4
 80075d0:	f7ff fde2 	bl	8007198 <_Bfree>
 80075d4:	4628      	mov	r0, r5
 80075d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075da:	f842 0f04 	str.w	r0, [r2, #4]!
 80075de:	3301      	adds	r3, #1
 80075e0:	e7c5      	b.n	800756e <__lshift+0x4a>
 80075e2:	3904      	subs	r1, #4
 80075e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80075ec:	459c      	cmp	ip, r3
 80075ee:	d8f9      	bhi.n	80075e4 <__lshift+0xc0>
 80075f0:	e7ea      	b.n	80075c8 <__lshift+0xa4>
 80075f2:	bf00      	nop
 80075f4:	08008430 	.word	0x08008430
 80075f8:	08008441 	.word	0x08008441

080075fc <__mcmp>:
 80075fc:	690a      	ldr	r2, [r1, #16]
 80075fe:	4603      	mov	r3, r0
 8007600:	6900      	ldr	r0, [r0, #16]
 8007602:	1a80      	subs	r0, r0, r2
 8007604:	b530      	push	{r4, r5, lr}
 8007606:	d10e      	bne.n	8007626 <__mcmp+0x2a>
 8007608:	3314      	adds	r3, #20
 800760a:	3114      	adds	r1, #20
 800760c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007610:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007614:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007618:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800761c:	4295      	cmp	r5, r2
 800761e:	d003      	beq.n	8007628 <__mcmp+0x2c>
 8007620:	d205      	bcs.n	800762e <__mcmp+0x32>
 8007622:	f04f 30ff 	mov.w	r0, #4294967295
 8007626:	bd30      	pop	{r4, r5, pc}
 8007628:	42a3      	cmp	r3, r4
 800762a:	d3f3      	bcc.n	8007614 <__mcmp+0x18>
 800762c:	e7fb      	b.n	8007626 <__mcmp+0x2a>
 800762e:	2001      	movs	r0, #1
 8007630:	e7f9      	b.n	8007626 <__mcmp+0x2a>
	...

08007634 <__mdiff>:
 8007634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007638:	4689      	mov	r9, r1
 800763a:	4606      	mov	r6, r0
 800763c:	4611      	mov	r1, r2
 800763e:	4648      	mov	r0, r9
 8007640:	4614      	mov	r4, r2
 8007642:	f7ff ffdb 	bl	80075fc <__mcmp>
 8007646:	1e05      	subs	r5, r0, #0
 8007648:	d112      	bne.n	8007670 <__mdiff+0x3c>
 800764a:	4629      	mov	r1, r5
 800764c:	4630      	mov	r0, r6
 800764e:	f7ff fd63 	bl	8007118 <_Balloc>
 8007652:	4602      	mov	r2, r0
 8007654:	b928      	cbnz	r0, 8007662 <__mdiff+0x2e>
 8007656:	4b3f      	ldr	r3, [pc, #252]	@ (8007754 <__mdiff+0x120>)
 8007658:	f240 2137 	movw	r1, #567	@ 0x237
 800765c:	483e      	ldr	r0, [pc, #248]	@ (8007758 <__mdiff+0x124>)
 800765e:	f000 fb03 	bl	8007c68 <__assert_func>
 8007662:	2301      	movs	r3, #1
 8007664:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007668:	4610      	mov	r0, r2
 800766a:	b003      	add	sp, #12
 800766c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007670:	bfbc      	itt	lt
 8007672:	464b      	movlt	r3, r9
 8007674:	46a1      	movlt	r9, r4
 8007676:	4630      	mov	r0, r6
 8007678:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800767c:	bfba      	itte	lt
 800767e:	461c      	movlt	r4, r3
 8007680:	2501      	movlt	r5, #1
 8007682:	2500      	movge	r5, #0
 8007684:	f7ff fd48 	bl	8007118 <_Balloc>
 8007688:	4602      	mov	r2, r0
 800768a:	b918      	cbnz	r0, 8007694 <__mdiff+0x60>
 800768c:	4b31      	ldr	r3, [pc, #196]	@ (8007754 <__mdiff+0x120>)
 800768e:	f240 2145 	movw	r1, #581	@ 0x245
 8007692:	e7e3      	b.n	800765c <__mdiff+0x28>
 8007694:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007698:	6926      	ldr	r6, [r4, #16]
 800769a:	60c5      	str	r5, [r0, #12]
 800769c:	f109 0310 	add.w	r3, r9, #16
 80076a0:	f109 0514 	add.w	r5, r9, #20
 80076a4:	f104 0e14 	add.w	lr, r4, #20
 80076a8:	f100 0b14 	add.w	fp, r0, #20
 80076ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80076b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80076b4:	9301      	str	r3, [sp, #4]
 80076b6:	46d9      	mov	r9, fp
 80076b8:	f04f 0c00 	mov.w	ip, #0
 80076bc:	9b01      	ldr	r3, [sp, #4]
 80076be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80076c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80076c6:	9301      	str	r3, [sp, #4]
 80076c8:	fa1f f38a 	uxth.w	r3, sl
 80076cc:	4619      	mov	r1, r3
 80076ce:	b283      	uxth	r3, r0
 80076d0:	1acb      	subs	r3, r1, r3
 80076d2:	0c00      	lsrs	r0, r0, #16
 80076d4:	4463      	add	r3, ip
 80076d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80076da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80076de:	b29b      	uxth	r3, r3
 80076e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80076e4:	4576      	cmp	r6, lr
 80076e6:	f849 3b04 	str.w	r3, [r9], #4
 80076ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80076ee:	d8e5      	bhi.n	80076bc <__mdiff+0x88>
 80076f0:	1b33      	subs	r3, r6, r4
 80076f2:	3b15      	subs	r3, #21
 80076f4:	f023 0303 	bic.w	r3, r3, #3
 80076f8:	3415      	adds	r4, #21
 80076fa:	3304      	adds	r3, #4
 80076fc:	42a6      	cmp	r6, r4
 80076fe:	bf38      	it	cc
 8007700:	2304      	movcc	r3, #4
 8007702:	441d      	add	r5, r3
 8007704:	445b      	add	r3, fp
 8007706:	461e      	mov	r6, r3
 8007708:	462c      	mov	r4, r5
 800770a:	4544      	cmp	r4, r8
 800770c:	d30e      	bcc.n	800772c <__mdiff+0xf8>
 800770e:	f108 0103 	add.w	r1, r8, #3
 8007712:	1b49      	subs	r1, r1, r5
 8007714:	f021 0103 	bic.w	r1, r1, #3
 8007718:	3d03      	subs	r5, #3
 800771a:	45a8      	cmp	r8, r5
 800771c:	bf38      	it	cc
 800771e:	2100      	movcc	r1, #0
 8007720:	440b      	add	r3, r1
 8007722:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007726:	b191      	cbz	r1, 800774e <__mdiff+0x11a>
 8007728:	6117      	str	r7, [r2, #16]
 800772a:	e79d      	b.n	8007668 <__mdiff+0x34>
 800772c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007730:	46e6      	mov	lr, ip
 8007732:	0c08      	lsrs	r0, r1, #16
 8007734:	fa1c fc81 	uxtah	ip, ip, r1
 8007738:	4471      	add	r1, lr
 800773a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800773e:	b289      	uxth	r1, r1
 8007740:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007744:	f846 1b04 	str.w	r1, [r6], #4
 8007748:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800774c:	e7dd      	b.n	800770a <__mdiff+0xd6>
 800774e:	3f01      	subs	r7, #1
 8007750:	e7e7      	b.n	8007722 <__mdiff+0xee>
 8007752:	bf00      	nop
 8007754:	08008430 	.word	0x08008430
 8007758:	08008441 	.word	0x08008441

0800775c <__d2b>:
 800775c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007760:	460f      	mov	r7, r1
 8007762:	2101      	movs	r1, #1
 8007764:	ec59 8b10 	vmov	r8, r9, d0
 8007768:	4616      	mov	r6, r2
 800776a:	f7ff fcd5 	bl	8007118 <_Balloc>
 800776e:	4604      	mov	r4, r0
 8007770:	b930      	cbnz	r0, 8007780 <__d2b+0x24>
 8007772:	4602      	mov	r2, r0
 8007774:	4b23      	ldr	r3, [pc, #140]	@ (8007804 <__d2b+0xa8>)
 8007776:	4824      	ldr	r0, [pc, #144]	@ (8007808 <__d2b+0xac>)
 8007778:	f240 310f 	movw	r1, #783	@ 0x30f
 800777c:	f000 fa74 	bl	8007c68 <__assert_func>
 8007780:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007784:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007788:	b10d      	cbz	r5, 800778e <__d2b+0x32>
 800778a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	f1b8 0300 	subs.w	r3, r8, #0
 8007794:	d023      	beq.n	80077de <__d2b+0x82>
 8007796:	4668      	mov	r0, sp
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	f7ff fd84 	bl	80072a6 <__lo0bits>
 800779e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80077a2:	b1d0      	cbz	r0, 80077da <__d2b+0x7e>
 80077a4:	f1c0 0320 	rsb	r3, r0, #32
 80077a8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ac:	430b      	orrs	r3, r1
 80077ae:	40c2      	lsrs	r2, r0
 80077b0:	6163      	str	r3, [r4, #20]
 80077b2:	9201      	str	r2, [sp, #4]
 80077b4:	9b01      	ldr	r3, [sp, #4]
 80077b6:	61a3      	str	r3, [r4, #24]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	bf0c      	ite	eq
 80077bc:	2201      	moveq	r2, #1
 80077be:	2202      	movne	r2, #2
 80077c0:	6122      	str	r2, [r4, #16]
 80077c2:	b1a5      	cbz	r5, 80077ee <__d2b+0x92>
 80077c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80077c8:	4405      	add	r5, r0
 80077ca:	603d      	str	r5, [r7, #0]
 80077cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80077d0:	6030      	str	r0, [r6, #0]
 80077d2:	4620      	mov	r0, r4
 80077d4:	b003      	add	sp, #12
 80077d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077da:	6161      	str	r1, [r4, #20]
 80077dc:	e7ea      	b.n	80077b4 <__d2b+0x58>
 80077de:	a801      	add	r0, sp, #4
 80077e0:	f7ff fd61 	bl	80072a6 <__lo0bits>
 80077e4:	9b01      	ldr	r3, [sp, #4]
 80077e6:	6163      	str	r3, [r4, #20]
 80077e8:	3020      	adds	r0, #32
 80077ea:	2201      	movs	r2, #1
 80077ec:	e7e8      	b.n	80077c0 <__d2b+0x64>
 80077ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80077f6:	6038      	str	r0, [r7, #0]
 80077f8:	6918      	ldr	r0, [r3, #16]
 80077fa:	f7ff fd35 	bl	8007268 <__hi0bits>
 80077fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007802:	e7e5      	b.n	80077d0 <__d2b+0x74>
 8007804:	08008430 	.word	0x08008430
 8007808:	08008441 	.word	0x08008441

0800780c <__ssputs_r>:
 800780c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007810:	688e      	ldr	r6, [r1, #8]
 8007812:	461f      	mov	r7, r3
 8007814:	42be      	cmp	r6, r7
 8007816:	680b      	ldr	r3, [r1, #0]
 8007818:	4682      	mov	sl, r0
 800781a:	460c      	mov	r4, r1
 800781c:	4690      	mov	r8, r2
 800781e:	d82d      	bhi.n	800787c <__ssputs_r+0x70>
 8007820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007824:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007828:	d026      	beq.n	8007878 <__ssputs_r+0x6c>
 800782a:	6965      	ldr	r5, [r4, #20]
 800782c:	6909      	ldr	r1, [r1, #16]
 800782e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007832:	eba3 0901 	sub.w	r9, r3, r1
 8007836:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800783a:	1c7b      	adds	r3, r7, #1
 800783c:	444b      	add	r3, r9
 800783e:	106d      	asrs	r5, r5, #1
 8007840:	429d      	cmp	r5, r3
 8007842:	bf38      	it	cc
 8007844:	461d      	movcc	r5, r3
 8007846:	0553      	lsls	r3, r2, #21
 8007848:	d527      	bpl.n	800789a <__ssputs_r+0x8e>
 800784a:	4629      	mov	r1, r5
 800784c:	f7ff fbd8 	bl	8007000 <_malloc_r>
 8007850:	4606      	mov	r6, r0
 8007852:	b360      	cbz	r0, 80078ae <__ssputs_r+0xa2>
 8007854:	6921      	ldr	r1, [r4, #16]
 8007856:	464a      	mov	r2, r9
 8007858:	f7fe fcf5 	bl	8006246 <memcpy>
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007866:	81a3      	strh	r3, [r4, #12]
 8007868:	6126      	str	r6, [r4, #16]
 800786a:	6165      	str	r5, [r4, #20]
 800786c:	444e      	add	r6, r9
 800786e:	eba5 0509 	sub.w	r5, r5, r9
 8007872:	6026      	str	r6, [r4, #0]
 8007874:	60a5      	str	r5, [r4, #8]
 8007876:	463e      	mov	r6, r7
 8007878:	42be      	cmp	r6, r7
 800787a:	d900      	bls.n	800787e <__ssputs_r+0x72>
 800787c:	463e      	mov	r6, r7
 800787e:	6820      	ldr	r0, [r4, #0]
 8007880:	4632      	mov	r2, r6
 8007882:	4641      	mov	r1, r8
 8007884:	f000 f9c6 	bl	8007c14 <memmove>
 8007888:	68a3      	ldr	r3, [r4, #8]
 800788a:	1b9b      	subs	r3, r3, r6
 800788c:	60a3      	str	r3, [r4, #8]
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	4433      	add	r3, r6
 8007892:	6023      	str	r3, [r4, #0]
 8007894:	2000      	movs	r0, #0
 8007896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789a:	462a      	mov	r2, r5
 800789c:	f000 fa28 	bl	8007cf0 <_realloc_r>
 80078a0:	4606      	mov	r6, r0
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d1e0      	bne.n	8007868 <__ssputs_r+0x5c>
 80078a6:	6921      	ldr	r1, [r4, #16]
 80078a8:	4650      	mov	r0, sl
 80078aa:	f7ff fb35 	bl	8006f18 <_free_r>
 80078ae:	230c      	movs	r3, #12
 80078b0:	f8ca 3000 	str.w	r3, [sl]
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078ba:	81a3      	strh	r3, [r4, #12]
 80078bc:	f04f 30ff 	mov.w	r0, #4294967295
 80078c0:	e7e9      	b.n	8007896 <__ssputs_r+0x8a>
	...

080078c4 <_svfiprintf_r>:
 80078c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c8:	4698      	mov	r8, r3
 80078ca:	898b      	ldrh	r3, [r1, #12]
 80078cc:	061b      	lsls	r3, r3, #24
 80078ce:	b09d      	sub	sp, #116	@ 0x74
 80078d0:	4607      	mov	r7, r0
 80078d2:	460d      	mov	r5, r1
 80078d4:	4614      	mov	r4, r2
 80078d6:	d510      	bpl.n	80078fa <_svfiprintf_r+0x36>
 80078d8:	690b      	ldr	r3, [r1, #16]
 80078da:	b973      	cbnz	r3, 80078fa <_svfiprintf_r+0x36>
 80078dc:	2140      	movs	r1, #64	@ 0x40
 80078de:	f7ff fb8f 	bl	8007000 <_malloc_r>
 80078e2:	6028      	str	r0, [r5, #0]
 80078e4:	6128      	str	r0, [r5, #16]
 80078e6:	b930      	cbnz	r0, 80078f6 <_svfiprintf_r+0x32>
 80078e8:	230c      	movs	r3, #12
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	f04f 30ff 	mov.w	r0, #4294967295
 80078f0:	b01d      	add	sp, #116	@ 0x74
 80078f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f6:	2340      	movs	r3, #64	@ 0x40
 80078f8:	616b      	str	r3, [r5, #20]
 80078fa:	2300      	movs	r3, #0
 80078fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80078fe:	2320      	movs	r3, #32
 8007900:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007904:	f8cd 800c 	str.w	r8, [sp, #12]
 8007908:	2330      	movs	r3, #48	@ 0x30
 800790a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007aa8 <_svfiprintf_r+0x1e4>
 800790e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007912:	f04f 0901 	mov.w	r9, #1
 8007916:	4623      	mov	r3, r4
 8007918:	469a      	mov	sl, r3
 800791a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800791e:	b10a      	cbz	r2, 8007924 <_svfiprintf_r+0x60>
 8007920:	2a25      	cmp	r2, #37	@ 0x25
 8007922:	d1f9      	bne.n	8007918 <_svfiprintf_r+0x54>
 8007924:	ebba 0b04 	subs.w	fp, sl, r4
 8007928:	d00b      	beq.n	8007942 <_svfiprintf_r+0x7e>
 800792a:	465b      	mov	r3, fp
 800792c:	4622      	mov	r2, r4
 800792e:	4629      	mov	r1, r5
 8007930:	4638      	mov	r0, r7
 8007932:	f7ff ff6b 	bl	800780c <__ssputs_r>
 8007936:	3001      	adds	r0, #1
 8007938:	f000 80a7 	beq.w	8007a8a <_svfiprintf_r+0x1c6>
 800793c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800793e:	445a      	add	r2, fp
 8007940:	9209      	str	r2, [sp, #36]	@ 0x24
 8007942:	f89a 3000 	ldrb.w	r3, [sl]
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 809f 	beq.w	8007a8a <_svfiprintf_r+0x1c6>
 800794c:	2300      	movs	r3, #0
 800794e:	f04f 32ff 	mov.w	r2, #4294967295
 8007952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007956:	f10a 0a01 	add.w	sl, sl, #1
 800795a:	9304      	str	r3, [sp, #16]
 800795c:	9307      	str	r3, [sp, #28]
 800795e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007962:	931a      	str	r3, [sp, #104]	@ 0x68
 8007964:	4654      	mov	r4, sl
 8007966:	2205      	movs	r2, #5
 8007968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800796c:	484e      	ldr	r0, [pc, #312]	@ (8007aa8 <_svfiprintf_r+0x1e4>)
 800796e:	f7f8 fc2f 	bl	80001d0 <memchr>
 8007972:	9a04      	ldr	r2, [sp, #16]
 8007974:	b9d8      	cbnz	r0, 80079ae <_svfiprintf_r+0xea>
 8007976:	06d0      	lsls	r0, r2, #27
 8007978:	bf44      	itt	mi
 800797a:	2320      	movmi	r3, #32
 800797c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007980:	0711      	lsls	r1, r2, #28
 8007982:	bf44      	itt	mi
 8007984:	232b      	movmi	r3, #43	@ 0x2b
 8007986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800798a:	f89a 3000 	ldrb.w	r3, [sl]
 800798e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007990:	d015      	beq.n	80079be <_svfiprintf_r+0xfa>
 8007992:	9a07      	ldr	r2, [sp, #28]
 8007994:	4654      	mov	r4, sl
 8007996:	2000      	movs	r0, #0
 8007998:	f04f 0c0a 	mov.w	ip, #10
 800799c:	4621      	mov	r1, r4
 800799e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079a2:	3b30      	subs	r3, #48	@ 0x30
 80079a4:	2b09      	cmp	r3, #9
 80079a6:	d94b      	bls.n	8007a40 <_svfiprintf_r+0x17c>
 80079a8:	b1b0      	cbz	r0, 80079d8 <_svfiprintf_r+0x114>
 80079aa:	9207      	str	r2, [sp, #28]
 80079ac:	e014      	b.n	80079d8 <_svfiprintf_r+0x114>
 80079ae:	eba0 0308 	sub.w	r3, r0, r8
 80079b2:	fa09 f303 	lsl.w	r3, r9, r3
 80079b6:	4313      	orrs	r3, r2
 80079b8:	9304      	str	r3, [sp, #16]
 80079ba:	46a2      	mov	sl, r4
 80079bc:	e7d2      	b.n	8007964 <_svfiprintf_r+0xa0>
 80079be:	9b03      	ldr	r3, [sp, #12]
 80079c0:	1d19      	adds	r1, r3, #4
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	9103      	str	r1, [sp, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	bfbb      	ittet	lt
 80079ca:	425b      	neglt	r3, r3
 80079cc:	f042 0202 	orrlt.w	r2, r2, #2
 80079d0:	9307      	strge	r3, [sp, #28]
 80079d2:	9307      	strlt	r3, [sp, #28]
 80079d4:	bfb8      	it	lt
 80079d6:	9204      	strlt	r2, [sp, #16]
 80079d8:	7823      	ldrb	r3, [r4, #0]
 80079da:	2b2e      	cmp	r3, #46	@ 0x2e
 80079dc:	d10a      	bne.n	80079f4 <_svfiprintf_r+0x130>
 80079de:	7863      	ldrb	r3, [r4, #1]
 80079e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80079e2:	d132      	bne.n	8007a4a <_svfiprintf_r+0x186>
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	1d1a      	adds	r2, r3, #4
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	9203      	str	r2, [sp, #12]
 80079ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079f0:	3402      	adds	r4, #2
 80079f2:	9305      	str	r3, [sp, #20]
 80079f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ab8 <_svfiprintf_r+0x1f4>
 80079f8:	7821      	ldrb	r1, [r4, #0]
 80079fa:	2203      	movs	r2, #3
 80079fc:	4650      	mov	r0, sl
 80079fe:	f7f8 fbe7 	bl	80001d0 <memchr>
 8007a02:	b138      	cbz	r0, 8007a14 <_svfiprintf_r+0x150>
 8007a04:	9b04      	ldr	r3, [sp, #16]
 8007a06:	eba0 000a 	sub.w	r0, r0, sl
 8007a0a:	2240      	movs	r2, #64	@ 0x40
 8007a0c:	4082      	lsls	r2, r0
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	3401      	adds	r4, #1
 8007a12:	9304      	str	r3, [sp, #16]
 8007a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a18:	4824      	ldr	r0, [pc, #144]	@ (8007aac <_svfiprintf_r+0x1e8>)
 8007a1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a1e:	2206      	movs	r2, #6
 8007a20:	f7f8 fbd6 	bl	80001d0 <memchr>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d036      	beq.n	8007a96 <_svfiprintf_r+0x1d2>
 8007a28:	4b21      	ldr	r3, [pc, #132]	@ (8007ab0 <_svfiprintf_r+0x1ec>)
 8007a2a:	bb1b      	cbnz	r3, 8007a74 <_svfiprintf_r+0x1b0>
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	3307      	adds	r3, #7
 8007a30:	f023 0307 	bic.w	r3, r3, #7
 8007a34:	3308      	adds	r3, #8
 8007a36:	9303      	str	r3, [sp, #12]
 8007a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a3a:	4433      	add	r3, r6
 8007a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a3e:	e76a      	b.n	8007916 <_svfiprintf_r+0x52>
 8007a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a44:	460c      	mov	r4, r1
 8007a46:	2001      	movs	r0, #1
 8007a48:	e7a8      	b.n	800799c <_svfiprintf_r+0xd8>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	3401      	adds	r4, #1
 8007a4e:	9305      	str	r3, [sp, #20]
 8007a50:	4619      	mov	r1, r3
 8007a52:	f04f 0c0a 	mov.w	ip, #10
 8007a56:	4620      	mov	r0, r4
 8007a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a5c:	3a30      	subs	r2, #48	@ 0x30
 8007a5e:	2a09      	cmp	r2, #9
 8007a60:	d903      	bls.n	8007a6a <_svfiprintf_r+0x1a6>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0c6      	beq.n	80079f4 <_svfiprintf_r+0x130>
 8007a66:	9105      	str	r1, [sp, #20]
 8007a68:	e7c4      	b.n	80079f4 <_svfiprintf_r+0x130>
 8007a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a6e:	4604      	mov	r4, r0
 8007a70:	2301      	movs	r3, #1
 8007a72:	e7f0      	b.n	8007a56 <_svfiprintf_r+0x192>
 8007a74:	ab03      	add	r3, sp, #12
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	462a      	mov	r2, r5
 8007a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab4 <_svfiprintf_r+0x1f0>)
 8007a7c:	a904      	add	r1, sp, #16
 8007a7e:	4638      	mov	r0, r7
 8007a80:	f7fd fe84 	bl	800578c <_printf_float>
 8007a84:	1c42      	adds	r2, r0, #1
 8007a86:	4606      	mov	r6, r0
 8007a88:	d1d6      	bne.n	8007a38 <_svfiprintf_r+0x174>
 8007a8a:	89ab      	ldrh	r3, [r5, #12]
 8007a8c:	065b      	lsls	r3, r3, #25
 8007a8e:	f53f af2d 	bmi.w	80078ec <_svfiprintf_r+0x28>
 8007a92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a94:	e72c      	b.n	80078f0 <_svfiprintf_r+0x2c>
 8007a96:	ab03      	add	r3, sp, #12
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	462a      	mov	r2, r5
 8007a9c:	4b05      	ldr	r3, [pc, #20]	@ (8007ab4 <_svfiprintf_r+0x1f0>)
 8007a9e:	a904      	add	r1, sp, #16
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	f7fe f90b 	bl	8005cbc <_printf_i>
 8007aa6:	e7ed      	b.n	8007a84 <_svfiprintf_r+0x1c0>
 8007aa8:	0800849a 	.word	0x0800849a
 8007aac:	080084a4 	.word	0x080084a4
 8007ab0:	0800578d 	.word	0x0800578d
 8007ab4:	0800780d 	.word	0x0800780d
 8007ab8:	080084a0 	.word	0x080084a0

08007abc <__sflush_r>:
 8007abc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac4:	0716      	lsls	r6, r2, #28
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	460c      	mov	r4, r1
 8007aca:	d454      	bmi.n	8007b76 <__sflush_r+0xba>
 8007acc:	684b      	ldr	r3, [r1, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	dc02      	bgt.n	8007ad8 <__sflush_r+0x1c>
 8007ad2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	dd48      	ble.n	8007b6a <__sflush_r+0xae>
 8007ad8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ada:	2e00      	cmp	r6, #0
 8007adc:	d045      	beq.n	8007b6a <__sflush_r+0xae>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ae4:	682f      	ldr	r7, [r5, #0]
 8007ae6:	6a21      	ldr	r1, [r4, #32]
 8007ae8:	602b      	str	r3, [r5, #0]
 8007aea:	d030      	beq.n	8007b4e <__sflush_r+0x92>
 8007aec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	0759      	lsls	r1, r3, #29
 8007af2:	d505      	bpl.n	8007b00 <__sflush_r+0x44>
 8007af4:	6863      	ldr	r3, [r4, #4]
 8007af6:	1ad2      	subs	r2, r2, r3
 8007af8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007afa:	b10b      	cbz	r3, 8007b00 <__sflush_r+0x44>
 8007afc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007afe:	1ad2      	subs	r2, r2, r3
 8007b00:	2300      	movs	r3, #0
 8007b02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b04:	6a21      	ldr	r1, [r4, #32]
 8007b06:	4628      	mov	r0, r5
 8007b08:	47b0      	blx	r6
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	d106      	bne.n	8007b1e <__sflush_r+0x62>
 8007b10:	6829      	ldr	r1, [r5, #0]
 8007b12:	291d      	cmp	r1, #29
 8007b14:	d82b      	bhi.n	8007b6e <__sflush_r+0xb2>
 8007b16:	4a2a      	ldr	r2, [pc, #168]	@ (8007bc0 <__sflush_r+0x104>)
 8007b18:	40ca      	lsrs	r2, r1
 8007b1a:	07d6      	lsls	r6, r2, #31
 8007b1c:	d527      	bpl.n	8007b6e <__sflush_r+0xb2>
 8007b1e:	2200      	movs	r2, #0
 8007b20:	6062      	str	r2, [r4, #4]
 8007b22:	04d9      	lsls	r1, r3, #19
 8007b24:	6922      	ldr	r2, [r4, #16]
 8007b26:	6022      	str	r2, [r4, #0]
 8007b28:	d504      	bpl.n	8007b34 <__sflush_r+0x78>
 8007b2a:	1c42      	adds	r2, r0, #1
 8007b2c:	d101      	bne.n	8007b32 <__sflush_r+0x76>
 8007b2e:	682b      	ldr	r3, [r5, #0]
 8007b30:	b903      	cbnz	r3, 8007b34 <__sflush_r+0x78>
 8007b32:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b36:	602f      	str	r7, [r5, #0]
 8007b38:	b1b9      	cbz	r1, 8007b6a <__sflush_r+0xae>
 8007b3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b3e:	4299      	cmp	r1, r3
 8007b40:	d002      	beq.n	8007b48 <__sflush_r+0x8c>
 8007b42:	4628      	mov	r0, r5
 8007b44:	f7ff f9e8 	bl	8006f18 <_free_r>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b4c:	e00d      	b.n	8007b6a <__sflush_r+0xae>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4628      	mov	r0, r5
 8007b52:	47b0      	blx	r6
 8007b54:	4602      	mov	r2, r0
 8007b56:	1c50      	adds	r0, r2, #1
 8007b58:	d1c9      	bne.n	8007aee <__sflush_r+0x32>
 8007b5a:	682b      	ldr	r3, [r5, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0c6      	beq.n	8007aee <__sflush_r+0x32>
 8007b60:	2b1d      	cmp	r3, #29
 8007b62:	d001      	beq.n	8007b68 <__sflush_r+0xac>
 8007b64:	2b16      	cmp	r3, #22
 8007b66:	d11e      	bne.n	8007ba6 <__sflush_r+0xea>
 8007b68:	602f      	str	r7, [r5, #0]
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	e022      	b.n	8007bb4 <__sflush_r+0xf8>
 8007b6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b72:	b21b      	sxth	r3, r3
 8007b74:	e01b      	b.n	8007bae <__sflush_r+0xf2>
 8007b76:	690f      	ldr	r7, [r1, #16]
 8007b78:	2f00      	cmp	r7, #0
 8007b7a:	d0f6      	beq.n	8007b6a <__sflush_r+0xae>
 8007b7c:	0793      	lsls	r3, r2, #30
 8007b7e:	680e      	ldr	r6, [r1, #0]
 8007b80:	bf08      	it	eq
 8007b82:	694b      	ldreq	r3, [r1, #20]
 8007b84:	600f      	str	r7, [r1, #0]
 8007b86:	bf18      	it	ne
 8007b88:	2300      	movne	r3, #0
 8007b8a:	eba6 0807 	sub.w	r8, r6, r7
 8007b8e:	608b      	str	r3, [r1, #8]
 8007b90:	f1b8 0f00 	cmp.w	r8, #0
 8007b94:	dde9      	ble.n	8007b6a <__sflush_r+0xae>
 8007b96:	6a21      	ldr	r1, [r4, #32]
 8007b98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b9a:	4643      	mov	r3, r8
 8007b9c:	463a      	mov	r2, r7
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	47b0      	blx	r6
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	dc08      	bgt.n	8007bb8 <__sflush_r+0xfc>
 8007ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bae:	81a3      	strh	r3, [r4, #12]
 8007bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb8:	4407      	add	r7, r0
 8007bba:	eba8 0800 	sub.w	r8, r8, r0
 8007bbe:	e7e7      	b.n	8007b90 <__sflush_r+0xd4>
 8007bc0:	20400001 	.word	0x20400001

08007bc4 <_fflush_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	690b      	ldr	r3, [r1, #16]
 8007bc8:	4605      	mov	r5, r0
 8007bca:	460c      	mov	r4, r1
 8007bcc:	b913      	cbnz	r3, 8007bd4 <_fflush_r+0x10>
 8007bce:	2500      	movs	r5, #0
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	b118      	cbz	r0, 8007bde <_fflush_r+0x1a>
 8007bd6:	6a03      	ldr	r3, [r0, #32]
 8007bd8:	b90b      	cbnz	r3, 8007bde <_fflush_r+0x1a>
 8007bda:	f7fe fa19 	bl	8006010 <__sinit>
 8007bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0f3      	beq.n	8007bce <_fflush_r+0xa>
 8007be6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007be8:	07d0      	lsls	r0, r2, #31
 8007bea:	d404      	bmi.n	8007bf6 <_fflush_r+0x32>
 8007bec:	0599      	lsls	r1, r3, #22
 8007bee:	d402      	bmi.n	8007bf6 <_fflush_r+0x32>
 8007bf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bf2:	f7fe fb26 	bl	8006242 <__retarget_lock_acquire_recursive>
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	f7ff ff5f 	bl	8007abc <__sflush_r>
 8007bfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c00:	07da      	lsls	r2, r3, #31
 8007c02:	4605      	mov	r5, r0
 8007c04:	d4e4      	bmi.n	8007bd0 <_fflush_r+0xc>
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	059b      	lsls	r3, r3, #22
 8007c0a:	d4e1      	bmi.n	8007bd0 <_fflush_r+0xc>
 8007c0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c0e:	f7fe fb19 	bl	8006244 <__retarget_lock_release_recursive>
 8007c12:	e7dd      	b.n	8007bd0 <_fflush_r+0xc>

08007c14 <memmove>:
 8007c14:	4288      	cmp	r0, r1
 8007c16:	b510      	push	{r4, lr}
 8007c18:	eb01 0402 	add.w	r4, r1, r2
 8007c1c:	d902      	bls.n	8007c24 <memmove+0x10>
 8007c1e:	4284      	cmp	r4, r0
 8007c20:	4623      	mov	r3, r4
 8007c22:	d807      	bhi.n	8007c34 <memmove+0x20>
 8007c24:	1e43      	subs	r3, r0, #1
 8007c26:	42a1      	cmp	r1, r4
 8007c28:	d008      	beq.n	8007c3c <memmove+0x28>
 8007c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c32:	e7f8      	b.n	8007c26 <memmove+0x12>
 8007c34:	4402      	add	r2, r0
 8007c36:	4601      	mov	r1, r0
 8007c38:	428a      	cmp	r2, r1
 8007c3a:	d100      	bne.n	8007c3e <memmove+0x2a>
 8007c3c:	bd10      	pop	{r4, pc}
 8007c3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c46:	e7f7      	b.n	8007c38 <memmove+0x24>

08007c48 <_sbrk_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4d06      	ldr	r5, [pc, #24]	@ (8007c64 <_sbrk_r+0x1c>)
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4604      	mov	r4, r0
 8007c50:	4608      	mov	r0, r1
 8007c52:	602b      	str	r3, [r5, #0]
 8007c54:	f7f9 fdb2 	bl	80017bc <_sbrk>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_sbrk_r+0x1a>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_sbrk_r+0x1a>
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	20000560 	.word	0x20000560

08007c68 <__assert_func>:
 8007c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c6a:	4614      	mov	r4, r2
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	4b09      	ldr	r3, [pc, #36]	@ (8007c94 <__assert_func+0x2c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4605      	mov	r5, r0
 8007c74:	68d8      	ldr	r0, [r3, #12]
 8007c76:	b14c      	cbz	r4, 8007c8c <__assert_func+0x24>
 8007c78:	4b07      	ldr	r3, [pc, #28]	@ (8007c98 <__assert_func+0x30>)
 8007c7a:	9100      	str	r1, [sp, #0]
 8007c7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c80:	4906      	ldr	r1, [pc, #24]	@ (8007c9c <__assert_func+0x34>)
 8007c82:	462b      	mov	r3, r5
 8007c84:	f000 f870 	bl	8007d68 <fiprintf>
 8007c88:	f000 f880 	bl	8007d8c <abort>
 8007c8c:	4b04      	ldr	r3, [pc, #16]	@ (8007ca0 <__assert_func+0x38>)
 8007c8e:	461c      	mov	r4, r3
 8007c90:	e7f3      	b.n	8007c7a <__assert_func+0x12>
 8007c92:	bf00      	nop
 8007c94:	20000068 	.word	0x20000068
 8007c98:	080084b5 	.word	0x080084b5
 8007c9c:	080084c2 	.word	0x080084c2
 8007ca0:	080084f0 	.word	0x080084f0

08007ca4 <_calloc_r>:
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	fba1 5402 	umull	r5, r4, r1, r2
 8007caa:	b934      	cbnz	r4, 8007cba <_calloc_r+0x16>
 8007cac:	4629      	mov	r1, r5
 8007cae:	f7ff f9a7 	bl	8007000 <_malloc_r>
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	b928      	cbnz	r0, 8007cc2 <_calloc_r+0x1e>
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	bd70      	pop	{r4, r5, r6, pc}
 8007cba:	220c      	movs	r2, #12
 8007cbc:	6002      	str	r2, [r0, #0]
 8007cbe:	2600      	movs	r6, #0
 8007cc0:	e7f9      	b.n	8007cb6 <_calloc_r+0x12>
 8007cc2:	462a      	mov	r2, r5
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	f7fe fa3e 	bl	8006146 <memset>
 8007cca:	e7f4      	b.n	8007cb6 <_calloc_r+0x12>

08007ccc <__ascii_mbtowc>:
 8007ccc:	b082      	sub	sp, #8
 8007cce:	b901      	cbnz	r1, 8007cd2 <__ascii_mbtowc+0x6>
 8007cd0:	a901      	add	r1, sp, #4
 8007cd2:	b142      	cbz	r2, 8007ce6 <__ascii_mbtowc+0x1a>
 8007cd4:	b14b      	cbz	r3, 8007cea <__ascii_mbtowc+0x1e>
 8007cd6:	7813      	ldrb	r3, [r2, #0]
 8007cd8:	600b      	str	r3, [r1, #0]
 8007cda:	7812      	ldrb	r2, [r2, #0]
 8007cdc:	1e10      	subs	r0, r2, #0
 8007cde:	bf18      	it	ne
 8007ce0:	2001      	movne	r0, #1
 8007ce2:	b002      	add	sp, #8
 8007ce4:	4770      	bx	lr
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	e7fb      	b.n	8007ce2 <__ascii_mbtowc+0x16>
 8007cea:	f06f 0001 	mvn.w	r0, #1
 8007cee:	e7f8      	b.n	8007ce2 <__ascii_mbtowc+0x16>

08007cf0 <_realloc_r>:
 8007cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	4614      	mov	r4, r2
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	b921      	cbnz	r1, 8007d06 <_realloc_r+0x16>
 8007cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d00:	4611      	mov	r1, r2
 8007d02:	f7ff b97d 	b.w	8007000 <_malloc_r>
 8007d06:	b92a      	cbnz	r2, 8007d14 <_realloc_r+0x24>
 8007d08:	f7ff f906 	bl	8006f18 <_free_r>
 8007d0c:	4625      	mov	r5, r4
 8007d0e:	4628      	mov	r0, r5
 8007d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d14:	f000 f841 	bl	8007d9a <_malloc_usable_size_r>
 8007d18:	4284      	cmp	r4, r0
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	d802      	bhi.n	8007d24 <_realloc_r+0x34>
 8007d1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d22:	d8f4      	bhi.n	8007d0e <_realloc_r+0x1e>
 8007d24:	4621      	mov	r1, r4
 8007d26:	4638      	mov	r0, r7
 8007d28:	f7ff f96a 	bl	8007000 <_malloc_r>
 8007d2c:	4680      	mov	r8, r0
 8007d2e:	b908      	cbnz	r0, 8007d34 <_realloc_r+0x44>
 8007d30:	4645      	mov	r5, r8
 8007d32:	e7ec      	b.n	8007d0e <_realloc_r+0x1e>
 8007d34:	42b4      	cmp	r4, r6
 8007d36:	4622      	mov	r2, r4
 8007d38:	4629      	mov	r1, r5
 8007d3a:	bf28      	it	cs
 8007d3c:	4632      	movcs	r2, r6
 8007d3e:	f7fe fa82 	bl	8006246 <memcpy>
 8007d42:	4629      	mov	r1, r5
 8007d44:	4638      	mov	r0, r7
 8007d46:	f7ff f8e7 	bl	8006f18 <_free_r>
 8007d4a:	e7f1      	b.n	8007d30 <_realloc_r+0x40>

08007d4c <__ascii_wctomb>:
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	4608      	mov	r0, r1
 8007d50:	b141      	cbz	r1, 8007d64 <__ascii_wctomb+0x18>
 8007d52:	2aff      	cmp	r2, #255	@ 0xff
 8007d54:	d904      	bls.n	8007d60 <__ascii_wctomb+0x14>
 8007d56:	228a      	movs	r2, #138	@ 0x8a
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5e:	4770      	bx	lr
 8007d60:	700a      	strb	r2, [r1, #0]
 8007d62:	2001      	movs	r0, #1
 8007d64:	4770      	bx	lr
	...

08007d68 <fiprintf>:
 8007d68:	b40e      	push	{r1, r2, r3}
 8007d6a:	b503      	push	{r0, r1, lr}
 8007d6c:	4601      	mov	r1, r0
 8007d6e:	ab03      	add	r3, sp, #12
 8007d70:	4805      	ldr	r0, [pc, #20]	@ (8007d88 <fiprintf+0x20>)
 8007d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d76:	6800      	ldr	r0, [r0, #0]
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	f000 f83f 	bl	8007dfc <_vfiprintf_r>
 8007d7e:	b002      	add	sp, #8
 8007d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d84:	b003      	add	sp, #12
 8007d86:	4770      	bx	lr
 8007d88:	20000068 	.word	0x20000068

08007d8c <abort>:
 8007d8c:	b508      	push	{r3, lr}
 8007d8e:	2006      	movs	r0, #6
 8007d90:	f000 fa08 	bl	80081a4 <raise>
 8007d94:	2001      	movs	r0, #1
 8007d96:	f7f9 fc99 	bl	80016cc <_exit>

08007d9a <_malloc_usable_size_r>:
 8007d9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d9e:	1f18      	subs	r0, r3, #4
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	bfbc      	itt	lt
 8007da4:	580b      	ldrlt	r3, [r1, r0]
 8007da6:	18c0      	addlt	r0, r0, r3
 8007da8:	4770      	bx	lr

08007daa <__sfputc_r>:
 8007daa:	6893      	ldr	r3, [r2, #8]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	b410      	push	{r4}
 8007db2:	6093      	str	r3, [r2, #8]
 8007db4:	da08      	bge.n	8007dc8 <__sfputc_r+0x1e>
 8007db6:	6994      	ldr	r4, [r2, #24]
 8007db8:	42a3      	cmp	r3, r4
 8007dba:	db01      	blt.n	8007dc0 <__sfputc_r+0x16>
 8007dbc:	290a      	cmp	r1, #10
 8007dbe:	d103      	bne.n	8007dc8 <__sfputc_r+0x1e>
 8007dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dc4:	f000 b932 	b.w	800802c <__swbuf_r>
 8007dc8:	6813      	ldr	r3, [r2, #0]
 8007dca:	1c58      	adds	r0, r3, #1
 8007dcc:	6010      	str	r0, [r2, #0]
 8007dce:	7019      	strb	r1, [r3, #0]
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <__sfputs_r>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	4606      	mov	r6, r0
 8007ddc:	460f      	mov	r7, r1
 8007dde:	4614      	mov	r4, r2
 8007de0:	18d5      	adds	r5, r2, r3
 8007de2:	42ac      	cmp	r4, r5
 8007de4:	d101      	bne.n	8007dea <__sfputs_r+0x12>
 8007de6:	2000      	movs	r0, #0
 8007de8:	e007      	b.n	8007dfa <__sfputs_r+0x22>
 8007dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dee:	463a      	mov	r2, r7
 8007df0:	4630      	mov	r0, r6
 8007df2:	f7ff ffda 	bl	8007daa <__sfputc_r>
 8007df6:	1c43      	adds	r3, r0, #1
 8007df8:	d1f3      	bne.n	8007de2 <__sfputs_r+0xa>
 8007dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007dfc <_vfiprintf_r>:
 8007dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e00:	460d      	mov	r5, r1
 8007e02:	b09d      	sub	sp, #116	@ 0x74
 8007e04:	4614      	mov	r4, r2
 8007e06:	4698      	mov	r8, r3
 8007e08:	4606      	mov	r6, r0
 8007e0a:	b118      	cbz	r0, 8007e14 <_vfiprintf_r+0x18>
 8007e0c:	6a03      	ldr	r3, [r0, #32]
 8007e0e:	b90b      	cbnz	r3, 8007e14 <_vfiprintf_r+0x18>
 8007e10:	f7fe f8fe 	bl	8006010 <__sinit>
 8007e14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e16:	07d9      	lsls	r1, r3, #31
 8007e18:	d405      	bmi.n	8007e26 <_vfiprintf_r+0x2a>
 8007e1a:	89ab      	ldrh	r3, [r5, #12]
 8007e1c:	059a      	lsls	r2, r3, #22
 8007e1e:	d402      	bmi.n	8007e26 <_vfiprintf_r+0x2a>
 8007e20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e22:	f7fe fa0e 	bl	8006242 <__retarget_lock_acquire_recursive>
 8007e26:	89ab      	ldrh	r3, [r5, #12]
 8007e28:	071b      	lsls	r3, r3, #28
 8007e2a:	d501      	bpl.n	8007e30 <_vfiprintf_r+0x34>
 8007e2c:	692b      	ldr	r3, [r5, #16]
 8007e2e:	b99b      	cbnz	r3, 8007e58 <_vfiprintf_r+0x5c>
 8007e30:	4629      	mov	r1, r5
 8007e32:	4630      	mov	r0, r6
 8007e34:	f000 f938 	bl	80080a8 <__swsetup_r>
 8007e38:	b170      	cbz	r0, 8007e58 <_vfiprintf_r+0x5c>
 8007e3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e3c:	07dc      	lsls	r4, r3, #31
 8007e3e:	d504      	bpl.n	8007e4a <_vfiprintf_r+0x4e>
 8007e40:	f04f 30ff 	mov.w	r0, #4294967295
 8007e44:	b01d      	add	sp, #116	@ 0x74
 8007e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4a:	89ab      	ldrh	r3, [r5, #12]
 8007e4c:	0598      	lsls	r0, r3, #22
 8007e4e:	d4f7      	bmi.n	8007e40 <_vfiprintf_r+0x44>
 8007e50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e52:	f7fe f9f7 	bl	8006244 <__retarget_lock_release_recursive>
 8007e56:	e7f3      	b.n	8007e40 <_vfiprintf_r+0x44>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e5c:	2320      	movs	r3, #32
 8007e5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e66:	2330      	movs	r3, #48	@ 0x30
 8007e68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008018 <_vfiprintf_r+0x21c>
 8007e6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e70:	f04f 0901 	mov.w	r9, #1
 8007e74:	4623      	mov	r3, r4
 8007e76:	469a      	mov	sl, r3
 8007e78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e7c:	b10a      	cbz	r2, 8007e82 <_vfiprintf_r+0x86>
 8007e7e:	2a25      	cmp	r2, #37	@ 0x25
 8007e80:	d1f9      	bne.n	8007e76 <_vfiprintf_r+0x7a>
 8007e82:	ebba 0b04 	subs.w	fp, sl, r4
 8007e86:	d00b      	beq.n	8007ea0 <_vfiprintf_r+0xa4>
 8007e88:	465b      	mov	r3, fp
 8007e8a:	4622      	mov	r2, r4
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f7ff ffa2 	bl	8007dd8 <__sfputs_r>
 8007e94:	3001      	adds	r0, #1
 8007e96:	f000 80a7 	beq.w	8007fe8 <_vfiprintf_r+0x1ec>
 8007e9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e9c:	445a      	add	r2, fp
 8007e9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 809f 	beq.w	8007fe8 <_vfiprintf_r+0x1ec>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eb4:	f10a 0a01 	add.w	sl, sl, #1
 8007eb8:	9304      	str	r3, [sp, #16]
 8007eba:	9307      	str	r3, [sp, #28]
 8007ebc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ec0:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ec2:	4654      	mov	r4, sl
 8007ec4:	2205      	movs	r2, #5
 8007ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eca:	4853      	ldr	r0, [pc, #332]	@ (8008018 <_vfiprintf_r+0x21c>)
 8007ecc:	f7f8 f980 	bl	80001d0 <memchr>
 8007ed0:	9a04      	ldr	r2, [sp, #16]
 8007ed2:	b9d8      	cbnz	r0, 8007f0c <_vfiprintf_r+0x110>
 8007ed4:	06d1      	lsls	r1, r2, #27
 8007ed6:	bf44      	itt	mi
 8007ed8:	2320      	movmi	r3, #32
 8007eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ede:	0713      	lsls	r3, r2, #28
 8007ee0:	bf44      	itt	mi
 8007ee2:	232b      	movmi	r3, #43	@ 0x2b
 8007ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8007eec:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eee:	d015      	beq.n	8007f1c <_vfiprintf_r+0x120>
 8007ef0:	9a07      	ldr	r2, [sp, #28]
 8007ef2:	4654      	mov	r4, sl
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	f04f 0c0a 	mov.w	ip, #10
 8007efa:	4621      	mov	r1, r4
 8007efc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f00:	3b30      	subs	r3, #48	@ 0x30
 8007f02:	2b09      	cmp	r3, #9
 8007f04:	d94b      	bls.n	8007f9e <_vfiprintf_r+0x1a2>
 8007f06:	b1b0      	cbz	r0, 8007f36 <_vfiprintf_r+0x13a>
 8007f08:	9207      	str	r2, [sp, #28]
 8007f0a:	e014      	b.n	8007f36 <_vfiprintf_r+0x13a>
 8007f0c:	eba0 0308 	sub.w	r3, r0, r8
 8007f10:	fa09 f303 	lsl.w	r3, r9, r3
 8007f14:	4313      	orrs	r3, r2
 8007f16:	9304      	str	r3, [sp, #16]
 8007f18:	46a2      	mov	sl, r4
 8007f1a:	e7d2      	b.n	8007ec2 <_vfiprintf_r+0xc6>
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	1d19      	adds	r1, r3, #4
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	9103      	str	r1, [sp, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	bfbb      	ittet	lt
 8007f28:	425b      	neglt	r3, r3
 8007f2a:	f042 0202 	orrlt.w	r2, r2, #2
 8007f2e:	9307      	strge	r3, [sp, #28]
 8007f30:	9307      	strlt	r3, [sp, #28]
 8007f32:	bfb8      	it	lt
 8007f34:	9204      	strlt	r2, [sp, #16]
 8007f36:	7823      	ldrb	r3, [r4, #0]
 8007f38:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f3a:	d10a      	bne.n	8007f52 <_vfiprintf_r+0x156>
 8007f3c:	7863      	ldrb	r3, [r4, #1]
 8007f3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f40:	d132      	bne.n	8007fa8 <_vfiprintf_r+0x1ac>
 8007f42:	9b03      	ldr	r3, [sp, #12]
 8007f44:	1d1a      	adds	r2, r3, #4
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	9203      	str	r2, [sp, #12]
 8007f4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f4e:	3402      	adds	r4, #2
 8007f50:	9305      	str	r3, [sp, #20]
 8007f52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008028 <_vfiprintf_r+0x22c>
 8007f56:	7821      	ldrb	r1, [r4, #0]
 8007f58:	2203      	movs	r2, #3
 8007f5a:	4650      	mov	r0, sl
 8007f5c:	f7f8 f938 	bl	80001d0 <memchr>
 8007f60:	b138      	cbz	r0, 8007f72 <_vfiprintf_r+0x176>
 8007f62:	9b04      	ldr	r3, [sp, #16]
 8007f64:	eba0 000a 	sub.w	r0, r0, sl
 8007f68:	2240      	movs	r2, #64	@ 0x40
 8007f6a:	4082      	lsls	r2, r0
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	3401      	adds	r4, #1
 8007f70:	9304      	str	r3, [sp, #16]
 8007f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f76:	4829      	ldr	r0, [pc, #164]	@ (800801c <_vfiprintf_r+0x220>)
 8007f78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f7c:	2206      	movs	r2, #6
 8007f7e:	f7f8 f927 	bl	80001d0 <memchr>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d03f      	beq.n	8008006 <_vfiprintf_r+0x20a>
 8007f86:	4b26      	ldr	r3, [pc, #152]	@ (8008020 <_vfiprintf_r+0x224>)
 8007f88:	bb1b      	cbnz	r3, 8007fd2 <_vfiprintf_r+0x1d6>
 8007f8a:	9b03      	ldr	r3, [sp, #12]
 8007f8c:	3307      	adds	r3, #7
 8007f8e:	f023 0307 	bic.w	r3, r3, #7
 8007f92:	3308      	adds	r3, #8
 8007f94:	9303      	str	r3, [sp, #12]
 8007f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f98:	443b      	add	r3, r7
 8007f9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f9c:	e76a      	b.n	8007e74 <_vfiprintf_r+0x78>
 8007f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	2001      	movs	r0, #1
 8007fa6:	e7a8      	b.n	8007efa <_vfiprintf_r+0xfe>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	3401      	adds	r4, #1
 8007fac:	9305      	str	r3, [sp, #20]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	f04f 0c0a 	mov.w	ip, #10
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fba:	3a30      	subs	r2, #48	@ 0x30
 8007fbc:	2a09      	cmp	r2, #9
 8007fbe:	d903      	bls.n	8007fc8 <_vfiprintf_r+0x1cc>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0c6      	beq.n	8007f52 <_vfiprintf_r+0x156>
 8007fc4:	9105      	str	r1, [sp, #20]
 8007fc6:	e7c4      	b.n	8007f52 <_vfiprintf_r+0x156>
 8007fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fcc:	4604      	mov	r4, r0
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e7f0      	b.n	8007fb4 <_vfiprintf_r+0x1b8>
 8007fd2:	ab03      	add	r3, sp, #12
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	462a      	mov	r2, r5
 8007fd8:	4b12      	ldr	r3, [pc, #72]	@ (8008024 <_vfiprintf_r+0x228>)
 8007fda:	a904      	add	r1, sp, #16
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f7fd fbd5 	bl	800578c <_printf_float>
 8007fe2:	4607      	mov	r7, r0
 8007fe4:	1c78      	adds	r0, r7, #1
 8007fe6:	d1d6      	bne.n	8007f96 <_vfiprintf_r+0x19a>
 8007fe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fea:	07d9      	lsls	r1, r3, #31
 8007fec:	d405      	bmi.n	8007ffa <_vfiprintf_r+0x1fe>
 8007fee:	89ab      	ldrh	r3, [r5, #12]
 8007ff0:	059a      	lsls	r2, r3, #22
 8007ff2:	d402      	bmi.n	8007ffa <_vfiprintf_r+0x1fe>
 8007ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ff6:	f7fe f925 	bl	8006244 <__retarget_lock_release_recursive>
 8007ffa:	89ab      	ldrh	r3, [r5, #12]
 8007ffc:	065b      	lsls	r3, r3, #25
 8007ffe:	f53f af1f 	bmi.w	8007e40 <_vfiprintf_r+0x44>
 8008002:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008004:	e71e      	b.n	8007e44 <_vfiprintf_r+0x48>
 8008006:	ab03      	add	r3, sp, #12
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	462a      	mov	r2, r5
 800800c:	4b05      	ldr	r3, [pc, #20]	@ (8008024 <_vfiprintf_r+0x228>)
 800800e:	a904      	add	r1, sp, #16
 8008010:	4630      	mov	r0, r6
 8008012:	f7fd fe53 	bl	8005cbc <_printf_i>
 8008016:	e7e4      	b.n	8007fe2 <_vfiprintf_r+0x1e6>
 8008018:	0800849a 	.word	0x0800849a
 800801c:	080084a4 	.word	0x080084a4
 8008020:	0800578d 	.word	0x0800578d
 8008024:	08007dd9 	.word	0x08007dd9
 8008028:	080084a0 	.word	0x080084a0

0800802c <__swbuf_r>:
 800802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802e:	460e      	mov	r6, r1
 8008030:	4614      	mov	r4, r2
 8008032:	4605      	mov	r5, r0
 8008034:	b118      	cbz	r0, 800803e <__swbuf_r+0x12>
 8008036:	6a03      	ldr	r3, [r0, #32]
 8008038:	b90b      	cbnz	r3, 800803e <__swbuf_r+0x12>
 800803a:	f7fd ffe9 	bl	8006010 <__sinit>
 800803e:	69a3      	ldr	r3, [r4, #24]
 8008040:	60a3      	str	r3, [r4, #8]
 8008042:	89a3      	ldrh	r3, [r4, #12]
 8008044:	071a      	lsls	r2, r3, #28
 8008046:	d501      	bpl.n	800804c <__swbuf_r+0x20>
 8008048:	6923      	ldr	r3, [r4, #16]
 800804a:	b943      	cbnz	r3, 800805e <__swbuf_r+0x32>
 800804c:	4621      	mov	r1, r4
 800804e:	4628      	mov	r0, r5
 8008050:	f000 f82a 	bl	80080a8 <__swsetup_r>
 8008054:	b118      	cbz	r0, 800805e <__swbuf_r+0x32>
 8008056:	f04f 37ff 	mov.w	r7, #4294967295
 800805a:	4638      	mov	r0, r7
 800805c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	6922      	ldr	r2, [r4, #16]
 8008062:	1a98      	subs	r0, r3, r2
 8008064:	6963      	ldr	r3, [r4, #20]
 8008066:	b2f6      	uxtb	r6, r6
 8008068:	4283      	cmp	r3, r0
 800806a:	4637      	mov	r7, r6
 800806c:	dc05      	bgt.n	800807a <__swbuf_r+0x4e>
 800806e:	4621      	mov	r1, r4
 8008070:	4628      	mov	r0, r5
 8008072:	f7ff fda7 	bl	8007bc4 <_fflush_r>
 8008076:	2800      	cmp	r0, #0
 8008078:	d1ed      	bne.n	8008056 <__swbuf_r+0x2a>
 800807a:	68a3      	ldr	r3, [r4, #8]
 800807c:	3b01      	subs	r3, #1
 800807e:	60a3      	str	r3, [r4, #8]
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	6022      	str	r2, [r4, #0]
 8008086:	701e      	strb	r6, [r3, #0]
 8008088:	6962      	ldr	r2, [r4, #20]
 800808a:	1c43      	adds	r3, r0, #1
 800808c:	429a      	cmp	r2, r3
 800808e:	d004      	beq.n	800809a <__swbuf_r+0x6e>
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	07db      	lsls	r3, r3, #31
 8008094:	d5e1      	bpl.n	800805a <__swbuf_r+0x2e>
 8008096:	2e0a      	cmp	r6, #10
 8008098:	d1df      	bne.n	800805a <__swbuf_r+0x2e>
 800809a:	4621      	mov	r1, r4
 800809c:	4628      	mov	r0, r5
 800809e:	f7ff fd91 	bl	8007bc4 <_fflush_r>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d0d9      	beq.n	800805a <__swbuf_r+0x2e>
 80080a6:	e7d6      	b.n	8008056 <__swbuf_r+0x2a>

080080a8 <__swsetup_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4b29      	ldr	r3, [pc, #164]	@ (8008150 <__swsetup_r+0xa8>)
 80080ac:	4605      	mov	r5, r0
 80080ae:	6818      	ldr	r0, [r3, #0]
 80080b0:	460c      	mov	r4, r1
 80080b2:	b118      	cbz	r0, 80080bc <__swsetup_r+0x14>
 80080b4:	6a03      	ldr	r3, [r0, #32]
 80080b6:	b90b      	cbnz	r3, 80080bc <__swsetup_r+0x14>
 80080b8:	f7fd ffaa 	bl	8006010 <__sinit>
 80080bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080c0:	0719      	lsls	r1, r3, #28
 80080c2:	d422      	bmi.n	800810a <__swsetup_r+0x62>
 80080c4:	06da      	lsls	r2, r3, #27
 80080c6:	d407      	bmi.n	80080d8 <__swsetup_r+0x30>
 80080c8:	2209      	movs	r2, #9
 80080ca:	602a      	str	r2, [r5, #0]
 80080cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080d0:	81a3      	strh	r3, [r4, #12]
 80080d2:	f04f 30ff 	mov.w	r0, #4294967295
 80080d6:	e033      	b.n	8008140 <__swsetup_r+0x98>
 80080d8:	0758      	lsls	r0, r3, #29
 80080da:	d512      	bpl.n	8008102 <__swsetup_r+0x5a>
 80080dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080de:	b141      	cbz	r1, 80080f2 <__swsetup_r+0x4a>
 80080e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080e4:	4299      	cmp	r1, r3
 80080e6:	d002      	beq.n	80080ee <__swsetup_r+0x46>
 80080e8:	4628      	mov	r0, r5
 80080ea:	f7fe ff15 	bl	8006f18 <_free_r>
 80080ee:	2300      	movs	r3, #0
 80080f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080f8:	81a3      	strh	r3, [r4, #12]
 80080fa:	2300      	movs	r3, #0
 80080fc:	6063      	str	r3, [r4, #4]
 80080fe:	6923      	ldr	r3, [r4, #16]
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	f043 0308 	orr.w	r3, r3, #8
 8008108:	81a3      	strh	r3, [r4, #12]
 800810a:	6923      	ldr	r3, [r4, #16]
 800810c:	b94b      	cbnz	r3, 8008122 <__swsetup_r+0x7a>
 800810e:	89a3      	ldrh	r3, [r4, #12]
 8008110:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008118:	d003      	beq.n	8008122 <__swsetup_r+0x7a>
 800811a:	4621      	mov	r1, r4
 800811c:	4628      	mov	r0, r5
 800811e:	f000 f883 	bl	8008228 <__smakebuf_r>
 8008122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008126:	f013 0201 	ands.w	r2, r3, #1
 800812a:	d00a      	beq.n	8008142 <__swsetup_r+0x9a>
 800812c:	2200      	movs	r2, #0
 800812e:	60a2      	str	r2, [r4, #8]
 8008130:	6962      	ldr	r2, [r4, #20]
 8008132:	4252      	negs	r2, r2
 8008134:	61a2      	str	r2, [r4, #24]
 8008136:	6922      	ldr	r2, [r4, #16]
 8008138:	b942      	cbnz	r2, 800814c <__swsetup_r+0xa4>
 800813a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800813e:	d1c5      	bne.n	80080cc <__swsetup_r+0x24>
 8008140:	bd38      	pop	{r3, r4, r5, pc}
 8008142:	0799      	lsls	r1, r3, #30
 8008144:	bf58      	it	pl
 8008146:	6962      	ldrpl	r2, [r4, #20]
 8008148:	60a2      	str	r2, [r4, #8]
 800814a:	e7f4      	b.n	8008136 <__swsetup_r+0x8e>
 800814c:	2000      	movs	r0, #0
 800814e:	e7f7      	b.n	8008140 <__swsetup_r+0x98>
 8008150:	20000068 	.word	0x20000068

08008154 <_raise_r>:
 8008154:	291f      	cmp	r1, #31
 8008156:	b538      	push	{r3, r4, r5, lr}
 8008158:	4605      	mov	r5, r0
 800815a:	460c      	mov	r4, r1
 800815c:	d904      	bls.n	8008168 <_raise_r+0x14>
 800815e:	2316      	movs	r3, #22
 8008160:	6003      	str	r3, [r0, #0]
 8008162:	f04f 30ff 	mov.w	r0, #4294967295
 8008166:	bd38      	pop	{r3, r4, r5, pc}
 8008168:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800816a:	b112      	cbz	r2, 8008172 <_raise_r+0x1e>
 800816c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008170:	b94b      	cbnz	r3, 8008186 <_raise_r+0x32>
 8008172:	4628      	mov	r0, r5
 8008174:	f000 f830 	bl	80081d8 <_getpid_r>
 8008178:	4622      	mov	r2, r4
 800817a:	4601      	mov	r1, r0
 800817c:	4628      	mov	r0, r5
 800817e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008182:	f000 b817 	b.w	80081b4 <_kill_r>
 8008186:	2b01      	cmp	r3, #1
 8008188:	d00a      	beq.n	80081a0 <_raise_r+0x4c>
 800818a:	1c59      	adds	r1, r3, #1
 800818c:	d103      	bne.n	8008196 <_raise_r+0x42>
 800818e:	2316      	movs	r3, #22
 8008190:	6003      	str	r3, [r0, #0]
 8008192:	2001      	movs	r0, #1
 8008194:	e7e7      	b.n	8008166 <_raise_r+0x12>
 8008196:	2100      	movs	r1, #0
 8008198:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800819c:	4620      	mov	r0, r4
 800819e:	4798      	blx	r3
 80081a0:	2000      	movs	r0, #0
 80081a2:	e7e0      	b.n	8008166 <_raise_r+0x12>

080081a4 <raise>:
 80081a4:	4b02      	ldr	r3, [pc, #8]	@ (80081b0 <raise+0xc>)
 80081a6:	4601      	mov	r1, r0
 80081a8:	6818      	ldr	r0, [r3, #0]
 80081aa:	f7ff bfd3 	b.w	8008154 <_raise_r>
 80081ae:	bf00      	nop
 80081b0:	20000068 	.word	0x20000068

080081b4 <_kill_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4d07      	ldr	r5, [pc, #28]	@ (80081d4 <_kill_r+0x20>)
 80081b8:	2300      	movs	r3, #0
 80081ba:	4604      	mov	r4, r0
 80081bc:	4608      	mov	r0, r1
 80081be:	4611      	mov	r1, r2
 80081c0:	602b      	str	r3, [r5, #0]
 80081c2:	f7f9 fa73 	bl	80016ac <_kill>
 80081c6:	1c43      	adds	r3, r0, #1
 80081c8:	d102      	bne.n	80081d0 <_kill_r+0x1c>
 80081ca:	682b      	ldr	r3, [r5, #0]
 80081cc:	b103      	cbz	r3, 80081d0 <_kill_r+0x1c>
 80081ce:	6023      	str	r3, [r4, #0]
 80081d0:	bd38      	pop	{r3, r4, r5, pc}
 80081d2:	bf00      	nop
 80081d4:	20000560 	.word	0x20000560

080081d8 <_getpid_r>:
 80081d8:	f7f9 ba60 	b.w	800169c <_getpid>

080081dc <__swhatbuf_r>:
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	460c      	mov	r4, r1
 80081e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e4:	2900      	cmp	r1, #0
 80081e6:	b096      	sub	sp, #88	@ 0x58
 80081e8:	4615      	mov	r5, r2
 80081ea:	461e      	mov	r6, r3
 80081ec:	da0d      	bge.n	800820a <__swhatbuf_r+0x2e>
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80081f4:	f04f 0100 	mov.w	r1, #0
 80081f8:	bf14      	ite	ne
 80081fa:	2340      	movne	r3, #64	@ 0x40
 80081fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008200:	2000      	movs	r0, #0
 8008202:	6031      	str	r1, [r6, #0]
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	b016      	add	sp, #88	@ 0x58
 8008208:	bd70      	pop	{r4, r5, r6, pc}
 800820a:	466a      	mov	r2, sp
 800820c:	f000 f848 	bl	80082a0 <_fstat_r>
 8008210:	2800      	cmp	r0, #0
 8008212:	dbec      	blt.n	80081ee <__swhatbuf_r+0x12>
 8008214:	9901      	ldr	r1, [sp, #4]
 8008216:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800821a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800821e:	4259      	negs	r1, r3
 8008220:	4159      	adcs	r1, r3
 8008222:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008226:	e7eb      	b.n	8008200 <__swhatbuf_r+0x24>

08008228 <__smakebuf_r>:
 8008228:	898b      	ldrh	r3, [r1, #12]
 800822a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800822c:	079d      	lsls	r5, r3, #30
 800822e:	4606      	mov	r6, r0
 8008230:	460c      	mov	r4, r1
 8008232:	d507      	bpl.n	8008244 <__smakebuf_r+0x1c>
 8008234:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	6123      	str	r3, [r4, #16]
 800823c:	2301      	movs	r3, #1
 800823e:	6163      	str	r3, [r4, #20]
 8008240:	b003      	add	sp, #12
 8008242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008244:	ab01      	add	r3, sp, #4
 8008246:	466a      	mov	r2, sp
 8008248:	f7ff ffc8 	bl	80081dc <__swhatbuf_r>
 800824c:	9f00      	ldr	r7, [sp, #0]
 800824e:	4605      	mov	r5, r0
 8008250:	4639      	mov	r1, r7
 8008252:	4630      	mov	r0, r6
 8008254:	f7fe fed4 	bl	8007000 <_malloc_r>
 8008258:	b948      	cbnz	r0, 800826e <__smakebuf_r+0x46>
 800825a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825e:	059a      	lsls	r2, r3, #22
 8008260:	d4ee      	bmi.n	8008240 <__smakebuf_r+0x18>
 8008262:	f023 0303 	bic.w	r3, r3, #3
 8008266:	f043 0302 	orr.w	r3, r3, #2
 800826a:	81a3      	strh	r3, [r4, #12]
 800826c:	e7e2      	b.n	8008234 <__smakebuf_r+0xc>
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	6020      	str	r0, [r4, #0]
 8008272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008276:	81a3      	strh	r3, [r4, #12]
 8008278:	9b01      	ldr	r3, [sp, #4]
 800827a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800827e:	b15b      	cbz	r3, 8008298 <__smakebuf_r+0x70>
 8008280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008284:	4630      	mov	r0, r6
 8008286:	f000 f81d 	bl	80082c4 <_isatty_r>
 800828a:	b128      	cbz	r0, 8008298 <__smakebuf_r+0x70>
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	f023 0303 	bic.w	r3, r3, #3
 8008292:	f043 0301 	orr.w	r3, r3, #1
 8008296:	81a3      	strh	r3, [r4, #12]
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	431d      	orrs	r5, r3
 800829c:	81a5      	strh	r5, [r4, #12]
 800829e:	e7cf      	b.n	8008240 <__smakebuf_r+0x18>

080082a0 <_fstat_r>:
 80082a0:	b538      	push	{r3, r4, r5, lr}
 80082a2:	4d07      	ldr	r5, [pc, #28]	@ (80082c0 <_fstat_r+0x20>)
 80082a4:	2300      	movs	r3, #0
 80082a6:	4604      	mov	r4, r0
 80082a8:	4608      	mov	r0, r1
 80082aa:	4611      	mov	r1, r2
 80082ac:	602b      	str	r3, [r5, #0]
 80082ae:	f7f9 fa5d 	bl	800176c <_fstat>
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	d102      	bne.n	80082bc <_fstat_r+0x1c>
 80082b6:	682b      	ldr	r3, [r5, #0]
 80082b8:	b103      	cbz	r3, 80082bc <_fstat_r+0x1c>
 80082ba:	6023      	str	r3, [r4, #0]
 80082bc:	bd38      	pop	{r3, r4, r5, pc}
 80082be:	bf00      	nop
 80082c0:	20000560 	.word	0x20000560

080082c4 <_isatty_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4d06      	ldr	r5, [pc, #24]	@ (80082e0 <_isatty_r+0x1c>)
 80082c8:	2300      	movs	r3, #0
 80082ca:	4604      	mov	r4, r0
 80082cc:	4608      	mov	r0, r1
 80082ce:	602b      	str	r3, [r5, #0]
 80082d0:	f7f9 fa5c 	bl	800178c <_isatty>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d102      	bne.n	80082de <_isatty_r+0x1a>
 80082d8:	682b      	ldr	r3, [r5, #0]
 80082da:	b103      	cbz	r3, 80082de <_isatty_r+0x1a>
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	20000560 	.word	0x20000560

080082e4 <_init>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	bf00      	nop
 80082e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ea:	bc08      	pop	{r3}
 80082ec:	469e      	mov	lr, r3
 80082ee:	4770      	bx	lr

080082f0 <_fini>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	bf00      	nop
 80082f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f6:	bc08      	pop	{r3}
 80082f8:	469e      	mov	lr, r3
 80082fa:	4770      	bx	lr
